{
  "version": 3,
  "sources": ["../../node_modules/svelte/internal/index.mjs", "../../src/music.js", "../../src/svelte/metronome.svelte", "../../src/svelte/guitar.svelte", "../../src/svelte/record_rythm.svelte", "../../node_modules/vexflow/build/esm/src/util.js", "../../node_modules/vexflow/build/esm/src/fraction.js", "../../node_modules/vexflow/build/esm/src/boundingbox.js", "../../node_modules/vexflow/build/esm/src/boundingboxcomputation.js", "../../node_modules/vexflow/build/esm/src/font.js", "../../node_modules/vexflow/build/esm/src/registry.js", "../../node_modules/vexflow/build/esm/src/element.js", "../../node_modules/vexflow/build/esm/src/tables.js", "../../node_modules/vexflow/build/esm/src/glyph.js", "../../node_modules/vexflow/build/esm/src/modifier.js", "../../node_modules/vexflow/build/esm/src/music.js", "../../node_modules/vexflow/build/esm/src/typeguard.js", "../../node_modules/vexflow/build/esm/src/accidental.js", "../../node_modules/vexflow/build/esm/src/stem.js", "../../node_modules/vexflow/build/esm/src/textformatter.js", "../../node_modules/vexflow/build/esm/src/annotation.js", "../../node_modules/vexflow/build/esm/src/articulation.js", "../../node_modules/vexflow/build/esm/src/rendercontext.js", "../../node_modules/vexflow/build/esm/src/tickable.js", "../../node_modules/vexflow/build/esm/src/note.js", "../../node_modules/vexflow/build/esm/src/stavemodifier.js", "../../node_modules/vexflow/build/esm/src/stavebarline.js", "../../node_modules/vexflow/build/esm/src/barnote.js", "../../node_modules/vexflow/build/esm/src/beam.js", "../../node_modules/vexflow/build/esm/src/bend.js", "../../node_modules/vexflow/build/esm/src/web.js", "../../node_modules/vexflow/build/esm/src/canvascontext.js", "../../node_modules/vexflow/build/esm/src/chordsymbol.js", "../../node_modules/vexflow/build/esm/src/clef.js", "../../node_modules/vexflow/build/esm/src/clefnote.js", "../../node_modules/vexflow/build/esm/src/tickcontext.js", "../../node_modules/vexflow/build/esm/src/crescendo.js", "../../node_modules/vexflow/build/esm/src/curve.js", "../../node_modules/vexflow/build/esm/src/dot.js", "../../node_modules/vexflow/build/esm/src/frethandfinger.js", "../../node_modules/vexflow/build/esm/src/parser.js", "../../node_modules/vexflow/build/esm/src/easyscore.js", "../../node_modules/vexflow/build/esm/src/notehead.js", "../../node_modules/vexflow/build/esm/src/stemmablenote.js", "../../node_modules/vexflow/build/esm/src/stavenote.js", "../../node_modules/vexflow/build/esm/src/stavetie.js", "../../node_modules/vexflow/build/esm/src/tabtie.js", "../../node_modules/vexflow/build/esm/src/voice.js", "../../node_modules/vexflow/build/esm/src/gracenotegroup.js", "../../node_modules/vexflow/build/esm/src/notesubgroup.js", "../../node_modules/vexflow/build/esm/src/ornament.js", "../../node_modules/vexflow/build/esm/src/parenthesis.js", "../../node_modules/vexflow/build/esm/src/svgcontext.js", "../../node_modules/vexflow/build/esm/src/renderer.js", "../../node_modules/vexflow/build/esm/src/stringnumber.js", "../../node_modules/vexflow/build/esm/src/strokes.js", "../../node_modules/vexflow/build/esm/src/vibrato.js", "../../node_modules/vexflow/build/esm/src/modifiercontext.js", "../../node_modules/vexflow/build/esm/src/keysignature.js", "../../node_modules/vexflow/build/esm/src/staverepetition.js", "../../node_modules/vexflow/build/esm/src/stavesection.js", "../../node_modules/vexflow/build/esm/src/stavetempo.js", "../../node_modules/vexflow/build/esm/src/textnote.js", "../../node_modules/vexflow/build/esm/src/stavetext.js", "../../node_modules/vexflow/build/esm/src/stavevolta.js", "../../node_modules/vexflow/build/esm/src/timesigglyph.js", "../../node_modules/vexflow/build/esm/src/timesignature.js", "../../node_modules/vexflow/build/esm/src/stave.js", "../../node_modules/vexflow/build/esm/src/staveconnector.js", "../../node_modules/vexflow/build/esm/src/formatter.js", "../../node_modules/vexflow/build/esm/src/ghostnote.js", "../../node_modules/vexflow/build/esm/src/glyphnote.js", "../../node_modules/vexflow/build/esm/src/gracenote.js", "../../node_modules/vexflow/build/esm/src/keysignote.js", "../../node_modules/vexflow/build/esm/src/multimeasurerest.js", "../../node_modules/vexflow/build/esm/src/pedalmarking.js", "../../node_modules/vexflow/build/esm/src/repeatnote.js", "../../node_modules/vexflow/build/esm/src/staveline.js", "../../node_modules/vexflow/build/esm/src/system.js", "../../node_modules/vexflow/build/esm/src/tabnote.js", "../../node_modules/vexflow/build/esm/src/tabstave.js", "../../node_modules/vexflow/build/esm/src/textbracket.js", "../../node_modules/vexflow/build/esm/src/textdynamics.js", "../../node_modules/vexflow/build/esm/src/timesignote.js", "../../node_modules/vexflow/build/esm/src/tuplet.js", "../../node_modules/vexflow/build/esm/src/vibratobracket.js", "../../node_modules/vexflow/build/esm/src/factory.js", "../../node_modules/vexflow/build/esm/src/gracetabnote.js", "../../node_modules/vexflow/build/esm/src/keymanager.js", "../../node_modules/vexflow/build/esm/src/stavehairpin.js", "../../node_modules/vexflow/build/esm/src/tabslide.js", "../../node_modules/vexflow/build/esm/src/tremolo.js", "../../node_modules/vexflow/build/esm/src/tuning.js", "../../node_modules/vexflow/build/esm/src/version.js", "../../node_modules/vexflow/build/esm/src/flow.js", "../../node_modules/vexflow/build/esm/src/fonts/bravura_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/bravura_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/load_bravura.js", "../../node_modules/vexflow/build/esm/src/fonts/custom_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/custom_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/load_custom.js", "../../node_modules/vexflow/build/esm/src/fonts/gonville_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/gonville_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/load_gonville.js", "../../node_modules/vexflow/build/esm/src/fonts/leland_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/leland_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/load_leland.js", "../../node_modules/vexflow/build/esm/src/fonts/petaluma_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/petaluma_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/load_petaluma.js", "../../node_modules/vexflow/build/esm/src/fonts/load_all.js", "../../node_modules/vexflow/build/esm/src/fonts/petalumascript_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/robotoslab_glyphs.js", "../../node_modules/vexflow/build/esm/src/fonts/sans_bold_text_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/sans_text_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/serif_text_metrics.js", "../../node_modules/vexflow/build/esm/src/fonts/textfonts.js", "../../node_modules/vexflow/build/esm/src/vex.js", "../../node_modules/vexflow/build/esm/entry/vexflow.js", "../../src/svelte/music_sheet.svelte", "../../src/svelte/index.js"],
  "sourcesContent": ["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro \u2014 we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro \u2014 needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback, value) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        if (value === undefined) {\n            callback(component.$$.ctx[index]);\n        }\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.55.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n", "var context = new AudioContext()\n\nexport function note(str, length=5) {\n  console.log('note', str)\n  let o = context.createOscillator()\n  let g = context.createGain()\n  o.connect(g)\n  g.connect(context.destination)\n  o.frequency.value = freqForNote(str)\n  o.start(0)\n  //o.type = 'sine' // square, triangle, sawtooth\n  g.gain.exponentialRampToValueAtTime(\n    0.00001, context.currentTime + length\n  )\n}\n\nexport function freqForNote(str) {\n  console.log('freqForNote', str)\n  // A: 440Hz\n  let A0 = 440 / 16\n  str = str.toUpperCase()\n  let letter = str[0]\n  let map = {A: 0, B: 2, C: 3, D: 5, E: 7, F: 8, G: 10}\n  let mod = str[1] == 'B' ? -1 : (str[1] == '#' ? 1 : 0)\n  let nb = str.at(-1)\n  // Each note is 2^(1/12) higher than the previous one in equal temperament music\n  let base = Math.pow(2,1/12)\n  let exp = nb*12 + map[letter] + mod\n  let freq = A0 * Math.pow(base, exp)\n  return freq\n}\n", "<h1>Metronome</h1>\n\n<button type=\"button\" on:click=\"{() => {if (!interval) {interval = setInterval(() => note('A4', 0.5), delayMs)}}}\">Start</button>\n<button type=\"button\" on:click=\"{() => {clearInterval(interval); interval = null}}\">Stop</button>\n\n<script>\n\nexport let interval = null;\nexport let delayMs = 1000;\n\nimport {note} from '../music'\n\n</script>\n", "<h1>Guitar</h1>\n<button type=\"button\" on:click=\"{() => note('E2')}\">E</button>\n<button type=\"button\" on:click=\"{() => note('A3')}\">A</button>\n<button type=\"button\" on:click=\"{() => note('D3')}\">D</button>\n<button type=\"button\" on:click=\"{() => note('G3')}\">G</button>\n<button type=\"button\" on:click=\"{() => note('B4')}\">B</button>\n<button type=\"button\" on:click=\"{() => note('E4')}\">E</button>\n\n<script>\n\nimport {note} from '../music'\n\n</script>\n", "<h1>Record rythm</h1>\n\n<textarea value={rythm} on:keypress={tap} on:keyup={release} rows=\"15\" cols=\"80\"></textarea>\n<br/>\n<button type='button' on:click=\"{startRecordRythm}\">Start</button>\n<button type='button' on:click=\"{stopRecordRythm}\">Stop</button>\n\n<script>\nlet rythm = ''\nlet recordInterval;\nlet delayMs = 500\nlet first;\nlet taps = []\nlet releases = []\n\nfunction tap(e) {\n  e.preventDefault()\n  if (first && taps.length - releases.length < 1) {\n    let now = Date.now()\n    taps.push(now-first)\n  }\n}\n\n/**\n * Calculate the interval between every tap.\n */\nfunction calcIntervals() {\n  let intervals = []\n  for (let i = 1; i < taps.length; i++) {\n    intervals.push(taps[i]-taps[i-1])\n  }\n  return intervals\n}\n\nfunction mean(ary) {\n  if (ary.length == 0) {return 0}\n  let sum = 0;\n  for (let i = 0; i < ary.length; i++) {\n    sum += ary[i]\n  }\n  return sum/ary.length\n}\n\nfunction guessMinimalInterval(intervals, initialGuess) {\n  let guesses = []\n  for (let i = 0; i < intervals.length; i++) {\n    let r = intervals[i]/initialGuess\n    let mul = Math.round(r)\n    guesses.push(intervals[i]/mul)\n  }\n  return mean(guesses)\n}\n\nfunction analyze() {\n  if (taps.length >= 2) {\n    let intervals = calcIntervals()\n    let guess = Math.min(...intervals)\n    for (let i = 0; i < 10; i++) {\n      guess = guessMinimalInterval(intervals, guess)\n    }\n    let minInterval = guess\n    let nbNotes = Math.round(taps.at(-1) / minInterval)\n    let rythmBool = [...Array(nbNotes)].fill(0)\n    for (let i = 0; i < taps.length; i++) {\n      let j = Math.round(taps[i]/minInterval)\n      rythmBool[j] = 1\n    }\n    rythm = rythmBool.map(r => r ? 'x' : '-').join('')\n  }\n}\n\nfunction release() {\n  if (!first) {\n    console.log('Started recording')\n    first = Date.now()\n  } else {\n    let now = Date.now()\n    releases.push(now-first)\n    analyze()\n  }\n}\n\nfunction startRecordRythm() {\n  if (!recordInterval) {\n    recordInterval = setInterval(() => {\n    }, delayMs)\n  }\n}\nfunction stopRecordRythm() {\n  if (recordInterval) {clearInterval(recordInterval)}\n}\n</script>\n", "export class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\nexport function midLine(a, b) {\n    let mid_line = b + (a - b) / 2;\n    if (mid_line % 2 > 0) {\n        mid_line = roundN(mid_line * 10, 5) / 10;\n    }\n    return mid_line;\n}\nexport function prefix(text) {\n    return `vf-${text}`;\n}\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n", "import { RuntimeError } from './util.js';\nexport class Fraction {\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    static get CATEGORY() {\n        return \"Fraction\";\n    }\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    value() {\n        return this.numerator / this.denominator;\n    }\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    equals(compare) {\n        const a = Fraction.__staticFractionA.copy(compare).simplify();\n        const b = Fraction.__staticFractionB.copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    greaterThan(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    greaterThanEquals(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other, 1);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    toSimplifiedString() {\n        return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n    }\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = Fraction.__staticFractionTmp.copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\nFraction.__staticFractionA = new Fraction();\nFraction.__staticFractionB = new Fraction();\nFraction.__staticFractionTmp = new Fraction();\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        return [n, d];\n    }\n    else {\n        return [n.numerator, n.denominator];\n    }\n}\n", "export class BoundingBox {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    getX() {\n        return this.x;\n    }\n    getY() {\n        return this.y;\n    }\n    getW() {\n        return this.w;\n    }\n    getH() {\n        return this.h;\n    }\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const new_x = this.x < that.x ? this.x : that.x;\n        const new_y = this.y < that.y ? this.y : that.y;\n        const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n        const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n        this.x = new_x;\n        this.y = new_y;\n        this.w = new_w;\n        this.h = new_h;\n        return this;\n    }\n}\n", "export class BoundingBoxComputation {\n    constructor() {\n        this.x1 = Number.NaN;\n        this.y1 = Number.NaN;\n        this.x2 = Number.NaN;\n        this.y2 = Number.NaN;\n    }\n    getX1() {\n        return this.x1;\n    }\n    getY1() {\n        return this.y1;\n    }\n    width() {\n        return this.x2 - this.x1;\n    }\n    height() {\n        return this.y2 - this.y1;\n    }\n    addPoint(x, y) {\n        if (isNaN(this.x1) || x < this.x1)\n            this.x1 = x;\n        if (isNaN(this.x2) || x > this.x2)\n            this.x2 = x;\n        if (isNaN(this.y1) || y < this.y1)\n            this.y1 = y;\n        if (isNaN(this.y2) || y > this.y2)\n            this.y2 = y;\n    }\n    addX(x) {\n        this.addPoint(x, this.y1);\n    }\n    addY(y) {\n        this.addPoint(this.x1, y);\n    }\n    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n        this.addPoint(p0x, p0y);\n        this.addPoint(p2x, p2y);\n        const p01x = p1x - p0x;\n        const p12x = p2x - p1x;\n        let denom = p01x - p12x;\n        if (denom != 0) {\n            const t = p01x / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n            }\n        }\n        const p01y = p1y - p0y;\n        const p12y = p2y - p1y;\n        denom = p01y - p12y;\n        if (denom != 0) {\n            const t = p01y / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n            }\n        }\n    }\n    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n        const p0 = [p0x, p0y];\n        const p1 = [p1x, p1y];\n        const p2 = [p2x, p2y];\n        const p3 = [p3x, p3y];\n        let i;\n        this.addPoint(p0[0], p0[1]);\n        this.addPoint(p3[0], p3[1]);\n        const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\n            3 * Math.pow(1 - t, 2) * t * p1[i] +\n            3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n            Math.pow(t, 3) * p3[i];\n        for (i = 0; i <= 1; i++) {\n            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            const c = 3 * p1[i] - 3 * p0[i];\n            if (a === 0) {\n                if (b === 0)\n                    continue;\n                const t = -c / b;\n                if (0 < t && t < 1) {\n                    if (i === 0)\n                        this.addX(f(t, i));\n                    if (i === 1)\n                        this.addY(f(t, i));\n                }\n                continue;\n            }\n            const b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0)\n                continue;\n            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                if (i === 0)\n                    this.addX(f(t1, i));\n                if (i === 1)\n                    this.addY(f(t1, i));\n            }\n            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                if (i === 0)\n                    this.addX(f(t2, i));\n                if (i === 1)\n                    this.addY(f(t2, i));\n            }\n        }\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defined } from './util.js';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\nlet fontParser;\nconst Fonts = {};\nexport class Font {\n    constructor(fontName) {\n        this.name = fontName;\n    }\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    static validate(f, size, weight, style) {\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        return { family, size, weight, style };\n    }\n    static fromCSSString(cssFontShorthand) {\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = '';\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = '';\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Font.SIZE + 'pt ';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n        return `${style}${weight}${size}${family}`;\n    }\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, '');\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    static loadWebFont(fontName, woffURL, includeWoff2 = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\n            const woff1URL = `url(${woffURL}) format('woff')`;\n            const woffURLs = woff2URL + woff1URL;\n            const fontFace = new FontFace(fontName, woffURLs);\n            yield fontFace.load();\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    static loadWebFonts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const host = Font.WEB_FONT_HOST;\n            const files = Font.WEB_FONT_FILES;\n            for (const fontName in files) {\n                const fontPath = files[fontName];\n                Font.loadWebFont(fontName, host + fontPath);\n            }\n        });\n    }\n    static load(fontName, data, metrics) {\n        let font = Fonts[fontName];\n        if (!font) {\n            font = new Font(fontName);\n            Fonts[fontName] = font;\n        }\n        if (data) {\n            font.setData(data);\n        }\n        if (metrics) {\n            font.setMetrics(metrics);\n        }\n        return font;\n    }\n    getName() {\n        return this.name;\n    }\n    getData() {\n        return defined(this.data, 'FontError', 'Missing font data');\n    }\n    getMetrics() {\n        return defined(this.metrics, 'FontError', 'Missing metrics');\n    }\n    setData(data) {\n        this.data = data;\n    }\n    setMetrics(metrics) {\n        this.metrics = metrics;\n    }\n    hasData() {\n        return this.data !== undefined;\n    }\n    getResolution() {\n        return this.getData().resolution;\n    }\n    getGlyphs() {\n        return this.getData().glyphs;\n    }\n    lookupMetric(key, defaultValue) {\n        const keyParts = key.split('.');\n        let currObj = this.getMetrics();\n        for (let i = 0; i < keyParts.length; i++) {\n            const keyPart = keyParts[i];\n            const value = currObj[keyPart];\n            if (value === undefined) {\n                return defaultValue;\n            }\n            currObj = value;\n        }\n        return currObj;\n    }\n    toString() {\n        return '[' + this.name + ' Font]';\n    }\n}\nFont.SANS_SERIF = 'Arial, sans-serif';\nFont.SERIF = 'Times New Roman, serif';\nFont.SIZE = 10;\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\nFont.WEB_FONT_FILES = {\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\n    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',\n};\n", "import { RuntimeError } from './util.js';\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    constructor() {\n        this.index = new Index();\n    }\n    static getDefaultRegistry() {\n        return Registry.defaultRegistry;\n    }\n    static enableDefaultRegistry(registry) {\n        Registry.defaultRegistry = registry;\n    }\n    static disableDefaultRegistry() {\n        Registry.defaultRegistry = undefined;\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _a, _b;\n        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id];\n    }\n    getElementsByAttribute(attribute, value) {\n        const index_attr = this.index[attribute];\n        if (index_attr) {\n            const index_attr_val = index_attr[value];\n            if (index_attr_val) {\n                const keys = Object.keys(index_attr_val);\n                return keys.map((k) => index_attr_val[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Registry } from './registry.js';\nimport { defined, prefix } from './util.js';\nexport class Element {\n    constructor() {\n        var _a;\n        this.children = [];\n        this.attrs = {\n            id: Element.newID(),\n            type: this.getCategory(),\n            class: '',\n        };\n        this.rendered = false;\n        (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);\n    }\n    static get CATEGORY() {\n        return \"Element\";\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return this.constructor.CATEGORY;\n    }\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    getStyle() {\n        return this.style;\n    }\n    applyStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    restoreStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    hasClass(className) {\n        var _a;\n        if (!this.attrs.class)\n            return false;\n        return ((_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ').indexOf(className)) != -1;\n    }\n    addClass(className) {\n        var _a;\n        if (this.hasClass(className))\n            return this;\n        if (!this.attrs.class)\n            this.attrs.class = `${className}`;\n        else\n            this.attrs.class = `${this.attrs.class} ${className}`;\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    removeClass(className) {\n        var _a, _b;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            this.attrs.class = arr.join(' ');\n        }\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    isRendered() {\n        return this.rendered;\n    }\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    getAttributes() {\n        return this.attrs;\n    }\n    getAttribute(name) {\n        return this.attrs[name];\n    }\n    getSVGElement(suffix = '') {\n        const id = prefix(this.attrs.id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    setAttribute(name, value) {\n        var _a;\n        const oldID = this.attrs.id;\n        const oldValue = this.attrs[name];\n        this.attrs[name] = value;\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    checkContext() {\n        return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return Font.toCSSString(this.textFont);\n    }\n    setFont(font, size, weight, style) {\n        const defaultTextFont = this.constructor.TEXT_FONT;\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const fontIsUndefined = font === undefined;\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        if (fontIsObject) {\n            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            this.textFont = Font.fromCSSString(font);\n        }\n        else if (fontIsUndefined && sizeWeightStyleAreUndefined) {\n            this.textFont = Object.assign({}, defaultTextFont);\n        }\n        else {\n            this.textFont = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\n        }\n        return this;\n    }\n    getFont() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        return Font.toCSSString(this.textFont);\n    }\n    resetFont() {\n        this.setFont();\n    }\n    get fontInfo() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        return Object.assign({}, this.textFont);\n    }\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    getFontSize() {\n        return this.fontSize;\n    }\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n}\nElement.ID = 1000;\nElement.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n", "import { Fraction } from './fraction.js';\nimport { Glyph } from './glyph.js';\nimport { RuntimeError } from './util.js';\nconst RESOLUTION = 16384;\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { acc: 'b', num: 1 },\n    Dm: { acc: 'b', num: 1 },\n    Bb: { acc: 'b', num: 2 },\n    Gm: { acc: 'b', num: 2 },\n    Eb: { acc: 'b', num: 3 },\n    Cm: { acc: 'b', num: 3 },\n    Ab: { acc: 'b', num: 4 },\n    Fm: { acc: 'b', num: 4 },\n    Db: { acc: 'b', num: 5 },\n    Bbm: { acc: 'b', num: 5 },\n    Gb: { acc: 'b', num: 6 },\n    Ebm: { acc: 'b', num: 6 },\n    Cb: { acc: 'b', num: 7 },\n    Abm: { acc: 'b', num: 7 },\n    G: { acc: '#', num: 1 },\n    Em: { acc: '#', num: 1 },\n    D: { acc: '#', num: 2 },\n    Bm: { acc: '#', num: 2 },\n    A: { acc: '#', num: 3 },\n    'F#m': { acc: '#', num: 3 },\n    E: { acc: '#', num: 4 },\n    'C#m': { acc: '#', num: 4 },\n    B: { acc: '#', num: 5 },\n    'G#m': { acc: '#', num: 5 },\n    'F#': { acc: '#', num: 6 },\n    'D#m': { acc: '#', num: 6 },\n    'C#': { acc: '#', num: 7 },\n    'A#m': { acc: '#', num: 7 },\n};\nconst clefs = {\n    treble: { line_shift: 0 },\n    bass: { line_shift: 6 },\n    tenor: { line_shift: 4 },\n    alto: { line_shift: 3 },\n    soprano: { line_shift: 1 },\n    percussion: { line_shift: 0 },\n    'mezzo-soprano': { line_shift: 2 },\n    'baritone-c': { line_shift: 5 },\n    'baritone-f': { line_shift: 5 },\n    subbass: { line_shift: 7 },\n    french: { line_shift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, int_val: 0 },\n    CN: { index: 0, int_val: 0, accidental: 'n' },\n    'C#': { index: 0, int_val: 1, accidental: '#' },\n    'C##': { index: 0, int_val: 2, accidental: '##' },\n    CB: { index: 0, int_val: 11, accidental: 'b' },\n    CBB: { index: 0, int_val: 10, accidental: 'bb' },\n    D: { index: 1, int_val: 2 },\n    DN: { index: 1, int_val: 2, accidental: 'n' },\n    'D#': { index: 1, int_val: 3, accidental: '#' },\n    'D##': { index: 1, int_val: 4, accidental: '##' },\n    DB: { index: 1, int_val: 1, accidental: 'b' },\n    DBB: { index: 1, int_val: 0, accidental: 'bb' },\n    E: { index: 2, int_val: 4 },\n    EN: { index: 2, int_val: 4, accidental: 'n' },\n    'E#': { index: 2, int_val: 5, accidental: '#' },\n    'E##': { index: 2, int_val: 6, accidental: '##' },\n    EB: { index: 2, int_val: 3, accidental: 'b' },\n    EBB: { index: 2, int_val: 2, accidental: 'bb' },\n    F: { index: 3, int_val: 5 },\n    FN: { index: 3, int_val: 5, accidental: 'n' },\n    'F#': { index: 3, int_val: 6, accidental: '#' },\n    'F##': { index: 3, int_val: 7, accidental: '##' },\n    FB: { index: 3, int_val: 4, accidental: 'b' },\n    FBB: { index: 3, int_val: 3, accidental: 'bb' },\n    G: { index: 4, int_val: 7 },\n    GN: { index: 4, int_val: 7, accidental: 'n' },\n    'G#': { index: 4, int_val: 8, accidental: '#' },\n    'G##': { index: 4, int_val: 9, accidental: '##' },\n    GB: { index: 4, int_val: 6, accidental: 'b' },\n    GBB: { index: 4, int_val: 5, accidental: 'bb' },\n    A: { index: 5, int_val: 9 },\n    AN: { index: 5, int_val: 9, accidental: 'n' },\n    'A#': { index: 5, int_val: 10, accidental: '#' },\n    'A##': { index: 5, int_val: 11, accidental: '##' },\n    AB: { index: 5, int_val: 8, accidental: 'b' },\n    ABB: { index: 5, int_val: 7, accidental: 'bb' },\n    B: { index: 6, int_val: 11 },\n    BN: { index: 6, int_val: 11, accidental: 'n' },\n    'B#': { index: 6, int_val: 12, accidental: '#' },\n    'B##': { index: 6, int_val: 13, accidental: '##' },\n    BB: { index: 6, int_val: 10, accidental: 'b' },\n    BBB: { index: 6, int_val: 9, accidental: 'bb' },\n    R: { index: 6, rest: true },\n    X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n    },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n    '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n    bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n    n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n    '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n    '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n    db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n    d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n    '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n    '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n    '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n    bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n    bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n    o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n    k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n    bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n    '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n    ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n    afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n    accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n    accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlatAndFlat: {\n        code: 'accidentalNarrowReversedFlatAndFlat',\n        parenRightPaddingAdjustment: -1,\n    },\n    accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n    accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        second_on_bottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spaced_out_pentachord: [1, 2, 3, 2, 1],\n        very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: 'augmentationDot', between_lines: true },\n    av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n    },\n    'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n    },\n    'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n    },\n    'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n    },\n    'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false },\n    ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n    },\n    ah: { code: 'stringsHarmonic', between_lines: false },\n    'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false },\n    'a@a': { code: 'fermataAbove', between_lines: false },\n    'a@u': { code: 'fermataBelow', between_lines: false },\n    'a@s': { aboveCode: 'fermataShortAbove', belowCode: 'fermataShortBelow', between_lines: false },\n    'a@as': { code: 'fermataShortAbove', between_lines: false },\n    'a@us': { code: 'fermataShortBelow', between_lines: false },\n    'a@l': { aboveCode: 'fermataLongAbove', belowCode: 'fermataLongBelow', between_lines: false },\n    'a@al': { code: 'fermataLongAbove', between_lines: false },\n    'a@ul': { code: 'fermataLongBelow', between_lines: false },\n    'a@vl': { aboveCode: 'fermataVeryLongAbove', belowCode: 'fermataVeryLongBelow', between_lines: false },\n    'a@avl': { code: 'fermataVeryLongAbove', between_lines: false },\n    'a@uvl': { code: 'fermataVeryLongBelow', between_lines: false },\n    'a|': { code: 'stringsUpBow', between_lines: false },\n    am: { code: 'stringsDownBow', between_lines: false },\n    'a,': { code: 'pictChokeCymbal', between_lines: false },\n};\nconst ornaments = {\n    mordent: { code: 'ornamentShortTrill' },\n    mordent_inverted: { code: 'ornamentMordent' },\n    turn: { code: 'ornamentTurn' },\n    turn_inverted: { code: 'ornamentTurnSlash' },\n    tr: { code: 'ornamentTrill' },\n    upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n    downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n    prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n    pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n    upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n    downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n    lineprall: { code: 'ornamentPrecompAppoggTrill' },\n    prallprall: { code: 'ornamentTremblement' },\n    scoop: { code: 'brassScoop' },\n    doit: { code: 'brassDoitMedium' },\n    fall: { code: 'brassFallLipShort' },\n    doitLong: { code: 'brassLiftMedium' },\n    fallLong: { code: 'brassFallRoughMedium' },\n    bend: { code: 'brassBend' },\n    plungerClosed: { code: 'brassMuteClosed' },\n    plungerOpen: { code: 'brassMuteOpen' },\n    flip: { code: 'brassFlip' },\n    jazzTurn: { code: 'brassJazzTurn' },\n    smear: { code: 'brassSmear' },\n};\nexport class Tables {\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    static keyProperties(keyOctaveGlyph, clef = 'treble', params) {\n        let options = { octave_shift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        if (value.octave)\n            pieces[1] = value.octave.toString();\n        let octave = parseInt(pieces[1], 10);\n        octave += -1 * options.octave_shift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).line_shift;\n        let stroke = 0;\n        if (line <= 0 && (line * 2) % 2 === 0)\n            stroke = 1;\n        if (line >= 6 && (line * 2) % 2 === 0)\n            stroke = -1;\n        const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n        const code = value.code;\n        const shift_right = value.shift_right;\n        let customNoteHeadProps = {};\n        if (pieces.length > 2 && pieces[2]) {\n            const glyphName = pieces[2].toUpperCase();\n            customNoteHeadProps = { code: this.codeNoteHead(glyphName, duration) } || {};\n        }\n        return Object.assign({ key,\n            octave,\n            line,\n            int_value, accidental: value.accidental, code,\n            stroke,\n            shift_right, displaced: false }, customNoteHeadProps);\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    static tabToGlyphProps(fret, scale = 1.0) {\n        let glyph = undefined;\n        let width = 0;\n        let shift_y = 0;\n        if (fret.toUpperCase() === 'X') {\n            const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.TABLATURE_FONT_SCALE).getMetrics();\n            glyph = 'accidentalDoubleSharp';\n            if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n                throw new RuntimeError('InvalidMetrics', 'Width and height required');\n            width = glyphMetrics.width;\n            shift_y = -glyphMetrics.height / 2;\n        }\n        else {\n            width = Tables.textWidth(fret);\n        }\n        return {\n            text: fret,\n            code: glyph,\n            getWidth: () => width * scale,\n            shift_y,\n        };\n    }\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(acc) {\n        return accidentals[acc];\n    }\n    static ornamentCodes(acc) {\n        return ornaments[acc];\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.acc) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.acc];\n        const acc_list = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            acc_list.push({ type: keySpec.acc, line });\n        }\n        return acc_list;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        let code = '';\n        switch (type) {\n            case 'D0':\n                code = 'noteheadDiamondWhole';\n                break;\n            case 'D1':\n                code = 'noteheadDiamondHalf';\n                break;\n            case 'D2':\n                code = 'noteheadDiamondBlack';\n                break;\n            case 'D3':\n                code = 'noteheadDiamondBlack';\n                break;\n            case 'T0':\n                code = 'noteheadTriangleUpWhole';\n                break;\n            case 'T1':\n                code = 'noteheadTriangleUpHalf';\n                break;\n            case 'T2':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            case 'T3':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            case 'X0':\n                code = 'noteheadXWhole';\n                break;\n            case 'X1':\n                code = 'noteheadXHalf';\n                break;\n            case 'X2':\n                code = 'noteheadXBlack';\n                break;\n            case 'X3':\n                code = 'noteheadCircleX';\n                break;\n            case 'S1':\n                code = 'noteheadSquareWhite';\n                break;\n            case 'S2':\n                code = 'noteheadSquareBlack';\n                break;\n            case 'R1':\n                code = 'vexNoteHeadRectWhite';\n                break;\n            case 'R2':\n                code = 'vexNoteHeadRectBlack';\n                break;\n            case 'DO':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            case 'RE':\n                code = 'noteheadMoonBlack';\n                break;\n            case 'MI':\n                code = 'noteheadDiamondBlack';\n                break;\n            case 'FA':\n                code = 'noteheadTriangleLeftBlack';\n                break;\n            case 'FAUP':\n                code = 'noteheadTriangleRightBlack';\n                break;\n            case 'SO':\n                code = 'noteheadBlack';\n                break;\n            case 'LA':\n                code = 'noteheadSquareBlack';\n                break;\n            case 'TI':\n                code = 'noteheadTriangleRoundDownBlack';\n                break;\n            case 'D':\n            case 'H':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDiamondDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadDiamondWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadDiamondHalf';\n                        break;\n                    default:\n                        code = 'noteheadDiamondBlack';\n                        break;\n                }\n                break;\n            case 'N':\n            case 'G':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadHalf';\n                        break;\n                    default:\n                        code = 'noteheadBlack';\n                        break;\n                }\n                break;\n            case 'M':\n            case 'X':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadXDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadXWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadXHalf';\n                        break;\n                    default:\n                        code = 'noteheadXBlack';\n                        break;\n                }\n                break;\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadCircleXDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadCircleXWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadCircleXHalf';\n                        break;\n                    default:\n                        code = 'noteheadCircleX';\n                        break;\n                }\n                break;\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadCircledDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadCircledWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadCircledHalf';\n                        break;\n                    default:\n                        code = 'noteheadCircledBlack';\n                        break;\n                }\n                break;\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDoubleWholeSquare';\n                        break;\n                    case '1':\n                        code = 'noteheadSquareWhite';\n                        break;\n                    case '2':\n                        code = 'noteheadSquareWhite';\n                        break;\n                    default:\n                        code = 'noteheadSquareBlack';\n                        break;\n                }\n                break;\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadTriangleUpDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadTriangleUpWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadTriangleUpHalf';\n                        break;\n                    default:\n                        code = 'noteheadTriangleUpBlack';\n                        break;\n                }\n                break;\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadTriangleDownDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadTriangleDownWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadTriangleDownHalf';\n                        break;\n                    default:\n                        code = 'noteheadTriangleDownBlack';\n                        break;\n                }\n                break;\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadSlashedDoubleWhole1';\n                        break;\n                    case '1':\n                        code = 'noteheadSlashedWhole1';\n                        break;\n                    case '2':\n                        code = 'noteheadSlashedHalf1';\n                        break;\n                    default:\n                        code = 'noteheadSlashedBlack1';\n                }\n                break;\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadSlashedDoubleWhole2';\n                        break;\n                    case '1':\n                        code = 'noteheadSlashedWhole2';\n                        break;\n                    case '2':\n                        code = 'noteheadSlashedHalf2';\n                        break;\n                    default:\n                        code = 'noteheadSlashedBlack2';\n                }\n                break;\n        }\n        return code;\n    }\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        let code = durationCodes[duration];\n        if (code === undefined) {\n            code = durationCodes['4'];\n        }\n        let glyphTypeProperties = code[type];\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        if (codeNoteHead != '')\n            glyphTypeProperties = Object.assign(Object.assign({}, glyphTypeProperties), { code_head: codeNoteHead, code: codeNoteHead });\n        const code_head = glyphTypeProperties.code_head;\n        const getWidth = (scale = Tables.NOTATION_FONT_SCALE) => Glyph.getWidth(code_head, scale);\n        return Object.assign(Object.assign(Object.assign({}, code.common), { getWidth: getWidth }), glyphTypeProperties);\n    }\n}\nTables.SOFTMAX_FACTOR = 100;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalMap = accidentals;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    sharp: String.fromCharCode(0x266f),\n    flat: String.fromCharCode(0x266d),\n    natural: String.fromCharCode(0x266e),\n    triangle: String.fromCharCode(0x25b3),\n    'o-with-slash': String.fromCharCode(0x00f8),\n    degrees: String.fromCharCode(0x00b0),\n    circle: String.fromCharCode(0x25cb),\n};\nTables.validTypes = validNoteTypes;\nTables.TIME4_4 = {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n};\nconst durationCodes = {\n    '1/2': {\n        common: {\n            code_head: '',\n            stem: false,\n            flag: false,\n            stem_up_extension: -Tables.STEM_HEIGHT,\n            stem_down_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    1: {\n        common: {\n            code_head: '',\n            stem: false,\n            flag: false,\n            stem_up_extension: -Tables.STEM_HEIGHT,\n            stem_down_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'restWhole',\n            ledger_code_head: 'restWholeLegerLine',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    2: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: false,\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'restHalf',\n            ledger_code_head: 'restHalfLegerLine',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    4: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: false,\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    8: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: true,\n            beam_count: 1,\n            stem_beam_extension: 0,\n            code_flag_upstem: 'flag8thUp',\n            code_flag_downstem: 'flag8thDown',\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    16: {\n        common: {\n            code_head: '',\n            beam_count: 2,\n            stem_beam_extension: 0,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag16thUp',\n            code_flag_downstem: 'flag16thDown',\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    32: {\n        common: {\n            code_head: '',\n            beam_count: 3,\n            stem_beam_extension: 7.5,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag32ndUp',\n            code_flag_downstem: 'flag32ndDown',\n            stem_up_extension: 9,\n            stem_down_extension: 9,\n            tabnote_stem_up_extension: 9,\n            tabnote_stem_down_extension: 9,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    64: {\n        common: {\n            code_head: '',\n            beam_count: 4,\n            stem_beam_extension: 15,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag64thUp',\n            code_flag_downstem: 'flag64thDown',\n            stem_up_extension: 13,\n            stem_down_extension: 13,\n            tabnote_stem_up_extension: 13,\n            tabnote_stem_down_extension: 13,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    128: {\n        common: {\n            code_head: '',\n            beam_count: 5,\n            stem_beam_extension: 22.5,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag128thUp',\n            code_flag_downstem: 'flag128thDown',\n            stem_up_extension: 22,\n            stem_down_extension: 22,\n            tabnote_stem_up_extension: 22,\n            tabnote_stem_down_extension: 22,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n        },\n        s: {\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n};\n", "import { BoundingBox } from './boundingbox.js';\nimport { BoundingBoxComputation } from './boundingboxcomputation.js';\nimport { Element } from './element.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nclass GlyphCacheEntry {\n    constructor(fontStack, code, category) {\n        this.point = -1;\n        this.metrics = Glyph.loadMetrics(fontStack, code, category);\n        this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.metrics.scale, this.metrics.x_shift, this.metrics.y_shift);\n        if (category) {\n            this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n        }\n    }\n}\nclass GlyphCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    lookup(code, category) {\n        let entries = this.cache.get(Glyph.CURRENT_CACHE_KEY);\n        if (entries === undefined) {\n            entries = {};\n            this.cache.set(Glyph.CURRENT_CACHE_KEY, entries);\n        }\n        const key = category ? `${code}%${category}` : code;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = new GlyphCacheEntry(Glyph.MUSIC_FONT_STACK, code, category);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n}\nclass GlyphOutline {\n    constructor(outline, originX, originY, scale) {\n        this.outline = outline;\n        this.originX = originX;\n        this.originY = originY;\n        this.scale = scale;\n        this.i = 0;\n        this.precision = 1;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n    }\n    done() {\n        return this.i >= this.outline.length;\n    }\n    next() {\n        return Math.round((this.outline[this.i++] * this.precision) / this.precision);\n    }\n    nextX() {\n        return Math.round((this.originX + this.outline[this.i++] * this.scale) * this.precision) / this.precision;\n    }\n    nextY() {\n        return Math.round((this.originY - this.outline[this.i++] * this.scale) * this.precision) / this.precision;\n    }\n    static parse(str) {\n        const result = [];\n        const parts = str.split(' ');\n        let i = 0;\n        while (i < parts.length) {\n            switch (parts[i++]) {\n                case 'm':\n                    result.push(0, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'l':\n                    result.push(1, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'q':\n                    result.push(2, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'b':\n                    result.push(3, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n            }\n        }\n        return result;\n    }\n}\nexport class Glyph extends Element {\n    constructor(code, point, options) {\n        super();\n        this.bbox = new BoundingBox(0, 0, 0, 0);\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        this.options = {};\n        this.scale = 1;\n        this.code = code;\n        this.point = point;\n        this.originShift = { x: 0, y: 0 };\n        this.x_shift = 0;\n        this.y_shift = 0;\n        if (options) {\n            this.setOptions(options);\n        }\n        else {\n            this.reset();\n        }\n    }\n    static get CATEGORY() {\n        return \"Glyph\";\n    }\n    static lookupFontMetric(font, category, code, key, defaultValue) {\n        let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n        if (value === undefined) {\n            value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n        }\n        return value;\n    }\n    static lookupGlyph(fontStack, code) {\n        defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n        let glyph;\n        let font;\n        for (let i = 0; i < fontStack.length; i++) {\n            font = fontStack[i];\n            glyph = font.getGlyphs()[code];\n            if (glyph)\n                return { glyph, font };\n        }\n        throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n    }\n    static loadMetrics(fontStack, code, category) {\n        const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n        if (!glyph.o)\n            throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n        let x_shift = 0;\n        let y_shift = 0;\n        let scale = 1;\n        if (category && font) {\n            x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n            y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n            scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n        }\n        const x_min = glyph.x_min;\n        const x_max = glyph.x_max;\n        const ha = glyph.ha;\n        if (!glyph.cached_outline) {\n            glyph.cached_outline = GlyphOutline.parse(glyph.o);\n        }\n        return {\n            x_min,\n            x_max,\n            x_shift,\n            y_shift,\n            scale,\n            ha,\n            outline: glyph.cached_outline,\n            font,\n            width: x_max - x_min,\n            height: ha,\n        };\n    }\n    static renderGlyph(ctx, x_pos, y_pos, point, code, options) {\n        var _a;\n        const data = Glyph.cache.lookup(code, options === null || options === void 0 ? void 0 : options.category);\n        const metrics = data.metrics;\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const customScale = (_a = options === null || options === void 0 ? void 0 : options.scale) !== null && _a !== void 0 ? _a : 1;\n        const scale = ((point * 72.0) / (metrics.font.getResolution() * 100.0)) * metrics.scale * customScale;\n        Glyph.renderOutline(ctx, metrics.outline, scale, x_pos + metrics.x_shift * customScale, y_pos + metrics.y_shift * customScale);\n        return metrics;\n    }\n    static renderOutline(ctx, outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        ctx.beginPath();\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case 0:\n                    ctx.moveTo(go.nextX(), go.nextY());\n                    break;\n                case 1:\n                    ctx.lineTo(go.nextX(), go.nextY());\n                    break;\n                case 2:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n                    break;\n                case 3:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    break;\n            }\n        }\n        ctx.fill();\n    }\n    static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        const bboxComp = new BoundingBoxComputation();\n        let penX = x_pos;\n        let penY = y_pos;\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case 0:\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    break;\n                case 1:\n                    bboxComp.addPoint(penX, penY);\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    bboxComp.addPoint(penX, penY);\n                    break;\n                case 2:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n                case 3:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n            }\n        }\n        return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n    }\n    static getWidth(code, point, category) {\n        const data = Glyph.cache.lookup(code, category);\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n        return data.bbox.getW() * scale;\n    }\n    draw(...args) {\n    }\n    getCode() {\n        return this.code;\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.reset();\n    }\n    setPoint(point) {\n        this.point = point;\n        return this;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    setXShift(x_shift) {\n        this.x_shift = x_shift;\n        return this;\n    }\n    getYshift() {\n        return this.y_shift;\n    }\n    setYShift(y_shift) {\n        this.y_shift = y_shift;\n        return this;\n    }\n    reset() {\n        const data = Glyph.cache.lookup(this.code, this.options.category);\n        this.metrics = data.metrics;\n        if (data.point != -1) {\n            this.point = data.point;\n        }\n        this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n        this.bbox = new BoundingBox(data.bbox.getX() * this.scale, data.bbox.getY() * this.scale, data.bbox.getW() * this.scale, data.bbox.getH() * this.scale);\n    }\n    checkMetrics() {\n        return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n    getMetrics() {\n        const metrics = this.checkMetrics();\n        const metricsScale = metrics.scale;\n        return {\n            x_min: metrics.x_min * this.scale * metricsScale,\n            x_max: metrics.x_max * this.scale * metricsScale,\n            width: this.bbox.getW(),\n            height: this.bbox.getH(),\n            scale: this.scale * metricsScale,\n            x_shift: metrics.x_shift,\n            y_shift: metrics.y_shift,\n            outline: metrics.outline,\n            font: metrics.font,\n            ha: metrics.ha,\n        };\n    }\n    setOriginX(x) {\n        const { bbox } = this;\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.originShift.x = -xShift;\n    }\n    setOriginY(y) {\n        const { bbox } = this;\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.originShift.y = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n    render(ctx, x, y) {\n        const metrics = this.checkMetrics();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle(ctx);\n        const xPos = x + this.originShift.x + metrics.x_shift;\n        const yPos = y + this.originShift.y + metrics.y_shift;\n        Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n        this.restoreStyle(ctx);\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    renderToStave(x) {\n        const context = this.checkContext();\n        const metrics = this.checkMetrics();\n        const stave = this.checkStave();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle();\n        const xPos = x + this.x_shift + metrics.x_shift;\n        const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n        Glyph.renderOutline(context, outline, scale, xPos, yPos);\n        this.restoreStyle();\n    }\n}\nGlyph.cache = new GlyphCache();\nGlyph.CURRENT_CACHE_KEY = '';\nGlyph.MUSIC_FONT_STACK = [];\n", "import { Element } from './element.js';\nimport { defined, RuntimeError } from './util.js';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\nexport class Modifier extends Element {\n    constructor() {\n        super();\n        this.width = 0;\n        this.text_line = 0;\n        this.position = Modifier.Position.LEFT;\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.spacingFromNextModifier = 0;\n    }\n    static get CATEGORY() {\n        return \"Modifier\";\n    }\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    reset() {\n    }\n    getWidth() {\n        return this.width;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    getIndex() {\n        return this.index;\n    }\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n    }\n    setModifierContext(c) {\n        this.modifierContext = c;\n        return this;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    setTextLine(line) {\n        this.text_line = line;\n        return this;\n    }\n    setYShift(y) {\n        this.y_shift = y;\n        return this;\n    }\n    setSpacingFromNextModifier(x) {\n        this.spacingFromNextModifier = x;\n    }\n    getSpacingFromNextModifier() {\n        return this.spacingFromNextModifier;\n    }\n    setXShift(x) {\n        this.x_shift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.x_shift -= x;\n        }\n        else {\n            this.x_shift += x;\n        }\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    alignSubNotesWithNote(subNotes, note) {\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset);\n        });\n    }\n}\n", "import { RuntimeError } from './util.js';\nexport class Music {\n    static get NUM_TONES() {\n        return this.canonical_notes.length;\n    }\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    static get root_values() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    static get root_indices() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    static get canonical_notes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    static get diatonic_intervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    static get diatonic_accidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    static get noteValues() {\n        return {\n            c: { root_index: 0, int_val: 0 },\n            cn: { root_index: 0, int_val: 0 },\n            'c#': { root_index: 0, int_val: 1 },\n            'c##': { root_index: 0, int_val: 2 },\n            cb: { root_index: 0, int_val: 11 },\n            cbb: { root_index: 0, int_val: 10 },\n            d: { root_index: 1, int_val: 2 },\n            dn: { root_index: 1, int_val: 2 },\n            'd#': { root_index: 1, int_val: 3 },\n            'd##': { root_index: 1, int_val: 4 },\n            db: { root_index: 1, int_val: 1 },\n            dbb: { root_index: 1, int_val: 0 },\n            e: { root_index: 2, int_val: 4 },\n            en: { root_index: 2, int_val: 4 },\n            'e#': { root_index: 2, int_val: 5 },\n            'e##': { root_index: 2, int_val: 6 },\n            eb: { root_index: 2, int_val: 3 },\n            ebb: { root_index: 2, int_val: 2 },\n            f: { root_index: 3, int_val: 5 },\n            fn: { root_index: 3, int_val: 5 },\n            'f#': { root_index: 3, int_val: 6 },\n            'f##': { root_index: 3, int_val: 7 },\n            fb: { root_index: 3, int_val: 4 },\n            fbb: { root_index: 3, int_val: 3 },\n            g: { root_index: 4, int_val: 7 },\n            gn: { root_index: 4, int_val: 7 },\n            'g#': { root_index: 4, int_val: 8 },\n            'g##': { root_index: 4, int_val: 9 },\n            gb: { root_index: 4, int_val: 6 },\n            gbb: { root_index: 4, int_val: 5 },\n            a: { root_index: 5, int_val: 9 },\n            an: { root_index: 5, int_val: 9 },\n            'a#': { root_index: 5, int_val: 10 },\n            'a##': { root_index: 5, int_val: 11 },\n            ab: { root_index: 5, int_val: 8 },\n            abb: { root_index: 5, int_val: 7 },\n            b: { root_index: 6, int_val: 11 },\n            bn: { root_index: 6, int_val: 11 },\n            'b#': { root_index: 6, int_val: 0 },\n            'b##': { root_index: 6, int_val: 1 },\n            bb: { root_index: 6, int_val: 10 },\n            bbb: { root_index: 6, int_val: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonical_notes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonic_intervals.length;\n    }\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.int_val;\n    }\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonical_notes[noteValue];\n    }\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonic_intervals[intervalValue];\n    }\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverse_interval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverse_interval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.root_indices[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n", "export function isCategory(obj, category, checkAncestors = true) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    let constructorFcn = obj.constructor;\n    if (checkAncestors) {\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, \"Accidental\");\nexport const isAnnotation = (obj) => isCategory(obj, \"Annotation\");\nexport const isBarline = (obj) => isCategory(obj, \"Barline\");\nexport const isDot = (obj) => isCategory(obj, \"Dot\");\nexport const isGraceNote = (obj) => isCategory(obj, \"GraceNote\");\nexport const isGraceNoteGroup = (obj) => isCategory(obj, \"GraceNoteGroup\");\nexport const isNote = (obj) => isCategory(obj, \"Note\");\nexport const isRenderContext = (obj) => isCategory(obj, \"RenderContext\");\nexport const isStaveNote = (obj) => isCategory(obj, \"StaveNote\");\nexport const isStemmableNote = (obj) => isCategory(obj, \"StemmableNote\");\nexport const isTabNote = (obj) => isCategory(obj, \"TabNote\");\n", "import { Fraction } from './fraction.js';\nimport { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { Music } from './music.js';\nimport { Tables } from './tables.js';\nimport { isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard.js';\nimport { defined, log } from './util.js';\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\nexport class Accidental extends Modifier {\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            font_scale: 38,\n            parenLeftPadding: 2,\n            parenRightPadding: 2,\n        };\n        this.accidental = Tables.accidentalCodes(this.type);\n        defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n        this.cautionary = false;\n        this.reset();\n    }\n    static get CATEGORY() {\n        return \"Accidental\";\n    }\n    static format(accidentals, state) {\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const musicFont = Tables.currentMusicFont();\n        const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n        const leftShift = state.left_shift + noteheadAccidentalPadding;\n        const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n        const additionalPadding = musicFont.lookupMetric('accidental.leftPadding');\n        const accList = [];\n        let prevNote = undefined;\n        let shiftL = 0;\n        for (let i = 0; i < accidentals.length; ++i) {\n            const acc = accidentals[i];\n            const note = acc.getNote();\n            const stave = note.getStave();\n            const index = acc.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), shiftL);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n            }\n            else {\n                accList.push({ line: props.line, shift: shiftL, acc });\n            }\n        }\n        accList.sort((a, b) => b.line - a.line);\n        const lineList = [];\n        let accShift = 0;\n        let previousLine = undefined;\n        for (let i = 0; i < accList.length; i++) {\n            const acc = accList[i];\n            if (previousLine === undefined || previousLine !== acc.line) {\n                lineList.push({\n                    line: acc.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                });\n            }\n            if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n                lineList[lineList.length - 1].flatLine = false;\n            }\n            if (acc.acc.type !== '##') {\n                lineList[lineList.length - 1].dblSharpLine = false;\n            }\n            lineList[lineList.length - 1].numAcc++;\n            lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n            accShift = acc.shift > accShift ? acc.shift : accShift;\n            previousLine = acc.line;\n        }\n        let totalColumns = 0;\n        for (let i = 0; i < lineList.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n                if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            const getGroupLine = (index) => lineList[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n            const groupLength = groupEnd - groupStart + 1;\n            let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'second_on_bottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spaced_out_tetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spaced_out_pentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'very_spaced_out_pentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spaced_out_hexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'very_spaced_out_hexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            if (groupLength >= 7) {\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < lineList.length; line++) {\n                        if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            i = groupEnd;\n        }\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = accShift + leftShift;\n        columnXOffsets[0] = accShift + leftShift;\n        lineList.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        let accCount = 0;\n        lineList.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth;\n                accList[accCount].acc.setXShift(xShift);\n                lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        state.left_shift += totalShift + additionalPadding;\n    }\n    static checkCollision(line1, line2) {\n        let clearance = line2.line - line1.line;\n        let clearanceRequired = 3;\n        if (clearance > 0) {\n            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n            if (line1.dblSharpLine)\n                clearance -= 0.5;\n        }\n        else {\n            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n            if (line2.dblSharpLine)\n                clearance -= 0.5;\n        }\n        const collision = Math.abs(clearance) < clearanceRequired;\n        L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n        return collision;\n    }\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        if (!keySignature)\n            keySignature = 'C';\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        scaleMap[key.root + octave] = pitch;\n                        const accidental = new Accidental(accidentalString);\n                        staveNote.addModifier(accidental, keyIndex);\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    reset() {\n        const fontScale = this.render_options.font_scale;\n        this.glyph = new Glyph(this.accidental.code, fontScale);\n        this.glyph.setOriginX(1.0);\n        if (this.cautionary) {\n            this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\n            this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\n            this.parenLeft.setOriginX(1.0);\n            this.parenRight.setOriginX(1.0);\n        }\n    }\n    getWidth() {\n        if (this.cautionary) {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            const parenWidth = parenLeft.getMetrics().width +\n                parenRight.getMetrics().width +\n                this.render_options.parenLeftPadding +\n                this.render_options.parenRightPadding;\n            return this.glyph.getMetrics().width + parenWidth;\n        }\n        else {\n            return this.glyph.getMetrics().width;\n        }\n    }\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.render_options.font_scale = 25;\n            this.reset();\n        }\n        return this;\n    }\n    setAsCautionary() {\n        this.cautionary = true;\n        this.render_options.font_scale = 28;\n        this.reset();\n        return this;\n    }\n    draw() {\n        const { type, position, index, cautionary, x_shift, y_shift, glyph, render_options: { parenLeftPadding, parenRightPadding }, } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(position, index);\n        let accX = start.x + x_shift;\n        const accY = start.y + y_shift;\n        L('Rendering: ', type, accX, accY);\n        if (!cautionary) {\n            glyph.render(ctx, accX, accY);\n        }\n        else {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            parenRight.render(ctx, accX, accY);\n            accX -= parenRight.getMetrics().width;\n            accX -= parenRightPadding;\n            accX -= this.accidental.parenRightPaddingAdjustment;\n            glyph.render(ctx, accX, accY);\n            accX -= glyph.getMetrics().width;\n            accX -= parenLeftPadding;\n            parenLeft.render(ctx, accX, accY);\n        }\n    }\n}\nAccidental.DEBUG = false;\n", "import { Element } from './element.js';\nimport { Tables } from './tables.js';\nimport { log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    constructor(options) {\n        super();\n        this.stem_up_y_offset = 0;\n        this.stem_down_y_offset = 0;\n        this.stem_up_y_base_offset = 0;\n        this.stem_down_y_base_offset = 0;\n        this.x_begin = (options === null || options === void 0 ? void 0 : options.x_begin) || 0;\n        this.x_end = (options === null || options === void 0 ? void 0 : options.x_end) || 0;\n        this.y_top = (options === null || options === void 0 ? void 0 : options.y_top) || 0;\n        this.y_bottom = (options === null || options === void 0 ? void 0 : options.y_bottom) || 0;\n        this.stem_extension = (options === null || options === void 0 ? void 0 : options.stem_extension) || 0;\n        this.stem_direction = (options === null || options === void 0 ? void 0 : options.stem_direction) || 0;\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (options === null || options === void 0 ? void 0 : options.stemletHeight) || 0;\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    static get CATEGORY() {\n        return \"Stem\";\n    }\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    setOptions(options) {\n        this.stem_up_y_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_offset) || 0;\n        this.stem_down_y_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_offset) || 0;\n        this.stem_up_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_base_offset) || 0;\n        this.stem_down_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_base_offset) || 0;\n    }\n    setNoteHeadXBounds(x_begin, x_end) {\n        this.x_begin = x_begin;\n        this.x_end = x_end;\n        return this;\n    }\n    setDirection(direction) {\n        this.stem_direction = direction;\n    }\n    setExtension(ext) {\n        this.stem_extension = ext;\n    }\n    getExtension() {\n        return this.stem_extension;\n    }\n    setYBounds(y_top, y_bottom) {\n        this.y_top = y_top;\n        this.y_bottom = y_bottom;\n    }\n    getHeight() {\n        const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n        const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension);\n        return unsigned_height * this.stem_direction;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    getExtents() {\n        const isStemUp = this.stem_direction === Stem.UP;\n        const ys = [this.y_top, this.y_bottom];\n        const stemHeight = Stem.HEIGHT + this.stem_extension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Tables.currentMusicFont().lookupMetric('stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stem_x;\n        let stem_y;\n        const stem_direction = this.stem_direction;\n        let y_base_offset = 0;\n        if (stem_direction === Stem.DOWN) {\n            stem_x = this.x_begin;\n            stem_y = this.y_top + this.stem_down_y_offset;\n            y_base_offset = this.stem_down_y_base_offset;\n        }\n        else {\n            stem_x = this.x_end;\n            stem_y = this.y_bottom - this.stem_up_y_offset;\n            y_base_offset = this.stem_up_y_base_offset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'), { pointerBBox: true });\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n        ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nStem.DEBUG = false;\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { log } from './util.js';\nfunction L(...args) {\n    if (TextFormatter.DEBUG)\n        log('Vex.Flow.TextFormatter', args);\n}\nconst textWidthCache = {};\nconst textHeightCache = {};\nconst registry = {};\nexport class TextFormatter {\n    constructor(formatterInfo) {\n        this.family = '';\n        this.size = 14;\n        this.resolution = 1000;\n        this.glyphs = {};\n        this.serifs = false;\n        this.monospaced = false;\n        this.italic = false;\n        this.bold = false;\n        this.superscriptOffset = 0;\n        this.subscriptOffset = 0;\n        this.maxSizeGlyph = '@';\n        this.cacheKey = '';\n        this.updateParams(formatterInfo);\n    }\n    static getFontFamilies() {\n        const registeredFonts = [];\n        for (const fontFamily in registry) {\n            const formatterInfo = registry[fontFamily];\n            registeredFonts.push(Object.assign({}, formatterInfo));\n        }\n        return registeredFonts;\n    }\n    static create(requestedFont = {}) {\n        L('create: ', requestedFont);\n        if (!requestedFont.family) {\n            requestedFont.family = Font.SANS_SERIF;\n        }\n        const candidates = [];\n        const requestedFamilies = requestedFont.family.split(/\\s*,\\s*/);\n        for (const requestedFamily of requestedFamilies) {\n            for (const fontFamily in registry) {\n                if (fontFamily.startsWith(requestedFamily)) {\n                    candidates.push(registry[fontFamily]);\n                }\n            }\n            if (candidates.length > 0) {\n                break;\n            }\n        }\n        let formatter;\n        if (candidates.length === 0) {\n            formatter = new TextFormatter(Object.values(registry)[0]);\n        }\n        else if (candidates.length === 1) {\n            formatter = new TextFormatter(candidates[0]);\n        }\n        else {\n            const bold = Font.isBold(requestedFont.weight);\n            const italic = Font.isItalic(requestedFont.style);\n            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);\n            if (perfectMatch) {\n                formatter = new TextFormatter(perfectMatch);\n            }\n            else {\n                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);\n                if (partialMatch) {\n                    formatter = new TextFormatter(partialMatch);\n                }\n                else {\n                    formatter = new TextFormatter(candidates[0]);\n                }\n            }\n        }\n        const fontSize = requestedFont.size;\n        if (typeof fontSize !== 'undefined') {\n            const fontSizeInPt = Font.convertSizeToPointValue(fontSize);\n            formatter.setFontSize(fontSizeInPt);\n        }\n        return formatter;\n    }\n    static getInfo(fontFamily) {\n        return registry[fontFamily];\n    }\n    static registerInfo(info, overwrite = false) {\n        L('registerInfo: ', info, overwrite);\n        const fontFamily = info.family;\n        const currFontInfo = registry[fontFamily];\n        if (currFontInfo === undefined || overwrite) {\n            registry[fontFamily] = info;\n        }\n    }\n    get localHeightCache() {\n        var _a;\n        if (textHeightCache[this.cacheKey] === undefined) {\n            textHeightCache[this.cacheKey] = {};\n        }\n        return (_a = textHeightCache[this.cacheKey]) !== null && _a !== void 0 ? _a : {};\n    }\n    updateParams(params) {\n        if (params.family)\n            this.family = params.family;\n        if (params.resolution)\n            this.resolution = params.resolution;\n        if (params.glyphs)\n            this.glyphs = params.glyphs;\n        if (params.serifs)\n            this.serifs = params.serifs;\n        if (params.monospaced)\n            this.monospaced = params.monospaced;\n        if (params.italic)\n            this.italic = params.italic;\n        if (params.bold)\n            this.bold = params.bold;\n        if (params.maxSizeGlyph)\n            this.maxSizeGlyph = params.maxSizeGlyph;\n        if (params.superscriptOffset)\n            this.superscriptOffset = params.superscriptOffset;\n        if (params.subscriptOffset)\n            this.subscriptOffset = params.subscriptOffset;\n        this.updateCacheKey();\n    }\n    updateCacheKey() {\n        const family = this.family.replace(/\\s+/g, '_');\n        const size = this.size;\n        const weight = this.bold ? FontWeight.BOLD : FontWeight.NORMAL;\n        const style = this.italic ? FontStyle.ITALIC : FontStyle.NORMAL;\n        this.cacheKey = `${family}%${size}%${weight}%${style}`;\n    }\n    getGlyphMetrics(character) {\n        if (this.glyphs[character]) {\n            return this.glyphs[character];\n        }\n        else {\n            return this.glyphs[this.maxSizeGlyph];\n        }\n    }\n    get maxHeight() {\n        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);\n        return (metrics.ha / this.resolution) * this.fontSizeInPixels;\n    }\n    getWidthForCharacterInEm(c) {\n        var _a;\n        const metrics = this.getGlyphMetrics(c);\n        if (!metrics) {\n            return 0.65;\n        }\n        else {\n            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;\n            return advanceWidth / this.resolution;\n        }\n    }\n    getYForCharacterInPx(c) {\n        const metrics = this.getGlyphMetrics(c);\n        const rv = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };\n        if (!metrics) {\n            return rv;\n        }\n        else {\n            if (typeof metrics.y_min === 'number') {\n                rv.yMin = (metrics.y_min / this.resolution) * this.fontSizeInPixels;\n            }\n            if (typeof metrics.y_max === 'number') {\n                rv.yMax = (metrics.y_max / this.resolution) * this.fontSizeInPixels;\n            }\n            rv.height = rv.yMax - rv.yMin;\n            return rv;\n        }\n    }\n    getYForStringInPx(str) {\n        const entry = this.localHeightCache;\n        const extent = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };\n        const cache = entry[str];\n        if (cache !== undefined) {\n            return cache;\n        }\n        for (let i = 0; i < str.length; ++i) {\n            const curY = this.getYForCharacterInPx(str[i]);\n            extent.yMin = Math.min(extent.yMin, curY.yMin);\n            extent.yMax = Math.max(extent.yMax, curY.yMax);\n            extent.height = extent.yMax - extent.yMin;\n        }\n        entry[str] = extent;\n        return extent;\n    }\n    getWidthForTextInEm(text) {\n        const key = this.cacheKey;\n        let cachedWidths = textWidthCache[key];\n        if (cachedWidths === undefined) {\n            cachedWidths = {};\n            textWidthCache[key] = cachedWidths;\n        }\n        let width = cachedWidths[text];\n        if (width === undefined) {\n            width = 0;\n            for (let i = 0; i < text.length; ++i) {\n                width += this.getWidthForCharacterInEm(text[i]);\n            }\n            cachedWidths[text] = width;\n        }\n        return width;\n    }\n    getWidthForTextInPx(text) {\n        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;\n    }\n    setFontSize(size) {\n        this.size = size;\n        this.updateCacheKey();\n        return this;\n    }\n    get fontSizeInPixels() {\n        return this.size * Font.scaleToPxFrom.pt;\n    }\n    getResolution() {\n        return this.resolution;\n    }\n}\nTextFormatter.DEBUG = false;\n", "import { Element } from './element.js';\nimport { Modifier, ModifierPosition } from './modifier.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nimport { isStemmableNote, isTabNote } from './typeguard.js';\nimport { log } from './util.js';\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\nexport class Annotation extends Modifier {\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n        this.resetFont();\n        this.setWidth(Tables.textWidth(text));\n    }\n    static get CATEGORY() {\n        return \"Annotation\";\n    }\n    static get minAnnotationPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n    }\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            const textFormatter = TextFormatter.create(annotation.textFont);\n            const textLines = (2 + textFormatter.getYForStringInPx(annotation.text).height) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphProps().getWidth();\n            const textWidth = textFormatter.getWidthForTextInPx(annotation.text);\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.render_options.draw_stem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.top_text_line + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.top_text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.top_text_line);\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.text_line + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.text_line);\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.text_line);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\n        state.left_shift += leftOverlap;\n        state.right_shift += rightOverlap;\n        return true;\n    }\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const textFormatter = TextFormatter.create(this.textFont);\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        ctx.setFont(this.textFont);\n        const text_width = textFormatter.getWidthForTextInPx(this.text);\n        const text_height = textFormatter.getYForStringInPx(this.text).height;\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - text_width;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - text_width / 2;\n        }\n        else {\n            x = note.getStemX() - text_width / 2;\n        }\n        let stem_ext = {};\n        let spacing = 0;\n        const has_stem = note.hasStem();\n        const stave = note.checkStave();\n        if (has_stem) {\n            stem_ext = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE + text_height;\n            if (has_stem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stem_ext.topY + text_height + spacing * this.text_line);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.text_line) - 1;\n            const yb = stave.getYForBottomText(this.text_line);\n            y = yt + (yb - yt) / 2 + text_height / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (has_stem && stemDirection === Stem.UP) {\n                spacing = stem_ext.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stem_ext.topY - spacing * (this.text_line + 1));\n            }\n        }\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        ctx.fillText(this.text, x, y);\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nAnnotation.DEBUG = false;\nAnnotation.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n", "import { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nfunction getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nfunction getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nfunction getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nexport class Articulation extends Modifier {\n    constructor(type) {\n        super();\n        this.type = type;\n        this.position = BELOW;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.reset();\n    }\n    static get CATEGORY() {\n        return \"Articulation\";\n    }\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), defined(articulation.glyph.getMetrics().height) / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphProps().getWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.top_text_line, ABOVE);\n                const curTop = noteLine + state.top_text_line + 0.5;\n                if (!articulation.articulation.between_lines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.top_text_line);\n                state.top_text_line += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.text_line, BELOW);\n                const curBottom = noteLine + state.text_line + 0.5;\n                if (!articulation.articulation.between_lines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.text_line);\n                state.text_line += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.left_shift + state.right_shift), 0));\n        state.left_shift += overlap / 2;\n        state.right_shift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n        const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n        this.glyph = new Glyph(code !== null && code !== void 0 ? code : '', this.render_options.font_scale);\n        this.setWidth(defined(this.glyph.getMetrics().width));\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, glyph, text_line: textLine } = this;\n        const canSitBetweenLines = this.articulation.between_lines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        const padding = Tables.currentMusicFont().lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n        let y = {\n            [ABOVE]: () => {\n                glyph.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                glyph.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                glyph.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        glyph.render(ctx, x, y);\n    }\n}\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n", "export class RenderContext {\n    static get CATEGORY() {\n        return \"RenderContext\";\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n    setRawFont(f) {\n        this.setFont(f);\n        return this;\n    }\n}\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n", "import { Element } from './element.js';\nimport { Fraction } from './fraction.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nexport class Tickable extends Element {\n    constructor() {\n        super();\n        this._preFormatted = false;\n        this._postFormatted = false;\n        this.ticks = new Fraction(0, 1);\n        this.intrinsicTicks = 0;\n        this.tickMultiplier = new Fraction(1, 1);\n        this.width = 0;\n        this.x_shift = 0;\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.align_center = false;\n        this.center_x_shift = 0;\n        this.ignore_ticks = false;\n        this.formatterMetrics = {\n            freedom: { left: 0, right: 0 },\n            duration: '',\n            iterations: 0,\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    static get CATEGORY() {\n        return \"Tickable\";\n    }\n    reset() {\n        return this;\n    }\n    getTicks() {\n        return this.ticks;\n    }\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    setIgnoreTicks(flag) {\n        this.ignore_ticks = flag;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n    }\n    getWidth() {\n        if (!this._preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    setXShift(x) {\n        this.x_shift = x;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.x_shift;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.center_x_shift;\n        }\n        return 0;\n    }\n    setCenterXShift(centerXShift) {\n        this.center_x_shift = centerXShift;\n        return this;\n    }\n    isCenterAligned() {\n        return this.align_center;\n    }\n    setCenterAlignment(align_center) {\n        this.align_center = align_center;\n        return this;\n    }\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    getTuplet() {\n        return this.tuplet;\n    }\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        this._preFormatted = false;\n        return this;\n    }\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        this._preFormatted = false;\n        return this;\n    }\n    getModifiers() {\n        return this.modifiers;\n    }\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this._preFormatted = false;\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    preFormat() {\n        if (this._preFormatted)\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    set preFormatted(value) {\n        this._preFormatted = value;\n    }\n    get preFormatted() {\n        return this._preFormatted;\n    }\n    postFormat() {\n        if (this._postFormatted)\n            return this;\n        this._postFormatted = true;\n        return this;\n    }\n    set postFormatted(value) {\n        this._postFormatted = value;\n    }\n    get postFormatted() {\n        return this._postFormatted;\n    }\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n", "import { Font } from './font.js';\nimport { drawDot } from './rendercontext.js';\nimport { Tables } from './tables.js';\nimport { Tickable } from './tickable.js';\nimport { defined, RuntimeError } from './util.js';\nexport class Note extends Tickable {\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        this.keys = noteStruct.keys || [];\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.duration_override) {\n            this.setDuration(noteStruct.duration_override);\n        }\n        else {\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\n        this.playNote = undefined;\n        this.ignore_ticks = false;\n        this.width = 0;\n        this.leftDisplacedHeadPx = 0;\n        this.rightDisplacedHeadPx = 0;\n        this.x_shift = 0;\n        this.ys = [];\n        if (noteStruct.align_center) {\n            this.setCenterAlignment(noteStruct.align_center);\n        }\n        this.render_options = {\n            annotation_spacing: 5,\n            glyph_font_scale: 1,\n            stroke_px: 1,\n            scale: 1,\n            font: '',\n            y_shift: 0,\n        };\n    }\n    static get CATEGORY() {\n        return \"Note\";\n    }\n    static plotMetrics(ctx, note, yPos) {\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB');\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    getPlayNote() {\n        return this.playNote;\n    }\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    isRest() {\n        return false;\n    }\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]);\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    getLineForRest() {\n        return 0;\n    }\n    getGlyph() {\n        return this.glyphProps;\n    }\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    getGlyphWidth() {\n        return this.glyphProps.getWidth(this.render_options.glyph_font_scale);\n    }\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    getYForTopText(text_line) {\n        return this.checkStave().getYForTopText(text_line);\n    }\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    getDuration() {\n        return this.duration;\n    }\n    isDotted() {\n        return this.getModifiersByType('Dot').length > 0;\n    }\n    hasStem() {\n        return false;\n    }\n    getNoteType() {\n        return this.noteType;\n    }\n    getBeam() {\n        return this.beam;\n    }\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    hasBeam() {\n        return this.beam != undefined;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.x_shift : -this.x_shift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        if (this.checkModifierContext().getMembers('Parenthesis').length !== 0)\n            px += Tables.currentMusicFont().lookupMetric('parenthesis.default.width');\n        return px;\n    }\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().left_shift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().right_shift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx -\n            modRightPx -\n            this.leftDisplacedHeadPx -\n            this.rightDisplacedHeadPx;\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            modLeftPx,\n            modRightPx,\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Tables.currentMusicFont().lookupMetric('stave.padding');\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const note_glyph_width = this.glyphProps.getWidth();\n        tieStartX += note_glyph_width / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const note_glyph_width = this.glyphProps.getWidth();\n        tieEndX += note_glyph_width / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    getKeys() {\n        return this.keys;\n    }\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n", "import { Element } from './element.js';\nimport { defined } from './util.js';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    constructor() {\n        super();\n        this.width = 0;\n        this.x = 0;\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    static get CATEGORY() {\n        return \"StaveModifier\";\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    placeGlyphOnLine(glyph, stave, line, customShift = 0) {\n        glyph.setYShift(stave.getYForLine(line !== null && line !== void 0 ? line : 0) - stave.getYForGlyphs() + customShift);\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    draw(...args) {\n    }\n}\n", "import { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    static get CATEGORY() {\n        return \"Barline\";\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, double_bar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (double_bar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let x_shift = 3;\n        if (!begin) {\n            x_shift = -5;\n        }\n        staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dot_radius = 2;\n        if (begin) {\n            x_shift += 4;\n        }\n        else {\n            x_shift -= 4;\n        }\n        const dot_x = x + x_shift + dot_radius / 2;\n        let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dot_y = topY + y_offset + dot_radius / 2;\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        dot_y += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n", "import { Note } from './note.js';\nimport { Barline, BarlineType } from './stavebarline.js';\nimport { log } from './util.js';\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\nexport class BarNote extends Note {\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        this.ignore_ticks = true;\n        this.setType(type);\n    }\n    static get CATEGORY() {\n        return \"BarNote\";\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    addToModifierContext(mc) {\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\nBarNote.DEBUG = false;\n", "import { Element } from './element.js';\nimport { Fraction } from './fraction.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { isStaveNote, isTabNote } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\nexport class Beam extends Element {\n    constructor(notes, auto_stem = false) {\n        super();\n        this.slope = 0;\n        this.y_shift = 0;\n        this.forcedPartialDirections = {};\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        this.ticks = notes[0].getIntrinsicTicks();\n        if (this.ticks >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i;\n        let note;\n        this.stem_direction = notes[0].getStemDirection();\n        let stem_direction = this.stem_direction;\n        if (auto_stem && isStaveNote(notes[0])) {\n            stem_direction = calculateStemDirection(notes);\n        }\n        else if (auto_stem && isTabNote(notes[0])) {\n            const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (auto_stem) {\n                note.setStemDirection(stem_direction);\n                this.stem_direction = stem_direction;\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        this.beam_count = this.getBeamCount();\n        this.break_on_indices = [];\n        this.render_options = {\n            beam_width: 5,\n            max_slope: 0.25,\n            min_slope: -0.25,\n            slope_iterations: 20,\n            slope_cost: 100,\n            show_stemlets: false,\n            stemlet_extension: 7,\n            partial_beam_length: 10,\n            flat_beams: false,\n            min_flat_beam_offset: 15,\n        };\n    }\n    static get CATEGORY() {\n        return \"Beam\";\n    }\n    getStemDirection() {\n        return this.stem_direction;\n    }\n    static getDefaultBeamGroups(time_sig) {\n        if (!time_sig || time_sig === 'c') {\n            time_sig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[time_sig];\n        if (groups === undefined) {\n            const beatTotal = parseInt(time_sig.split('/')[0], 10);\n            const beatValue = parseInt(time_sig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    static applyAndGetBeams(voice, stem_direction, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stem_direction });\n    }\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(vf_notes) {\n            return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return;\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beam_rests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        tempGroup.push(note);\n                    }\n                });\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintain_stem_directions) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stem_direction) {\n                        stemDirection = config.stem_direction;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        function getTuplets() {\n            const uniqueTuplets = [];\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        const beamedNoteGroups = getBeamGroups();\n        const allTuplets = getTuplets();\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.show_stemlets) {\n                beam.render_options.show_stemlets = true;\n            }\n            if (config.secondary_breaks) {\n                beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\n            }\n            if (config.flat_beams === true) {\n                beam.render_options.flat_beams = true;\n                beam.render_options.flat_beam_offset = config.flat_beam_offset;\n            }\n            beams.push(beam);\n        });\n        allTuplets.forEach((tuplet) => {\n            const direction = tuplet.notes[0].stem_direction === Stem.DOWN ? -1 : 1;\n            tuplet.setTupletLocation(direction);\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beam_count);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    breakSecondaryAt(indices) {\n        this.break_on_indices = indices;\n        return this;\n    }\n    setPartialBeamSideAt(noteIndex, side) {\n        this.forcedPartialDirections[noteIndex] = side;\n        return this;\n    }\n    unsetPartialBeamSideAt(noteIndex) {\n        delete this.forcedPartialDirections[noteIndex];\n        return this;\n    }\n    getSlopeY(x, first_x_px, first_y_px, slope) {\n        return first_y_px + (x - first_x_px) * slope;\n    }\n    calculateSlope() {\n        const { notes, stem_direction: stemDirection, render_options: { max_slope, min_slope, slope_iterations, slope_cost }, } = this;\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (max_slope - min_slope) / slope_iterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        for (let slope = min_slope; slope <= max_slope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        this.y_shift = yShift;\n    }\n    calculateFlatSlope() {\n        const { notes, stem_direction, render_options: { beam_width, min_flat_beam_offset, flat_beam_offset }, } = this;\n        let total = 0;\n        let extremeY = 0;\n        let extremeBeamCount = 0;\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        let offset = total / notes.length;\n        const beamWidth = beam_width * 1.5;\n        const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n        const newOffset = extremeY + extremeTest * -stem_direction;\n        if (stem_direction === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stem_direction === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        this.slope = 0;\n        this.y_shift = 0;\n    }\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n            beamY = this.render_options.flat_beam_offset;\n        }\n        return beamY;\n    }\n    applyStemExtensions() {\n        const { notes, slope, y_shift, beam_count, render_options: { show_stemlets, stemlet_extension, beam_width }, } = this;\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== this.stem_direction) {\n                    const beamCount = note.getGlyphProps().beam_count;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.render_options.beam_width;\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && show_stemlets) {\n                    const beamWidth = beam_width;\n                    const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n                }\n            }\n        }\n    }\n    lookupBeamDirection(duration, prev_tick, tick, next_tick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = this.forcedPartialDirections[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\n        const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\n        const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\n        const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\n        if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_BOTH;\n        }\n        else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n            return BEAM_LEFT;\n        }\n        else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick, noteIndex);\n    }\n    getBeamLines(duration) {\n        const tick_of_duration = Tables.durationToTicks(duration);\n        let beam_started = false;\n        const beam_lines = [];\n        let current_beam = undefined;\n        const partial_beam_length = this.render_options.partial_beam_length;\n        let previous_should_break = false;\n        let tick_tally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            const ticks = note.getTicks().value();\n            tick_tally += ticks;\n            let should_break = false;\n            if (parseInt(duration, 10) >= 8) {\n                should_break = this.break_on_indices.indexOf(i) !== -1;\n                if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n                    tick_tally = 0;\n                    should_break = true;\n                }\n            }\n            const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n            const stem_x = note.getStemX() - Stem.WIDTH / 2;\n            const prev_note = this.notes[i - 1];\n            const next_note = this.notes[i + 1];\n            const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n            const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n            const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n            if (note_gets_beam) {\n                if (beam_started) {\n                    current_beam = beam_lines[beam_lines.length - 1];\n                    current_beam.end = stem_x;\n                    if (should_break) {\n                        beam_started = false;\n                        if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                }\n                else {\n                    current_beam = { start: stem_x, end: undefined };\n                    beam_started = true;\n                    if (beam_alone) {\n                        const prev_tick = prev_note.getIntrinsicTicks();\n                        const next_tick = next_note.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                        else {\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                    }\n                    else if (!next_note_gets_beam) {\n                        if ((previous_should_break || i === 0) && next_note) {\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                        else {\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                    else if (should_break) {\n                        current_beam.end = current_beam.start - partial_beam_length;\n                        beam_started = false;\n                    }\n                    beam_lines.push(current_beam);\n                }\n            }\n            else {\n                beam_started = false;\n            }\n            previous_should_break = should_break;\n        }\n        const last_beam = beam_lines[beam_lines.length - 1];\n        if (last_beam && last_beam.end === undefined) {\n            last_beam.end = last_beam.start - partial_beam_length;\n        }\n        return beam_lines;\n    }\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stem_x = note.getStemX();\n                stem.setNoteHeadXBounds(stem_x, stem_x);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    drawBeamLines(ctx) {\n        const valid_beam_durations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.render_options.beam_width * this.stem_direction;\n        for (let i = 0; i < valid_beam_durations.length; ++i) {\n            const duration = valid_beam_durations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beam_line = beamLines[j];\n                const startBeamX = beam_line.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beam_line.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    preFormat() {\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (this.unbeamable)\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n", "import { Element } from './element.js';\nimport { Modifier } from './modifier.js';\nimport { TextFormatter } from './textformatter.js';\nimport { isTabNote } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nexport class Bend extends Modifier {\n    constructor(text, release = false, phrase) {\n        super();\n        this.text = text;\n        this.x_shift = 0;\n        this.release = release;\n        this.tap = '';\n        this.resetFont();\n        this.render_options = {\n            line_width: 1.5,\n            line_style: '#777777',\n            bend_width: 8,\n            release_width: 8,\n        };\n        if (phrase) {\n            this.phrase = phrase;\n        }\n        else {\n            this.phrase = [{ type: Bend.UP, text: this.text }];\n            if (this.release)\n                this.phrase.push({ type: Bend.DOWN, text: '' });\n        }\n        this.updateWidth();\n    }\n    static get CATEGORY() {\n        return \"Bend\";\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let last_width = 0;\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.top_text_line < stringPos) {\n                    state.top_text_line = stringPos;\n                }\n            }\n            bend.setXShift(last_width);\n            last_width = bend.getWidth();\n            bend.setTextLine(state.top_text_line);\n        }\n        state.right_shift += last_width;\n        state.top_text_line += 1;\n        return true;\n    }\n    setXShift(value) {\n        this.x_shift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getText() {\n        return this.text;\n    }\n    getTextHeight() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        return textFormatter.maxHeight;\n    }\n    updateWidth() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        const measureText = (text) => {\n            return textFormatter.getWidthForTextInPx(text);\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n                bend.width = Math.max(additional_width, measureText(bend.text)) + 3;\n                bend.draw_width = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.x_shift);\n        return this;\n    }\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const x_shift = this.x_shift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        const bend_height = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) + 3;\n        const annotation_y = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cp_x = x + width;\n            const cp_y = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const render_x = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, render_x, annotation_y);\n            ctx.restore();\n        };\n        let last_bend = undefined;\n        let last_bend_draw_width = 0;\n        let last_drawn_width = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.draw_width)\n                bend.draw_width = 0;\n            if (i === 0)\n                bend.draw_width += x_shift;\n            last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n            if (bend.type === Bend.UP) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderArrowHead(start.x, bend_height, +1);\n                }\n                renderBend(start.x, start.y, last_drawn_width, bend_height);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (last_bend && last_bend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (!last_bend) {\n                    last_drawn_width = bend.draw_width;\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n            }\n            renderText(start.x + last_drawn_width, bend.text);\n            last_bend = bend;\n            last_bend_draw_width = bend.draw_width;\n            last_bend.x = start.x;\n            start.x += last_drawn_width;\n        }\n        if (!last_bend || last_bend.x == undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        if (last_bend.type === Bend.UP) {\n            renderArrowHead(last_bend.x + last_drawn_width, bend_height, +1);\n        }\n        else if (last_bend.type === Bend.DOWN) {\n            renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n        }\n    }\n}\nBend.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n", "import { globalObject } from './util.js';\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return ((typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return ((typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n", "import { Font } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { globalObject, warn } from './util.js';\nimport { isHTMLCanvas } from './web.js';\nexport class CanvasContext extends RenderContext {\n    constructor(context) {\n        super();\n        this.textHeight = 0;\n        this.context2D = context;\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767;\n    }\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    openGroup(cls, id, attrs) {\n    }\n    closeGroup() {\n    }\n    add(child) {\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    setBackgroundFillStyle(style) {\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height) {\n        const canvas = this.context2D.canvas;\n        const devicePixelRatio = globalObject().devicePixelRatio || 1;\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n        width = (width / devicePixelRatio) | 0;\n        height = (height / devicePixelRatio) | 0;\n        canvas.width = width * devicePixelRatio;\n        canvas.height = height * devicePixelRatio;\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(devicePixelRatio, devicePixelRatio);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    getFont() {\n        return this.context2D.font;\n    }\n}\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nimport { isStemmableNote } from './typeguard.js';\nimport { log } from './util.js';\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolTypes;\n(function (SymbolTypes) {\n    SymbolTypes[SymbolTypes[\"GLYPH\"] = 1] = \"GLYPH\";\n    SymbolTypes[SymbolTypes[\"TEXT\"] = 2] = \"TEXT\";\n    SymbolTypes[SymbolTypes[\"LINE\"] = 3] = \"LINE\";\n})(SymbolTypes || (SymbolTypes = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\nexport class ChordSymbol extends Modifier {\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.useKerning = true;\n        this.reportWidth = true;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"ChordSymbol\";\n    }\n    static get superSubRatio() {\n        return ChordSymbol.metrics.global.superSubRatio;\n    }\n    static set NO_TEXT_FORMAT(val) {\n        ChordSymbol.noFormat = val;\n    }\n    static get NO_TEXT_FORMAT() {\n        return ChordSymbol.noFormat;\n    }\n    static getMetricForGlyph(glyphCode) {\n        if (ChordSymbol.metrics[glyphCode]) {\n            return ChordSymbol.metrics[glyphCode];\n        }\n        return undefined;\n    }\n    static get engravingFontResolution() {\n        return Tables.currentMusicFont().getResolution();\n    }\n    static get spacingBetweenBlocks() {\n        return ChordSymbol.metrics.global.spacing / ChordSymbol.engravingFontResolution;\n    }\n    static getWidthForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0.65;\n        }\n        return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n    }\n    static getYShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return metric.yOffset / ChordSymbol.engravingFontResolution;\n    }\n    static getXShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n    }\n    static get superscriptOffset() {\n        return ChordSymbol.metrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get subscriptOffset() {\n        return ChordSymbol.metrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get kerningOffset() {\n        return ChordSymbol.metrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.chordSymbol;\n    }\n    static get lowerKerningText() {\n        return ChordSymbol.metrics.global.lowerKerningText;\n    }\n    static get upperKerningText() {\n        return ChordSymbol.metrics.global.upperKerningText;\n    }\n    static isSuperscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    static isSubscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n    static get minPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n    }\n    static format(symbols, state) {\n        var _a;\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let nonSuperWidth = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const fontSize = Font.convertSizeToPointValue((_a = symbol.textFont) === null || _a === void 0 ? void 0 : _a.size);\n            const fontAdj = Font.scaleSize(fontSize, 0.05);\n            const glyphAdj = fontAdj * 2;\n            const note = symbol.checkAttachedNote();\n            let symbolWidth = 0;\n            let lineSpaces = 1;\n            let vAlign = false;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = ChordSymbol.isSuperscript(block);\n                const sub = ChordSymbol.isSubscript(block);\n                const superSubScale = sup || sub ? ChordSymbol.superSubRatio : 1;\n                const adj = block.symbolType === SymbolTypes.GLYPH ? glyphAdj * superSubScale : fontAdj * superSubScale;\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                const fontSize = symbol.textFormatter.fontSizeInPixels;\n                const superSubFontSize = fontSize * superSubScale;\n                if (block.symbolType === SymbolTypes.GLYPH && block.glyph !== undefined) {\n                    block.width = ChordSymbol.getWidthForGlyph(block.glyph) * superSubFontSize;\n                    block.yShift += ChordSymbol.getYShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.xShift += ChordSymbol.getXShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.glyph.scale = block.glyph.scale * adj;\n                }\n                else if (block.symbolType === SymbolTypes.TEXT) {\n                    block.width = block.width * superSubFontSize;\n                    block.yShift += symbol.getYOffsetForText(block.text) * adj;\n                }\n                if (block.symbolType === SymbolTypes.GLYPH &&\n                    block.glyph !== undefined &&\n                    block.glyph.code === ChordSymbol.glyphs.over.code) {\n                    lineSpaces = 2;\n                }\n                block.width += ChordSymbol.spacingBetweenBlocks * fontSize * superSubScale;\n                if (sup && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (!ChordSymbol.isSuperscript(prev)) {\n                        nonSuperWidth = width;\n                    }\n                }\n                if (sub && nonSuperWidth > 0) {\n                    vAlign = true;\n                    block.xShift = block.xShift + (nonSuperWidth - width);\n                    width = nonSuperWidth;\n                    nonSuperWidth = 0;\n                    symbol.setEnableKerning(false);\n                }\n                if (!sup && !sub) {\n                    nonSuperWidth = 0;\n                }\n                block.vAlign = vAlign;\n                width += block.width;\n                symbolWidth = width;\n            }\n            symbol.updateKerningAdjustments();\n            symbol.updateOverBarAdjustments();\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.top_text_line);\n                state.top_text_line += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.text_line + 1);\n                state.text_line += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth() && isStemmableNote(note)) {\n                const glyphWidth = note.getGlyphProps().getWidth();\n                if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                    maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                    leftWidth = Math.max(leftWidth, symbolWidth) + ChordSymbol.minPadding;\n                }\n                else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                    maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                    rightWidth = Math.max(rightWidth, symbolWidth);\n                }\n                else {\n                    leftWidth = Math.max(leftWidth, symbolWidth / 2) + ChordSymbol.minPadding;\n                    rightWidth = Math.max(rightWidth, symbolWidth / 2);\n                    maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                    maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                }\n            }\n            width = 0;\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\n        state.left_shift += leftOverlap;\n        state.right_shift += rightOverlap;\n        return true;\n    }\n    static get TEXT_FONT() {\n        let family = 'Roboto Slab, Times, serif';\n        if (Tables.currentMusicFont().getName() === 'Petaluma') {\n            family = 'PetalumaScript, Arial, sans-serif';\n        }\n        return {\n            family,\n            size: 12,\n            weight: FontWeight.NORMAL,\n            style: FontStyle.NORMAL,\n        };\n    }\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    updateOverBarAdjustments() {\n        const barIndex = this.symbolBlocks.findIndex(({ symbolType, glyph }) => symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash');\n        if (barIndex < 0) {\n            return;\n        }\n        const bar = this.symbolBlocks[barIndex];\n        const xoff = bar.width / 4;\n        const yoff = 0.25 * this.textFormatter.fontSizeInPixels;\n        let symIndex = 0;\n        for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift + xoff;\n            symbol.yShift = symbol.yShift - yoff;\n        }\n        for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift - xoff;\n            symbol.yShift = symbol.yShift + yoff;\n        }\n    }\n    updateKerningAdjustments() {\n        let accum = 0;\n        for (let j = 0; j < this.symbolBlocks.length; ++j) {\n            const symbol = this.symbolBlocks[j];\n            accum += this.getKerningAdjustment(j);\n            symbol.xShift += accum;\n        }\n    }\n    getKerningAdjustment(j) {\n        if (!this.useKerning) {\n            return 0;\n        }\n        const currSymbol = this.symbolBlocks[j];\n        const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n        let adjustment = 0;\n        if (currSymbol.symbolType === SymbolTypes.GLYPH &&\n            currSymbol.glyph !== undefined &&\n            currSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += currSymbol.glyph.metrics.x_shift;\n        }\n        if (prevSymbol !== undefined &&\n            prevSymbol.symbolType === SymbolTypes.GLYPH &&\n            prevSymbol.glyph !== undefined &&\n            prevSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += prevSymbol.glyph.metrics.x_shift;\n        }\n        let preKernUpper = false;\n        let preKernLower = false;\n        if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n            preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n            preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n        }\n        const kerningOffsetPixels = ChordSymbol.kerningOffset * this.textFormatter.fontSizeInPixels;\n        if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n            adjustment += kerningOffsetPixels;\n        }\n        if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n            if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n                adjustment += kerningOffsetPixels / 2;\n            }\n            if (ChordSymbol.upperKerningText.some((xx) => xx === (prevSymbol === null || prevSymbol === void 0 ? void 0 : prevSymbol.text[prevSymbol.text.length - 1]))) {\n                adjustment += kerningOffsetPixels / 2;\n            }\n        }\n        return adjustment;\n    }\n    getSymbolBlock(params = {}) {\n        var _a, _b, _c;\n        const symbolType = (_a = params.symbolType) !== null && _a !== void 0 ? _a : SymbolTypes.TEXT;\n        const symbolBlock = {\n            text: (_b = params.text) !== null && _b !== void 0 ? _b : '',\n            symbolType,\n            symbolModifier: (_c = params.symbolModifier) !== null && _c !== void 0 ? _c : SymbolModifiers.NONE,\n            xShift: 0,\n            yShift: 0,\n            vAlign: false,\n            width: 0,\n        };\n        if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n            const glyphArgs = ChordSymbol.glyphs[params.glyph];\n            const glyphPoints = 20;\n            symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n        }\n        else if (symbolType === SymbolTypes.TEXT) {\n            symbolBlock.width = this.textFormatter.getWidthForTextInEm(symbolBlock.text);\n        }\n        else if (symbolType === SymbolTypes.LINE) {\n            symbolBlock.width = params.width;\n        }\n        return symbolBlock;\n    }\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    addText(text, parameters = {}) {\n        const symbolType = SymbolTypes.TEXT;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text, symbolType }));\n    }\n    addTextSuperscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    addTextSubscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    addGlyphSuperscript(glyph) {\n        const symbolType = SymbolTypes.GLYPH;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n    }\n    addGlyph(glyph, params = {}) {\n        const symbolType = SymbolTypes.GLYPH;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { glyph, symbolType }));\n    }\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            if (ChordSymbol.glyphs[char]) {\n                if (str.length > 0) {\n                    this.addText(str, params);\n                    str = '';\n                }\n                this.addGlyph(char, params);\n            }\n            else {\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    addLine(width, params = {}) {\n        const symbolType = SymbolTypes.LINE;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { symbolType, width }));\n    }\n    setFont(f, size, weight, style) {\n        super.setFont(f, size, weight, style);\n        this.textFormatter = TextFormatter.create(this.textFont);\n        return this;\n    }\n    setEnableKerning(val) {\n        this.useKerning = val;\n        return this;\n    }\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    getWidth() {\n        let width = 0;\n        this.symbolBlocks.forEach((symbol) => {\n            width += symbol.vAlign ? 0 : symbol.width;\n        });\n        return width;\n    }\n    getYOffsetForText(text) {\n        var _a;\n        let acc = 0;\n        let i = 0;\n        for (i = 0; i < text.length; ++i) {\n            const metrics = this.textFormatter.getGlyphMetrics(text[i]);\n            if (metrics) {\n                const yMax = (_a = metrics.y_max) !== null && _a !== void 0 ? _a : 0;\n                acc = yMax < acc ? yMax : acc;\n            }\n        }\n        const resolution = this.textFormatter.getResolution();\n        return i > 0 ? -1 * (acc / resolution) : 0;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.textFont);\n        let y;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n                y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n            }\n        }\n        else {\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.text_line), topY - 10);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', this.textFormatter, x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            const isSuper = ChordSymbol.isSuperscript(symbol);\n            const isSub = ChordSymbol.isSubscript(symbol);\n            let curY = y;\n            L('shift was ', symbol.xShift, symbol.yShift);\n            L('curY pre sub ', curY);\n            if (isSuper) {\n                curY += this.superscriptOffset;\n            }\n            if (isSub) {\n                curY += this.subscriptOffset;\n            }\n            L('curY sup/sub ', curY);\n            if (symbol.symbolType === SymbolTypes.TEXT) {\n                if (isSuper || isSub) {\n                    ctx.save();\n                    if (this.textFont) {\n                        const { family, size, weight, style } = this.textFont;\n                        const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n                        ctx.setFont(family, smallerFontSize, weight, style);\n                    }\n                }\n                L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                if (isSuper || isSub) {\n                    ctx.restore();\n                }\n            }\n            else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n                curY += symbol.yShift;\n                L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n                symbol.glyph.render(ctx, x + symbol.xShift, curY);\n            }\n            else if (symbol.symbolType === SymbolTypes.LINE) {\n                L('Rendering Line : ', symbol.width, x, curY);\n                ctx.beginPath();\n                ctx.setLineWidth(1);\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + symbol.width, curY);\n                ctx.stroke();\n            }\n            x += symbol.width;\n            if (symbol.vAlign) {\n                x += symbol.xShift;\n            }\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\nChordSymbol.glyphs = {\n    diminished: {\n        code: 'csymDiminished',\n    },\n    dim: {\n        code: 'csymDiminished',\n    },\n    halfDiminished: {\n        code: 'csymHalfDiminished',\n    },\n    '+': {\n        code: 'csymAugmented',\n    },\n    augmented: {\n        code: 'csymAugmented',\n    },\n    majorSeventh: {\n        code: 'csymMajorSeventh',\n    },\n    minor: {\n        code: 'csymMinor',\n    },\n    '-': {\n        code: 'csymMinor',\n    },\n    '(': {\n        code: 'csymParensLeftTall',\n    },\n    leftParen: {\n        code: 'csymParensLeftTall',\n    },\n    ')': {\n        code: 'csymParensRightTall',\n    },\n    rightParen: {\n        code: 'csymParensRightTall',\n    },\n    leftBracket: {\n        code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n        code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n        code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n        code: 'csymParensRightVeryTall',\n    },\n    '/': {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n        code: 'accidentalSharp',\n    },\n    b: {\n        code: 'accidentalFlat',\n    },\n};\nChordSymbol.symbolTypes = SymbolTypes;\nChordSymbol.symbolModifiers = SymbolModifiers;\nChordSymbol.noFormat = false;\n", "import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { defined, log } from './util.js';\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\nexport class Clef extends StaveModifier {\n    constructor(type, size, annotation) {\n        super();\n        this.clef = Clef.types['treble'];\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        this.setWidth(Tables.currentMusicFont().lookupMetric(`clef.${this.size}.width`));\n        L('Creating clef:', type);\n    }\n    static get CATEGORY() {\n        return \"Clef\";\n    }\n    static get types() {\n        return {\n            treble: {\n                code: 'gClef',\n                line: 3,\n                point: 0,\n            },\n            bass: {\n                code: 'fClef',\n                line: 1,\n                point: 0,\n            },\n            alto: {\n                code: 'cClef',\n                line: 2,\n                point: 0,\n            },\n            tenor: {\n                code: 'cClef',\n                line: 1,\n                point: 0,\n            },\n            percussion: {\n                code: 'restMaxima',\n                line: 2,\n                point: 0,\n            },\n            soprano: {\n                code: 'cClef',\n                line: 4,\n                point: 0,\n            },\n            'mezzo-soprano': {\n                code: 'cClef',\n                line: 3,\n                point: 0,\n            },\n            'baritone-c': {\n                code: 'cClef',\n                line: 0,\n                point: 0,\n            },\n            'baritone-f': {\n                code: 'fClef',\n                line: 2,\n                point: 0,\n            },\n            subbass: {\n                code: 'fClef',\n                line: 0,\n                point: 0,\n            },\n            french: {\n                code: 'gClef',\n                line: 4,\n                point: 0,\n            },\n            tab: {\n                code: '6stringTabClef',\n                point: 0,\n            },\n        };\n    }\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef = Clef.types[type];\n        if (size === undefined) {\n            this.size = 'default';\n        }\n        else {\n            this.size = size;\n        }\n        const musicFont = Tables.currentMusicFont();\n        this.clef.point = musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n        this.glyph = new Glyph(this.clef.code, this.clef.point, {\n            category: `clef.${this.clef.code}.${this.size}`,\n        });\n        if (annotation !== undefined) {\n            const code = musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n            const point = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n            const line = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n            const x_shift = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n            this.annotation = { code, point, line, x_shift };\n            this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n            this.attachment.metrics.x_max = 0;\n            this.attachment.setXShift(this.annotation.x_shift);\n        }\n        else {\n            this.annotation = undefined;\n        }\n        return this;\n    }\n    getWidth() {\n        if (this.type === 'tab') {\n            defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n        }\n        return this.width;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        if (this.type === 'tab') {\n            const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n            const numLines = this.stave.getNumLines();\n            const musicFont = Tables.currentMusicFont();\n            const point = musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n            const shiftY = musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n            glyph.setPoint(point);\n            glyph.setYShift(shiftY);\n        }\n        return this;\n    }\n    draw() {\n        const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        glyph.setStave(stave);\n        glyph.setContext(ctx);\n        if (this.clef.line !== undefined) {\n            this.placeGlyphOnLine(glyph, stave, this.clef.line);\n        }\n        glyph.renderToStave(this.x);\n        if (this.annotation !== undefined && this.attachment !== undefined) {\n            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n            this.attachment.setStave(stave);\n            this.attachment.setContext(ctx);\n            this.attachment.renderToStave(this.x);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\nClef.DEBUG = false;\n", "import { Clef } from './clef.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nexport class ClefNote extends Note {\n    constructor(type, size, annotation) {\n        super({ duration: 'b' });\n        this.type = type;\n        this.clef = new Clef(type, size, annotation);\n        this.glyph = new Glyph(this.clef.clef.code, this.clef.clef.point);\n        this.setWidth(this.glyph.getMetrics().width);\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return \"ClefNote\";\n    }\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef = new Clef(type, size, annotation);\n        this.glyph = new Glyph(this.clef.clef.code, this.clef.clef.point);\n        this.setWidth(this.glyph.getMetrics().width);\n        return this;\n    }\n    getClef() {\n        return this.clef.clef;\n    }\n    setContext(context) {\n        super.setContext(context);\n        this.glyph.setContext(this.getContext());\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        var _a;\n        const stave = this.checkStave();\n        if (!this.glyph.getContext()) {\n            this.glyph.setContext(this.getContext());\n        }\n        this.setRendered();\n        const abs_x = this.getAbsoluteX();\n        this.glyph.setStave(stave);\n        this.glyph.setYShift(stave.getYForLine((_a = this.clef.clef.line) !== null && _a !== void 0 ? _a : 0) - stave.getYForGlyphs());\n        this.glyph.renderToStave(abs_x);\n        if (this.clef.annotation !== undefined) {\n            const attachment = new Glyph(this.clef.annotation.code, this.clef.annotation.point);\n            if (!attachment.getContext()) {\n                attachment.setContext(this.getContext());\n            }\n            attachment.setStave(stave);\n            attachment.setYShift(stave.getYForLine(this.clef.annotation.line) - stave.getYForGlyphs());\n            attachment.setXShift(this.clef.annotation.x_shift);\n            attachment.renderToStave(abs_x);\n        }\n    }\n}\n", "import { Fraction } from './fraction.js';\nimport { RuntimeError } from './util.js';\nexport class TickContext {\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined;\n        this.minTicks = undefined;\n        this.minTickable = undefined;\n        this.padding = 1;\n        this.x = 0;\n        this.xBase = 0;\n        this.xOffset = 0;\n        this.tickables = [];\n        this.tickablesByVoice = {};\n        this.notePx = 0;\n        this.glyphPx = 0;\n        this.leftDisplacedHeadPx = 0;\n        this.rightDisplacedHeadPx = 0;\n        this.modLeftPx = 0;\n        this.modRightPx = 0;\n        this.totalLeftPx = 0;\n        this.totalRightPx = 0;\n        this.tContexts = [];\n        this.width = 0;\n        this.formatterMetrics = {\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    }\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks == null) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex || 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n", "import { Note } from './note.js';\nimport { TickContext } from './tickcontext.js';\nimport { log } from './util.js';\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\nfunction renderHairpin(ctx, params) {\n    const begin_x = params.begin_x;\n    const end_x = params.end_x;\n    const y = params.y;\n    const half_height = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(begin_x, y - half_height);\n        ctx.lineTo(end_x, y);\n        ctx.lineTo(begin_x, y + half_height);\n    }\n    else {\n        ctx.moveTo(end_x, y - half_height);\n        ctx.lineTo(begin_x, y);\n        ctx.lineTo(end_x, y + half_height);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.options = {\n            extend_left: 0,\n            extend_right: 0,\n            y_shift: 0,\n        };\n        this.decrescendo = false;\n        this.line = noteStruct.line || 0;\n        this.height = 15;\n    }\n    static get CATEGORY() {\n        return \"Crescendo\";\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tick_context = this.getTickContext();\n        const next_context = TickContext.getNextContext(tick_context);\n        const begin_x = this.getAbsoluteX();\n        const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n        renderHairpin(ctx, {\n            begin_x: begin_x - this.options.extend_left,\n            end_x: end_x + this.options.extend_right,\n            y: y + this.options.y_shift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n", "import { Element } from './element.js';\nimport { RuntimeError } from './util.js';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    constructor(from, to, options) {\n        super();\n        this.render_options = Object.assign({ thickness: 2, x_shift: 0, y_shift: 10, position: CurvePosition.NEAR_HEAD, position_end: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    static get CATEGORY() {\n        return \"Curve\";\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const x_shift = this.render_options.x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        const first_x = params.first_x + x_shift;\n        const first_y = params.first_y + y_shift;\n        const last_x = params.last_x - x_shift;\n        const last_y = params.last_y + y_shift;\n        const thickness = this.render_options.thickness;\n        const cps = this.render_options.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const cp_spacing = (last_x - first_x) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(first_x, first_y);\n        ctx.bezierCurveTo(first_x + cp_spacing + cp0x, first_y + cp0y * params.direction, last_x - cp_spacing + cp1x, last_y + cp1y * params.direction, last_x, last_y);\n        ctx.bezierCurveTo(last_x - cp_spacing + cp1x, last_y + (cp1y + thickness) * params.direction, first_x + cp_spacing + cp0x, first_y + (cp0y + thickness) * params.direction, first_x, first_y);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.from;\n        const last_note = this.to;\n        let first_x;\n        let last_x;\n        let first_y;\n        let last_y;\n        let stem_direction = 0;\n        let metric = 'baseY';\n        let end_metric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.render_options.position);\n        const position_end = getPosition(this.render_options.position_end);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            end_metric = 'topY';\n        }\n        if (position_end === CurvePosition.NEAR_HEAD) {\n            end_metric = 'baseY';\n        }\n        else if (position_end === CurvePosition.NEAR_TOP) {\n            end_metric = 'topY';\n        }\n        if (first_note) {\n            first_x = first_note.getTieRightX();\n            stem_direction = first_note.getStemDirection();\n            first_y = first_note.getStemExtents()[metric];\n        }\n        else {\n            const stave = last_note.checkStave();\n            first_x = stave.getTieStartX();\n            first_y = last_note.getStemExtents()[metric];\n        }\n        if (last_note) {\n            last_x = last_note.getTieLeftX();\n            stem_direction = last_note.getStemDirection();\n            last_y = last_note.getStemExtents()[end_metric];\n        }\n        else {\n            const stave = first_note.checkStave();\n            last_x = stave.getTieEndX();\n            last_y = first_note.getStemExtents()[end_metric];\n        }\n        this.renderCurve({\n            first_x,\n            last_x,\n            first_y,\n            last_y,\n            direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n", "import { Modifier } from './modifier.js';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nexport class Dot extends Modifier {\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dot_shiftY = 0;\n    }\n    static get CATEGORY() {\n        return \"Dot\";\n    }\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) != undefined) {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    static format(dots, state) {\n        const right_shift = state.right_shift;\n        const dot_spacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dot_list = [];\n        const max_shift_map = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 };\n                shift = right_shift;\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const note_id = note.getAttribute('id');\n            dot_list.push({ line: props.line, note, note_id, dot });\n            max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n        }\n        dot_list.sort((a, b) => b.line - a.line);\n        let dot_shift = right_shift;\n        let x_width = 0;\n        let last_line = null;\n        let last_note = null;\n        let prev_dotted_space = null;\n        let half_shiftY = 0;\n        for (let i = 0; i < dot_list.length; ++i) {\n            const { dot, note, note_id, line } = dot_list[i];\n            if (line !== last_line || note !== last_note) {\n                dot_shift = max_shift_map[note_id];\n            }\n            if (!note.isRest() && line !== last_line) {\n                if (Math.abs(line % 1) === 0.5) {\n                    half_shiftY = 0;\n                }\n                else {\n                    half_shiftY = 0.5;\n                    if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n                        half_shiftY = -0.5;\n                    }\n                    else if (line + half_shiftY === prev_dotted_space) {\n                        half_shiftY = -0.5;\n                    }\n                }\n            }\n            if (note.isRest()) {\n                dot.dot_shiftY += -half_shiftY;\n            }\n            else {\n                dot.dot_shiftY = -half_shiftY;\n            }\n            prev_dotted_space = line + half_shiftY;\n            dot.setXShift(dot_shift);\n            dot_shift += dot.getWidth() + dot_spacing;\n            x_width = dot_shift > x_width ? dot_shift : x_width;\n            last_line = line;\n            last_note = note;\n        }\n        state.right_shift += x_width;\n        return true;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dot_shiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.x_shift + this.width - this.radius;\n        const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Modifier, ModifierPosition } from './modifier.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nimport { RuntimeError } from './util.js';\nexport class FretHandFinger extends Modifier {\n    constructor(finger) {\n        super();\n        this.finger = finger;\n        this.width = 7;\n        this.position = Modifier.Position.LEFT;\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.x_offset = 0;\n        this.y_offset = 0;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"FretHandFinger\";\n    }\n    static format(nums, state) {\n        const { left_shift, right_shift } = state;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textFormatter = TextFormatter.create(num.textFont);\n            const textHeight = textFormatter.maxHeight;\n            if (num.position === ModifierPosition.ABOVE) {\n                state.top_text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (right_shift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prev_note = note;\n            }\n            nums_list.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        nums_list.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = left_shift + shiftL;\n                numShiftR = right_shift + shiftR;\n            }\n            const numWidth = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift + numShiftL);\n                num_shift = left_shift + numWidth;\n                xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                num_shift = shiftRight + numWidth;\n                xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.left_shift += xWidthL;\n        state.right_shift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    setFretHandFinger(finger) {\n        this.finger = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.finger;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let dot_y = start.y + this.y_shift + this.y_offset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dot_x -= 4;\n                dot_y -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dot_x -= 2;\n                dot_y += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        ctx.save();\n        ctx.setFont(this.textFont);\n        ctx.fillText('' + this.finger, dot_x, dot_y);\n        ctx.restore();\n    }\n}\nFretHandFinger.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n", "import { log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString;\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches);\n}\nexport class Parser {\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n", "import { Articulation } from './articulation.js';\nimport { Dot } from './dot.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { Music } from './music.js';\nimport { Parser } from './parser.js';\nimport { Stem } from './stem.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n);\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const auto_stem = stem === 'auto';\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n        if (!auto_stem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\nconst commaSeparatedRegex = /\\s*,\\s*/;\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    setOptions(options) {\n        var _a, _b;\n        const factory = options.factory;\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n", "import { BoundingBox } from './boundingbox.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n    const width = Tables.SLASH_NOTEHEAD_WIDTH;\n    ctx.save();\n    ctx.setLineWidth(Tables.STEM_WIDTH);\n    let fill = false;\n    if (Tables.durationToNumber(duration) > 2) {\n        fill = true;\n    }\n    if (!fill)\n        x -= (Tables.STEM_WIDTH / 2) * stem_direction;\n    ctx.beginPath();\n    ctx.moveTo(x, y + staveSpace);\n    ctx.lineTo(x, y + 1);\n    ctx.lineTo(x + width, y - staveSpace);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x, y + staveSpace);\n    ctx.closePath();\n    if (fill) {\n        ctx.fill();\n    }\n    else {\n        ctx.stroke();\n    }\n    if (Tables.durationToFraction(duration).equals(0.5)) {\n        const breve_lines = [-3, -1, width + 1, width + 3];\n        for (let i = 0; i < breve_lines.length; i++) {\n            ctx.beginPath();\n            ctx.moveTo(x + breve_lines[i], y - 10);\n            ctx.lineTo(x + breve_lines[i], y + 11);\n            ctx.stroke();\n        }\n    }\n    ctx.restore();\n}\nexport class NoteHead extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.custom_glyph = false;\n        this.stem_up_x_offset = 0;\n        this.stem_down_x_offset = 0;\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.note_type)\n            this.noteType = noteStruct.note_type;\n        this.displaced = noteStruct.displaced || false;\n        this.stem_direction = noteStruct.stem_direction || Stem.UP;\n        this.line = noteStruct.line || 0;\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        if ((this.line > 5 || this.line < 0) && this.glyphProps.ledger_code_head) {\n            this.glyphProps.code_head = this.glyphProps.ledger_code_head;\n        }\n        this.glyph_code = this.glyphProps.code_head;\n        this.x_shift = noteStruct.x_shift || 0;\n        if (noteStruct.custom_glyph_code) {\n            this.custom_glyph = true;\n            this.glyph_code = noteStruct.custom_glyph_code;\n            this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n            this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE });\n        this.setWidth(this.custom_glyph &&\n            !this.glyph_code.startsWith('noteheadSlashed') &&\n            !this.glyph_code.startsWith('noteheadCircled')\n            ? Glyph.getWidth(this.glyph_code, this.render_options.glyph_font_scale)\n            : this.glyphProps.getWidth(this.render_options.glyph_font_scale));\n    }\n    static get CATEGORY() {\n        return \"NoteHead\";\n    }\n    getWidth() {\n        return this.width;\n    }\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    getY() {\n        return this.y;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    getLine() {\n        return this.line;\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    getAbsoluteX() {\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        const musicFont = Tables.currentMusicFont();\n        const fontShift = musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n        const displacedFontShift = musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n        return (x +\n            fontShift +\n            (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0));\n    }\n    getBoundingBox() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const spacing = this.checkStave().getSpacingBetweenLines();\n        const half_spacing = spacing / 2;\n        const min_y = this.y - half_spacing;\n        return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n    }\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n        this.setWidth(width);\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let head_x = this.getAbsoluteX();\n        if (this.custom_glyph) {\n            head_x +=\n                this.stem_direction === Stem.UP\n                    ? this.stem_up_x_offset +\n                        (this.glyphProps.stem ? this.glyphProps.getWidth(this.render_options.glyph_font_scale) - this.width : 0)\n                    : this.stem_down_x_offset;\n        }\n        const y = this.y;\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n        const stem_direction = this.stem_direction;\n        const glyph_font_scale = this.render_options.glyph_font_scale;\n        const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n        if (this.noteType === 's') {\n            const staveSpace = this.checkStave().getSpacingBetweenLines();\n            drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n        }\n        else {\n            Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n                category: `noteHead.standard.${categorySuffix}`,\n            });\n        }\n    }\n}\nNoteHead.DEBUG = false;\n", "import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class StemmableNote extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n    }\n    static get CATEGORY() {\n        return \"StemmableNote\";\n    }\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag(category = 'flag') {\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = this.getStemDirection() === Stem.DOWN ? glyphProps.code_flag_downstem : glyphProps.code_flag_upstem;\n            if (flagCode)\n                this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n        }\n    }\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beam_count;\n        }\n        else {\n            return 0;\n        }\n    }\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        let length = frac.value() <= 1 ? 0 : 20;\n        switch (this.duration) {\n            case '8':\n                if (this.beam == undefined)\n                    length = 35;\n                break;\n            case '16':\n                length = this.beam == undefined ? 35 : 25;\n                break;\n            case '32':\n                length = this.beam == undefined ? 45 : 35;\n                break;\n            case '64':\n                length = this.beam == undefined ? 50 : 40;\n                break;\n            case '128':\n                length = this.beam == undefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    getStemDirection() {\n        if (!this.stem_direction)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem_direction;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stem_direction = direction;\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n            const glyphProps = this.getBaseCustomNoteHeadGlyphProps() || this.getGlyphProps();\n            const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyphProps.code_head}`, {\n                offsetYBaseStemUp: 0,\n                offsetYTopStemUp: 0,\n                offsetYBaseStemDown: 0,\n                offsetYTopStemDown: 0,\n            });\n            this.stem.setOptions({\n                stem_up_y_offset: offsets.offsetYTopStemUp,\n                stem_down_y_offset: offsets.offsetYTopStemDown,\n                stem_up_y_base_offset: offsets.offsetYBaseStemUp,\n                stem_down_y_base_offset: offsets.offsetYBaseStemDown,\n            });\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    getStemX() {\n        const x_begin = this.getAbsoluteX() + this.x_shift;\n        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n        const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n        return stem_x;\n    }\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n    }\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        if (this.stem_extension_override != undefined) {\n            return this.stem_extension_override;\n        }\n        if (this.beam) {\n            return glyphProps.stem_beam_extension;\n        }\n        if (glyphProps) {\n            return this.getStemDirection() === Stem.UP ? glyphProps.stem_up_extension : glyphProps.stem_down_extension;\n        }\n        return 0;\n    }\n    setStemLength(height) {\n        this.stem_extension_override = height - Stem.HEIGHT;\n        return this;\n    }\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return Tables.getGlyphProps(this.duration).flag == true && !this.beam;\n    }\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n", "import { BoundingBox } from './boundingbox.js';\nimport { Modifier } from './modifier.js';\nimport { NoteHead } from './notehead.js';\nimport { Stem } from './stem.js';\nimport { StemmableNote } from './stemmablenote.js';\nimport { Tables } from './tables.js';\nimport { defined, log, midLine, RuntimeError } from './util.js';\nfunction showDeprecationWarningForNoteHeads() {\n    console.warn('StaveNote.note_heads is deprecated. Use StaveNote.noteHeads instead.', 'This accessor will be removed in VexFlow 5.0.');\n}\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        this.minLine = 0;\n        this.maxLine = 0;\n        this.sortedKeyProps = [];\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octave_shift = (_b = noteStruct.octave_shift) !== null && _b !== void 0 ? _b : 0;\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.displaced = false;\n        this.dot_shiftY = 0;\n        this.use_default_head_x = false;\n        this._noteHeads = [];\n        this.modifiers = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE, stroke_px: noteStruct.stroke_px || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        if (noteStruct.auto_stem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stem_direction) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    static get CATEGORY() {\n        return \"StaveNote\";\n    }\n    static get STEM_UP() {\n        return Stem.UP;\n    }\n    static get STEM_DOWN() {\n        return Stem.DOWN;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n    }\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            const props = notes[i].sortedKeyProps;\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL = line + notes[i].glyphProps.line_above;\n                minL = line - notes[i].glyphProps.line_below;\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection: stemDirection,\n                stemMax,\n                stemMin,\n                voice_shift: notes[i].getVoiceShiftWidth(),\n                is_displaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            draw[i] = notesList[i].note.render_options.draw == false ? false : true;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            return true;\n        }\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n        let xShift = 0;\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.render_options.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        let whiteNoteHeadCount = 0;\n                        let blackNoteHeadCount = 0;\n                        if (Tables.durationToNumber(noteU.note.duration) === 2) {\n                            whiteNoteHeadCount++;\n                        }\n                        else if (Tables.durationToNumber(noteU.note.duration) > 2) {\n                            blackNoteHeadCount++;\n                        }\n                        if (Tables.durationToNumber(noteL.note.duration) === 2) {\n                            whiteNoteHeadCount++;\n                        }\n                        else if (Tables.durationToNumber(noteL.note.duration) > 2) {\n                            blackNoteHeadCount++;\n                        }\n                        if ((whiteNoteHeadCount !== 2 && blackNoteHeadCount !== 2) ||\n                            noteU.note.getModifiersByType(\"Dot\").length !== noteL.note.getModifiersByType(\"Dot\").length) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (lineDiff < 1 && lineDiff > 0) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line != noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.stemDirection === noteL.stemDirection) {\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            state.right_shift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2;\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                state.right_shift += xShift;\n                return true;\n            }\n        }\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            noteU.note.render_options.draw = false;\n            noteL.note.render_options.draw = false;\n            state.right_shift += xShift;\n            return true;\n        }\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            noteM.note.render_options.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            noteM.note.render_options.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.right_shift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    reset() {\n        super.reset();\n        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        this._noteHeads.forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this._noteHeads.forEach((head) => head.setStave(stave));\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    buildNoteHeads() {\n        this._noteHeads = [];\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            const noteProps = this.sortedKeyProps[i].keyProps;\n            const line = noteProps.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.use_default_head_x = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                note_type: this.noteType,\n                displaced,\n                stem_direction: stemDirection,\n                custom_glyph_code: noteProps.code,\n                glyph_font_scale: this.render_options.glyph_font_scale,\n                x_shift: noteProps.shift_right,\n                stem_up_x_offset: noteProps.stem_up_x_offset,\n                stem_down_x_offset: noteProps.stem_down_x_offset,\n                line: noteProps.line,\n            });\n            this.addChildElement(notehead);\n            this._noteHeads[this.sortedKeyProps[i].index] = notehead;\n        }\n    }\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        this.minLine = this.sortedKeyProps[0].keyProps.line;\n        this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    calculateKeyProps() {\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            if (this.glyphProps.rest)\n                this.glyphProps.position = key;\n            const options = { octave_shift: this.octave_shift || 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            const line = props.line;\n            if (lastLine == undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        this.keyProps.forEach((keyProps, index) => {\n            this.sortedKeyProps.push({ keyProps, index });\n        });\n        this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    getBoundingBox() {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n        const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n        let minY = 0;\n        let maxY = 0;\n        const halfLineSpacing = ((_b = (_a = this.getStave()) === null || _a === void 0 ? void 0 : _a.getSpacingBetweenLines()) !== null && _b !== void 0 ? _b : 0) / 2;\n        const lineSpacing = halfLineSpacing * 2;\n        if (this.isRest()) {\n            const y = this.ys[0];\n            const frac = Tables.durationToFraction(this.duration);\n            if (frac.equals(1) || frac.equals(2)) {\n                minY = y - halfLineSpacing;\n                maxY = y + halfLineSpacing;\n            }\n            else {\n                minY = y - this.glyphProps.line_above * lineSpacing;\n                maxY = y + this.glyphProps.line_below * lineSpacing;\n            }\n        }\n        else if (this.glyphProps.stem) {\n            const ys = this.getStemExtents();\n            ys.baseY += halfLineSpacing * this.getStemDirection();\n            minY = Math.min(ys.topY, ys.baseY);\n            maxY = Math.max(ys.topY, ys.baseY);\n        }\n        else {\n            minY = 0;\n            maxY = 0;\n            for (let i = 0; i < this.ys.length; ++i) {\n                const yy = this.ys[i];\n                if (i === 0) {\n                    minY = yy;\n                    maxY = yy;\n                }\n                else {\n                    minY = Math.min(yy, minY);\n                    maxY = Math.max(yy, maxY);\n                }\n            }\n            minY -= halfLineSpacing;\n            maxY += halfLineSpacing;\n        }\n        return new BoundingBox(x, minY, w, maxY - minY);\n    }\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    isRest() {\n        return this.glyphProps.rest;\n    }\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n        }\n    }\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = this._noteHeads.map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(y_top, y_bottom);\n        }\n        return this;\n    }\n    isDisplaced() {\n        return this.displaced;\n    }\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    getModifierStartXY(position, index, options = {}) {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            x = this.getGlyphWidth() + this.x_shift + 2;\n            if (this.stem_direction === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += (_b = (_a = this === null || this === void 0 ? void 0 : this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().width) !== null && _b !== void 0 ? _b : 0;\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        var _a;\n        (_a = this.flag) === null || _a === void 0 ? void 0 : _a.setStyle(style);\n    }\n    getFlagStyle() {\n        var _a;\n        return (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setKeyStyle(index, style) {\n        this._noteHeads[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    getVoiceShiftWidth() {\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n            width += this.getGlyphWidth();\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    getNoteHeadBounds() {\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        this._noteHeads.forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            y_top: yTop,\n            y_bottom: yBottom,\n            displaced_x: displacedX,\n            non_displaced_x: nonDisplacedX,\n            highest_line: highestLine,\n            lowest_line: lowestLine,\n            highest_displaced_line: highestDisplacedLine,\n            lowest_displaced_line: lowestDisplacedLine,\n            highest_non_displaced_line: highestNonDisplacedLine,\n            lowest_non_displaced_line: lowestNonDisplacedLine,\n        };\n    }\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.x_shift;\n    }\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return this._noteHeads.slice();\n    }\n    get note_heads() {\n        showDeprecationWarningForNoteHeads();\n        return this.noteHeads;\n    }\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { glyphProps, render_options: { stroke_px }, } = this;\n        const ctx = this.checkContext();\n        const width = glyphProps.getWidth() + stroke_px * 2;\n        const doubleWidth = 2 * (glyphProps.getWidth() + stroke_px) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highest_line, lowest_line, highest_displaced_line, highest_non_displaced_line, lowest_displaced_line, lowest_non_displaced_line, displaced_x, non_displaced_x, } = this.getNoteHeadBounds();\n        if (highest_line < 6 && lowest_line > 0)\n            return;\n        const min_x = Math.min(displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0, non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = min_x - stroke_px;\n            else if (normal)\n                x = (non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0) - stroke_px;\n            else\n                x = (displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0) - stroke_px;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        for (let line = 6; line <= highest_line; ++line) {\n            const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n            const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        for (let line = 0; line >= lowest_line; --line) {\n            const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n            const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = this._noteHeads[index];\n            if (notehead == noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.flag == true;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam;\n    }\n    drawFlag() {\n        var _a, _b, _c, _d, _e;\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ?\n                    y_top -\n                        noteStemHeight +\n                        2 -\n                        (this.glyphProps ? this.glyphProps.stem_down_extension : 0) * this.getStaveNoteScale() -\n                        ((_b = (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().y_shift) !== null && _b !== void 0 ? _b : 0) * (1 - this.getStaveNoteScale())\n                :\n                    y_bottom -\n                        noteStemHeight -\n                        2 +\n                        (this.glyphProps ? this.glyphProps.stem_up_extension : 0) * this.getStaveNoteScale() -\n                        ((_d = (_c = this.flag) === null || _c === void 0 ? void 0 : _c.getMetrics().y_shift) !== null && _d !== void 0 ? _d : 0) * (1 - this.getStaveNoteScale());\n            (_e = this.flag) === null || _e === void 0 ? void 0 : _e.render(ctx, flagX, flagY);\n        }\n    }\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        this._noteHeads.forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'), { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    getStaveNoteScale() {\n        return 1.0;\n    }\n    getStemExtension() {\n        const super_stem_extension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return super_stem_extension;\n        }\n        const stem_direction = this.getStemDirection();\n        if (stem_direction !== this.calculateOptimalStemDirection()) {\n            return super_stem_extension;\n        }\n        let mid_line_distance;\n        const MIDDLE_LINE = 3;\n        if (stem_direction === Stem.UP) {\n            mid_line_distance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            mid_line_distance = this.minLine - MIDDLE_LINE;\n        }\n        const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n        if (lines_over_octave_from_mid_line <= 0) {\n            return super_stem_extension;\n        }\n        const stave = this.getStave();\n        let spacing_between_lines = 10;\n        if (stave != undefined) {\n            spacing_between_lines = stave.getSpacingBetweenLines();\n        }\n        return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n    }\n    draw() {\n        if (this.render_options.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\nStaveNote.DEBUG = false;\n", "import { Element } from './element.js';\nimport { RuntimeError } from './util.js';\nexport class StaveTie extends Element {\n    constructor(notes, text) {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.render_options = {\n            cp1: 8,\n            cp2: 12,\n            text_shift_x: 0,\n            first_x_shift: 0,\n            last_x_shift: 0,\n            y_shift: 7,\n            tie_spacing: 0,\n        };\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"StaveTie\";\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices) {\n            notes.first_indices = [0];\n        }\n        if (!notes.last_indices) {\n            notes.last_indices = [0];\n        }\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    isPartial() {\n        return !this.notes.first_note || !this.notes.last_note;\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.render_options.cp1;\n        let cp2 = this.render_options.cp2;\n        if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const first_x_shift = this.render_options.first_x_shift;\n        const last_x_shift = this.render_options.last_x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        const first_indices = this.notes.first_indices;\n        const last_indices = this.notes.last_indices;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < first_indices.length; ++i) {\n            const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n            const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n            const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n            if (isNaN(first_y_px) || isNaN(last_y_px)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n            }\n            const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n            const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n            ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n            ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    renderText(first_x_px, last_x_px) {\n        var _a, _b, _c;\n        if (!this.text)\n            return;\n        const ctx = this.checkContext();\n        let center_x = (first_x_px + last_x_px) / 2;\n        center_x -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.first_note) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.last_note) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.notes.first_note;\n        const last_note = this.notes.last_note;\n        let first_x_px = 0;\n        let last_x_px = 0;\n        let first_ys = [0];\n        let last_ys = [0];\n        let stem_direction = 0;\n        if (first_note) {\n            first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n            stem_direction = first_note.getStemDirection();\n            first_ys = first_note.getYs();\n        }\n        else if (last_note) {\n            const stave = last_note.checkStave();\n            first_x_px = stave.getTieStartX();\n            first_ys = last_note.getYs();\n            this.notes.first_indices = this.notes.last_indices;\n        }\n        if (last_note) {\n            last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n            stem_direction = last_note.getStemDirection();\n            last_ys = last_note.getYs();\n        }\n        else if (first_note) {\n            const stave = first_note.checkStave();\n            last_x_px = stave.getTieEndX();\n            last_ys = first_note.getYs();\n            this.notes.last_indices = this.notes.first_indices;\n        }\n        if (this.direction) {\n            stem_direction = this.direction;\n        }\n        this.renderTie({\n            first_x_px,\n            last_x_px,\n            first_ys,\n            last_ys,\n            direction: stem_direction,\n        });\n        this.renderText(first_x_px, last_x_px);\n        return true;\n    }\n}\nStaveTie.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n", "import { StaveTie } from './stavetie.js';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return \"TabTie\";\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    constructor(notes, text) {\n        super(notes, text);\n        this.render_options.cp1 = 9;\n        this.render_options.cp2 = 11;\n        this.render_options.y_shift = 3;\n        this.direction = -1;\n    }\n}\n", "import { Element } from './element.js';\nimport { Fraction } from './fraction.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\nexport class Voice extends Element {\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        let voiceTime;\n        if (typeof time === 'string') {\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    num_beats: parseInt(match[1]),\n                    beat_value: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        this.time = Object.assign({ num_beats: 4, beat_value: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    static get CATEGORY() {\n        return \"Voice\";\n    }\n    static get Mode() {\n        return VoiceMode;\n    }\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    getMode() {\n        return this.mode;\n    }\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        this.boundingBox = undefined;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getBoundingBox() {\n        if (!this.boundingBox) {\n            const stave = this.checkStave();\n            let boundingBox = undefined;\n            for (let i = 0; i < this.tickables.length; ++i) {\n                const tickable = this.tickables[i];\n                if (!tickable.getStave())\n                    tickable.setStave(stave);\n                const bb = tickable.getBoundingBox();\n                if (bb) {\n                    boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n                }\n            }\n            this.boundingBox = boundingBox;\n        }\n        return this.boundingBox;\n    }\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        return this;\n    }\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n        return this.expTicksUsed;\n    }\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0;\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        let boundingBox = undefined;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            const bb = tickable.getBoundingBox();\n            if (bb) {\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n            }\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n        this.boundingBox = boundingBox;\n    }\n}\n", "import { Beam } from './beam.js';\nimport { Formatter } from './formatter.js';\nimport { Modifier } from './modifier.js';\nimport { StaveNote } from './stavenote.js';\nimport { StaveTie } from './stavetie.js';\nimport { Tables } from './tables.js';\nimport { TabTie } from './tabtie.js';\nimport { isStaveNote } from './typeguard.js';\nimport { log } from './util.js';\nimport { Voice } from './voice.js';\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\nexport class GraceNoteGroup extends Modifier {\n    constructor(grace_notes, show_slur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.grace_notes = grace_notes;\n        this.width = 0;\n        this.show_slur = show_slur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.render_options = {\n            slur_y_shift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.grace_notes);\n        return this;\n    }\n    static get CATEGORY() {\n        return \"GraceNoteGroup\";\n    }\n    static format(gracenote_groups, state) {\n        const group_spacing_stave = 4;\n        const group_spacing_tab = 0;\n        if (!gracenote_groups || gracenote_groups.length === 0)\n            return false;\n        const group_list = [];\n        let prev_note = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenote_groups.length; ++i) {\n            const gracenote_group = gracenote_groups[i];\n            const note = gracenote_group.getNote();\n            const is_stavenote = isStaveNote(note);\n            const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n            if (is_stavenote && note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prev_note = note;\n            }\n            group_list.push({ shift: shiftL, gracenote_group, spacing });\n        }\n        let group_shift = group_list[0].shift;\n        let formatWidth;\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            gracenote_group.preFormat();\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            group_shift = Math.max(formatWidth, group_shift);\n        }\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift) + StaveNote.minNoteheadPadding);\n        }\n        state.left_shift += group_shift;\n        return true;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(grace_notes) {\n        grace_notes = grace_notes || this.grace_notes;\n        if (grace_notes.length > 1) {\n            const beam = new Beam(grace_notes);\n            beam.render_options.beam_width = 3;\n            beam.render_options.partial_beam_length = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.grace_notes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note);\n        this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.show_slur) {\n            const is_stavenote = isStaveNote(note);\n            const TieClass = is_stavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                last_note: this.grace_notes[0],\n                first_note: note,\n                first_indices: [0],\n                last_indices: [0],\n            });\n            this.slur.render_options.cp2 = 12;\n            this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n", "import { Formatter } from './formatter.js';\nimport { Modifier } from './modifier.js';\nimport { Tables } from './tables.js';\nimport { Voice } from './voice.js';\nexport class NoteSubGroup extends Modifier {\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    static get CATEGORY() {\n        return \"NoteSubGroup\";\n    }\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.left_shift += width;\n        return true;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note);\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n", "import { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { TickContext } from './tickcontext.js';\nimport { isTabNote } from './typeguard.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\nexport class Ornament extends Modifier {\n    constructor(type) {\n        super();\n        this.type = type;\n        this.delayed = false;\n        this.render_options = {\n            font_scale: 38,\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        this.ornament = Tables.ornamentCodes(this.type);\n        const metrics = this.getMetrics();\n        this.adjustForStemDirection = false;\n        this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n        this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        if (!this.ornament) {\n            throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n        }\n        this.x_shift = metrics ? metrics.xOffset : 0;\n        this.y_shift = metrics ? metrics.yOffset : 0;\n        this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n            category: `ornament.${this.ornament.code}`,\n        });\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        if (!metrics) {\n            this.glyph.setOrigin(0.5, 1.0);\n        }\n    }\n    static get CATEGORY() {\n        return \"Ornament\";\n    }\n    static get minPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n    }\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0;\n        let right_shift = state.right_shift;\n        let left_shift = state.left_shift;\n        let yOffset = 0;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n                ornament.x_shift += right_shift + 2;\n            }\n            if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n                ornament.x_shift -= left_shift + 2;\n            }\n            if (ornament.reportedWidth && ornament.x_shift < 0) {\n                left_shift += ornament.reportedWidth;\n            }\n            else if (ornament.reportedWidth && ornament.x_shift >= 0) {\n                right_shift += ornament.reportedWidth + Ornament.minPadding;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n            }\n            if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n                const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n                if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n                    state.top_text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset -= ornament.glyph.bbox.getH();\n                }\n                else {\n                    state.text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset += ornament.glyph.bbox.getH();\n                }\n            }\n            else {\n                if (ornament.getPosition() === Modifier.Position.ABOVE) {\n                    ornament.setTextLine(state.top_text_line);\n                    state.top_text_line += increment;\n                }\n                else {\n                    ornament.setTextLine(state.text_line);\n                    state.text_line += increment;\n                }\n            }\n        }\n        state.left_shift = left_shift + width / 2;\n        state.right_shift = right_shift + width / 2;\n        return true;\n    }\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n    }\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    getMetrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n    }\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    setUpperAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalUpper.setOrigin(0.5, 1.0);\n        return this;\n    }\n    setLowerAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalLower.setOrigin(0.5, 1.0);\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDir = note.getStemDirection();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        const stemExtents = note.checkStem().getExtents();\n        let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n        if (isTabNote(note)) {\n            if (note.hasStem()) {\n                if (stemDir === Stem.DOWN) {\n                    y = stave.getYForTopText(this.text_line);\n                }\n            }\n            else {\n                y = stave.getYForTopText(this.text_line);\n            }\n        }\n        const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n        const spacing = stave.getSpacingBetweenLines();\n        let lineSpacing = 1;\n        if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n            lineSpacing += 0.5;\n        }\n        const totalSpacing = spacing * (this.text_line + lineSpacing);\n        const glyphYBetweenLines = y - totalSpacing;\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        let glyphY = this.ornamentAlignWithNoteHead\n            ? start.y\n            : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n        glyphY += this.y_shift;\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = glyphX - (stave.getX() - 10);\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                delayXShift += this.glyph.getMetrics().width / 2;\n                const nextContext = TickContext.getNextContext(note.getTickContext());\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.render(ctx, glyphX, glyphY);\n            glyphY -= this.accidentalLower.getMetrics().height;\n            glyphY -= this.render_options.accidentalLowerPadding;\n        }\n        if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n            glyphY += this.stemUpYOffset;\n        }\n        if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            glyphY = note.checkStave().getBoundingBox().getY() + 40;\n        }\n        this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n            this.accidentalUpper.render(ctx, glyphX, glyphY);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\nOrnament.DEBUG = false;\n", "import { Glyph } from './glyph.js';\nimport { Modifier, ModifierPosition } from './modifier.js';\nimport { Tables } from './tables.js';\nimport { isGraceNote } from './typeguard.js';\nexport class Parenthesis extends Modifier {\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n    }\n    static get CATEGORY() {\n        return \"Parenthesis\";\n    }\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                x_widthR = x_widthR > shift + parenthesis.width ? x_widthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index);\n                x_widthL = x_widthL > shift + parenthesis.width ? x_widthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    setNote(note) {\n        this.note = note;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n        if (isGraceNote(note)) {\n            this.point = Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.point');\n            this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.width'));\n        }\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        const x = start.x + this.x_shift;\n        const y = start.y + this.y_shift;\n        if (this.position == Modifier.Position.RIGHT) {\n            Glyph.renderGlyph(ctx, x + 1, y, this.point, 'noteheadParenthesisRight', {\n                category: `noteHead.standard.noteheadParenthesisRight`,\n            });\n        }\n        else if (this.position == Modifier.Position.LEFT) {\n            Glyph.renderGlyph(ctx, x - 2, y, this.point, 'noteheadParenthesisLeft', {\n                category: `noteHead.standard.noteheadParenthesisLeft`,\n            });\n        }\n    }\n}\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { RenderContext } from './rendercontext.js';\nimport { Tables } from './tables.js';\nimport { normalizeAngle, prefix, RuntimeError } from './util.js';\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n    constructor() {\n        this.cache = {};\n    }\n    lookup(text, svg, attributes) {\n        let entries = this.cache[text];\n        if (entries === undefined) {\n            entries = {};\n            this.cache[text] = entries;\n        }\n        const family = attributes['font-family'];\n        const size = attributes['font-size'];\n        const weight = attributes['font-weight'];\n        const style = attributes['font-style'];\n        const key = `${family}%${size}%${weight}%${style}`;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = this.measureImpl(text, svg, attributes);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n    measureImpl(text, svg, attributes) {\n        let txt = this.txt;\n        if (!txt) {\n            txt = document.createElementNS(SVG_NS, 'text');\n            this.txt = txt;\n        }\n        txt.textContent = text;\n        if (attributes['font-family'])\n            txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n        if (attributes['font-size'])\n            txt.setAttributeNS(null, 'font-size', `${attributes['font-size']}`);\n        if (attributes['font-style'])\n            txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n        if (attributes['font-weight'])\n            txt.setAttributeNS(null, 'font-weight', `${attributes['font-weight']}`);\n        svg.appendChild(txt);\n        const bbox = txt.getBBox();\n        svg.removeChild(txt);\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\n    }\n}\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Font.SANS_SERIF,\n            'font-size': Font.SIZE + 'pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadow_attributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.state_stack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadow_attributes.color = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        this.shadow_attributes.width = blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        this.state.scaleX = x;\n        this.state.scaleY = y;\n        const visibleWidth = this.width / x;\n        const visibleHeight = this.height / y;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    setViewBox(viewBox_or_minX, minY, width, height) {\n        if (typeof viewBox_or_minX === 'string') {\n            this.svg.setAttribute('viewBox', viewBox_or_minX);\n        }\n        else {\n            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length == 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    clear() {\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    rect(x, y, width, height, attributes) {\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    getShadowStyle() {\n        const sa = this.shadow_attributes;\n        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    measureText(text) {\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    save() {\n        this.state_stack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadow_attributes: {\n                width: this.shadow_attributes.width,\n                color: this.shadow_attributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    restore() {\n        const savedState = this.state_stack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadow_attributes.width = state.shadow_attributes.width;\n            this.shadow_attributes.color = state.shadow_attributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    getFont() {\n        return this.fontCSSString;\n    }\n}\nSVGContext.measureTextCache = new MeasureTextCache();\n", "import { CanvasContext } from './canvascontext.js';\nimport { SVGContext } from './svgcontext.js';\nimport { isRenderContext } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nimport { isHTMLCanvas, isHTMLDiv } from './web.js';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\nexport class Renderer {\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 == 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\nRenderer.lastContext = undefined;\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Modifier, ModifierPosition } from './modifier.js';\nimport { Renderer } from './renderer.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { isStaveNote, isStemmableNote } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nexport class StringNumber extends Modifier {\n    constructor(number) {\n        super();\n        this.string_number = number;\n        this.position = Modifier.Position.ABOVE;\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.text_line = 0;\n        this.stem_offset = 0;\n        this.x_offset = 0;\n        this.y_offset = 0;\n        this.dashed = true;\n        this.leg = Renderer.LineEndType.NONE;\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"StringNumber\";\n    }\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.stringNumber;\n    }\n    static format(nums, state) {\n        const left_shift = state.left_shift;\n        const right_shift = state.right_shift;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shift_left = 0;\n        let shift_right = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.text_line = mc.getState().top_text_line;\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.text_line = mc.getState().text_line;\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n                    }\n                    if (right_shift === 0) {\n                        shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n                    }\n                }\n                prev_note = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            nums_list.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: shift_left,\n                shiftR: shift_right,\n            });\n        }\n        nums_list.sort((a, b) => b.line - a.line);\n        let num_shiftR = 0;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        let last_line = null;\n        let last_note = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const note = nums_list[i].note;\n            const pos = nums_list[i].pos;\n            const num = nums_list[i].num;\n            const line = nums_list[i].line;\n            const shiftR = nums_list[i].shiftR;\n            if (line !== last_line || note !== last_note) {\n                num_shiftR = right_shift + shiftR;\n            }\n            const num_width = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift);\n                num_shift = shift_left + num_width;\n                x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(num_shiftR);\n                num_shift += num_width;\n                x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n            }\n            last_line = line;\n            last_note = note;\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.string_number = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.last_note = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let stem_ext = {};\n        if (note.hasStem()) {\n            stem_ext = note.checkStem().getExtents();\n        }\n        let dot_y = start.y + this.y_shift + this.y_offset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.UP) {\n                        dot_y = stem_ext.topY + StringNumber.metrics.stemPadding;\n                    }\n                    dot_y -= this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.DOWN) {\n                        dot_y = stem_ext.topY - StringNumber.metrics.stemPadding;\n                    }\n                    dot_y += this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.radius / 2 + StringNumber.metrics.leftPadding;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += this.radius / 2 + StringNumber.metrics.rightPadding;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.textFont);\n        const x = dot_x - ctx.measureText(this.string_number).width / 2;\n        ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n        const lastNote = this.last_note;\n        if (isStemmableNote(lastNote)) {\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\nStringNumber.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { isNote, isStaveNote, isTabNote } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nexport class Stroke extends Modifier {\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ all_voices: true }, options);\n        this.all_voices = this.options.all_voices;\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.resetFont();\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    static get CATEGORY() {\n        return \"Stroke\";\n    }\n    static format(strokes, state) {\n        const left_shift = state.left_shift;\n        const stroke_spacing = 0;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = left_shift;\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n        }, 0);\n        state.left_shift += xShift;\n        return true;\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.note_end = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let ys = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const line_space = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                ys = note.getYs();\n                for (let n = 0; n < ys.length; n++) {\n                    if (this.note === notes[i] || this.all_voices) {\n                        topY = Math.min(topY, ys[n]);\n                        botY = Math.max(botY, ys[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrow_shift_x = 0;\n        let arrow_y = 0;\n        let text_shift_x = 0;\n        let text_y = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                arrow_y = topY - line_space / 2 + 10;\n                botY += line_space / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = 0.5;\n                arrow_y = botY + line_space / 2;\n                topY -= line_space / 2;\n                break;\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                text_shift_x = this.x_shift + arrow_shift_x - 2;\n                if (isStaveNote(note)) {\n                    topY += 1.5 * line_space;\n                    if ((botY - topY) % 2 !== 0) {\n                        botY += 0.5 * line_space;\n                    }\n                    else {\n                        botY += line_space;\n                    }\n                    arrow_y = topY - line_space;\n                    text_y = botY + line_space + 2;\n                }\n                else {\n                    topY += 1.5 * line_space;\n                    botY += line_space;\n                    arrow_y = topY - 0.75 * line_space;\n                    text_y = botY + 0.25 * line_space;\n                }\n                break;\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = -4;\n                text_shift_x = this.x_shift + arrow_shift_x - 1;\n                if (isStaveNote(note)) {\n                    arrow_y = line_space / 2;\n                    topY += 0.5 * line_space;\n                    if ((botY - topY) % 2 === 0) {\n                        botY += line_space / 2;\n                    }\n                    arrow_y = botY + 0.5 * line_space;\n                    text_y = topY - 1.25 * line_space;\n                }\n                else {\n                    topY += 0.25 * line_space;\n                    botY += 0.5 * line_space;\n                    arrow_y = botY + 0.25 * line_space;\n                    text_y = topY - line_space;\n                }\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY += 0.5 * line_space;\n                botY += line_space;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        let strokeLine = 'straight';\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n        }\n        else {\n            strokeLine = 'wiggly';\n            if (isStaveNote(note)) {\n                for (let i = topY; i <= botY; i += line_space) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n            }\n            else {\n                let i;\n                for (i = topY; i <= botY; i += 10) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n                if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n                    text_y = i + 0.25 * line_space;\n                }\n            }\n        }\n        if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n            return;\n        }\n        Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n            category: `stroke.${arrow}.${strokeLine}`,\n        });\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText('R', x + text_shift_x, text_y);\n            ctx.restore();\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7,\n};\nStroke.TEXT_FONT = {\n    family: Font.SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n", "import { Bend } from './bend.js';\nimport { Modifier } from './modifier.js';\nimport { Tables } from './tables.js';\nexport class Vibrato extends Modifier {\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.render_options = {\n            harsh: false,\n            vibrato_width: 20,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n        };\n        this.setVibratoWidth(this.render_options.vibrato_width);\n    }\n    static get CATEGORY() {\n        return \"Vibrato\";\n    }\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        let text_line = state.top_text_line;\n        let width = 0;\n        let shift = state.right_shift - 7;\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            text_line = text_line - (bendHeight + 1);\n        }\n        else {\n            state.top_text_line += 1;\n        }\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(text_line);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.right_shift += width;\n        return true;\n    }\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    setVibratoWidth(width) {\n        this.render_options.vibrato_width = width;\n        this.setWidth(width);\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x + this.x_shift;\n        const vy = note.getYForTopText(this.text_line) + 2;\n        Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n    }\n    static renderVibrato(ctx, x, y, opts) {\n        const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n        const num_waves = vibrato_width / wave_width;\n        ctx.beginPath();\n        let i;\n        if (harsh) {\n            ctx.moveTo(x, y + wave_girth + 1);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x + wave_width, y - wave_height / 2);\n                x += wave_width;\n                ctx.lineTo(x + wave_width, y + wave_height / 2);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n                ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n        else {\n            ctx.moveTo(x, y + wave_girth);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n                x += wave_width;\n                ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n                ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n    }\n}\n", "import { Accidental } from './accidental.js';\nimport { Annotation } from './annotation.js';\nimport { Articulation } from './articulation.js';\nimport { Bend } from './bend.js';\nimport { ChordSymbol } from './chordsymbol.js';\nimport { Dot } from './dot.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { GraceNoteGroup } from './gracenotegroup.js';\nimport { NoteSubGroup } from './notesubgroup.js';\nimport { Ornament } from './ornament.js';\nimport { Parenthesis } from './parenthesis.js';\nimport { StaveNote } from './stavenote.js';\nimport { StringNumber } from './stringnumber.js';\nimport { Stroke } from './strokes.js';\nimport { log, RuntimeError } from './util.js';\nimport { Vibrato } from './vibrato.js';\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        this.state = {\n            left_shift: 0,\n            right_shift: 0,\n            text_line: 0,\n            top_text_line: 0,\n        };\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.left_shift;\n    }\n    getRightShift() {\n        return this.state.right_shift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.left_shift + this.state.right_shift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        StaveNote.format(members[\"StaveNote\"], state);\n        Parenthesis.format(members[\"Parenthesis\"], state);\n        Dot.format(members[\"Dot\"], state);\n        FretHandFinger.format(members[\"FretHandFinger\"], state);\n        Accidental.format(members[\"Accidental\"], state);\n        Stroke.format(members[\"Stroke\"], state);\n        GraceNoteGroup.format(members[\"GraceNoteGroup\"], state);\n        NoteSubGroup.format(members[\"NoteSubGroup\"], state);\n        StringNumber.format(members[\"StringNumber\"], state);\n        Articulation.format(members[\"Articulation\"], state);\n        Ornament.format(members[\"Ornament\"], state);\n        Annotation.format(members[\"Annotation\"], state);\n        ChordSymbol.format(members[\"ChordSymbol\"], state);\n        Bend.format(members[\"Bend\"], state);\n        Vibrato.format(members[\"Vibrato\"], state, this);\n        this.width = state.left_shift + state.right_shift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        StaveNote.postFormat(this.getMembers(\"StaveNote\"));\n    }\n}\nModifierContext.DEBUG = false;\n", "import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { defined } from './util.js';\nexport class KeySignature extends StaveModifier {\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphFontScale = 38;\n        this.glyphs = [];\n        this.xPositions = [];\n        this.paddingForced = false;\n    }\n    static get CATEGORY() {\n        return \"KeySignature\";\n    }\n    convertToGlyph(acc, nextAcc) {\n        const accGlyphData = Tables.accidentalCodes(acc.type);\n        const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n        let extraWidth = 1;\n        if (acc.type === 'n' && nextAcc) {\n            const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n            if (spacing) {\n                const isAbove = nextAcc.line >= acc.line;\n                extraWidth = isAbove ? spacing.above : spacing.below;\n            }\n        }\n        this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n        this.glyphs.push(glyph);\n        const xPosition = this.xPositions[this.xPositions.length - 1];\n        const glyphWidth = glyph.getMetrics().width + extraWidth;\n        this.xPositions.push(xPosition + glyphWidth);\n        this.width += glyphWidth;\n    }\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        const cancel_accList = Tables.keySignature(spec);\n        const different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n        const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n        if (naturals < 1)\n            return undefined;\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!different_types) {\n                index = cancel_accList.length - naturals + i;\n            }\n            const acc = cancel_accList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancel_accList[0].type,\n        };\n    }\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0;\n        let customLines;\n        switch (clef) {\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.xPositions = [0];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n            }\n        }\n        this.formatted = true;\n    }\n    getGlyphs() {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            const x = this.x + this.xPositions[i];\n            glyph.setStave(stave);\n            glyph.setContext(ctx);\n            glyph.renderToStave(x);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\nKeySignature.accidentalSpacing = {\n    '#': {\n        above: 6,\n        below: 4,\n    },\n    b: {\n        above: 4,\n        below: 7,\n    },\n    n: {\n        above: 4,\n        below: 1,\n    },\n    '##': {\n        above: 6,\n        below: 4,\n    },\n    bb: {\n        above: 4,\n        below: 7,\n    },\n    db: {\n        above: 4,\n        below: 7,\n    },\n    d: {\n        above: 4,\n        below: 7,\n    },\n    bbs: {\n        above: 4,\n        below: 7,\n    },\n    '++': {\n        above: 6,\n        below: 4,\n    },\n    '+': {\n        above: 6,\n        below: 4,\n    },\n    '+-': {\n        above: 6,\n        below: 4,\n    },\n    '++-': {\n        above: 6,\n        below: 4,\n    },\n    bs: {\n        above: 4,\n        below: 10,\n    },\n    bss: {\n        above: 4,\n        below: 10,\n    },\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { StaveModifier } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nexport class Repetition extends StaveModifier {\n    constructor(type, x, y_shift) {\n        super();\n        this.symbol_type = type;\n        this.x = x;\n        this.x_shift = 0;\n        this.y_shift = y_shift;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"Repetition\";\n    }\n    setShiftX(x) {\n        this.x_shift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbol_type) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSignoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSignoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.coda.offsetY'), 40, 'coda', { category: 'coda' });\n        return this;\n    }\n    drawSignoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.segno.offsetY'), 30, 'segno', { category: 'segno' });\n        return this;\n    }\n    drawSymbolText(stave, x, text, draw_coda) {\n        const ctx = stave.checkContext();\n        ctx.save();\n        ctx.setFont(this.textFont);\n        let text_x = 0;\n        let symbol_x = 0;\n        const modifierWidth = stave.getNoteStartX() - this.x;\n        switch (this.symbol_type) {\n            case Repetition.type.CODA_LEFT:\n                text_x = this.x + stave.getVerticalBarWidth();\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                break;\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width;\n                break;\n            default:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                break;\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) +\n            this.y_shift +\n            Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetY');\n        if (draw_coda) {\n            Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n        }\n        ctx.fillText(text, text_x, y + 5);\n        ctx.restore();\n        return this;\n    }\n}\nRepetition.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { StaveModifier } from './stavemodifier.js';\nimport { TextFormatter } from './textformatter.js';\nexport class StaveSection extends StaveModifier {\n    constructor(section, x, shift_y, drawRect = true) {\n        super();\n        this.setWidth(16);\n        this.section = section;\n        this.x = x;\n        this.shift_x = 0;\n        this.shift_y = shift_y;\n        this.drawRect = drawRect;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"StaveSection\";\n    }\n    setStaveSection(section) {\n        this.section = section;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        ctx.setFont(this.textFont);\n        const textFormatter = TextFormatter.create(this.textFont);\n        const textWidth = textFormatter.getWidthForTextInPx(this.section);\n        const textY = textFormatter.getYForStringInPx(this.section);\n        const textHeight = textY.height;\n        const headroom = -1 * textY.yMin;\n        const width = textWidth + 2 * padding;\n        const height = textHeight + 2 * padding;\n        const y = stave.getYForTopText(1.5) + this.shift_y;\n        const x = this.x + shift_x;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        ctx.fillText(this.section, x + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\nStaveSection.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TextFormatter } from './textformatter.js';\nexport class StaveTempo extends StaveModifier {\n    constructor(tempo, x, shift_y) {\n        super();\n        this.render_options = { glyph_font_scale: 30 };\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.shift_x = 10;\n        this.shift_y = shift_y;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"StaveTempo\";\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const options = this.render_options;\n        const scale = options.glyph_font_scale / 38;\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = this.tempo.dots || 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + this.shift_x + shift_x;\n        const y = stave.getYForTopText(1) + this.shift_y;\n        ctx.save();\n        const textFormatter = TextFormatter.create(this.textFont);\n        if (name) {\n            ctx.setFont(this.textFont);\n            ctx.fillText(name, x, y);\n            x += textFormatter.getWidthForTextInPx(name);\n        }\n        if (duration && bpm) {\n            const noteTextFont = Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' });\n            ctx.setFont(noteTextFont);\n            const noteTextFormatter = TextFormatter.create(noteTextFont);\n            if (name) {\n                x += noteTextFormatter.getWidthForTextInPx('|');\n                ctx.fillText('(', x, y);\n                x += noteTextFormatter.getWidthForTextInPx('(');\n            }\n            const glyphProps = Tables.getGlyphProps(duration);\n            x += 3 * scale;\n            Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, glyphProps.code_head);\n            x += glyphProps.getWidth ? glyphProps.getWidth() : 0 * scale;\n            if (glyphProps.stem) {\n                let stem_height = 30;\n                if (glyphProps.beam_count)\n                    stem_height += 3 * (glyphProps.beam_count - 1);\n                stem_height *= scale;\n                const y_top = y - stem_height;\n                ctx.fillRect(x - scale, y_top, scale, stem_height);\n                if (glyphProps.code && glyphProps.code_flag_upstem) {\n                    const flagMetrics = Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, glyphProps.code_flag_upstem, {\n                        category: 'flag.staveTempo',\n                    });\n                    x += (flagMetrics.width * Tables.NOTATION_FONT_SCALE) / flagMetrics.font.getData().resolution;\n                }\n            }\n            for (let i = 0; i < dots; i++) {\n                x += 6 * scale;\n                ctx.beginPath();\n                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n                ctx.fill();\n            }\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n        }\n        ctx.restore();\n        return this;\n    }\n}\nStaveTempo.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 14,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { RuntimeError } from './util.js';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\nexport class TextNote extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.text = noteStruct.text || '';\n        this.superscript = noteStruct.superscript;\n        this.subscript = noteStruct.subscript;\n        this.setFont(noteStruct.font);\n        this.line = noteStruct.line || 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignore_ticks = noteStruct.ignore_ticks || false;\n        this.justification = TextJustification.LEFT;\n        if (noteStruct.glyph) {\n            const struct = TextNote.GLYPHS[noteStruct.glyph];\n            if (!struct)\n                throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n            this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n            this.setWidth(this.glyph.getMetrics().width);\n        }\n        else {\n            this.glyph = undefined;\n        }\n    }\n    static get CATEGORY() {\n        return \"TextNote\";\n    }\n    static get GLYPHS() {\n        return {\n            segno: {\n                code: 'segno',\n            },\n            tr: {\n                code: 'ornamentTrill',\n            },\n            mordent: {\n                code: 'ornamentMordent',\n            },\n            mordent_upper: {\n                code: 'ornamentShortTrill',\n            },\n            mordent_lower: {\n                code: 'ornamentMordent',\n            },\n            f: {\n                code: 'dynamicForte',\n            },\n            p: {\n                code: 'dynamicPiano',\n            },\n            m: {\n                code: 'dynamicMezzo',\n            },\n            s: {\n                code: 'dynamicSforzando',\n            },\n            z: {\n                code: 'dynamicZ',\n            },\n            coda: {\n                code: 'coda',\n            },\n            pedal_open: {\n                code: 'keyboardPedalPed',\n            },\n            pedal_close: {\n                code: 'keyboardPedalUp',\n            },\n            caesura_straight: {\n                code: 'caesura',\n            },\n            caesura_curved: {\n                code: 'caesuraCurved',\n            },\n            breath: {\n                code: 'breathMarkComma',\n            },\n            tick: {\n                code: 'breathMarkTick',\n            },\n            turn: {\n                code: 'ornamentTurn',\n            },\n            turn_inverted: {\n                code: 'ornamentTurnSlash',\n            },\n        };\n    }\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    getLine() {\n        return this.line;\n    }\n    getText() {\n        return this.text;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.smooth) {\n            this.setWidth(0);\n        }\n        else {\n            if (this.glyph) {\n            }\n            else {\n                const ctx = this.checkContext();\n                ctx.setFont(this.textFont);\n                this.setWidth(ctx.measureText(this.text).width);\n            }\n        }\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        let y;\n        if (this.glyph) {\n            y = stave.getYForLine(this.line + -3);\n            this.glyph.render(ctx, x, y);\n        }\n        else {\n            y = stave.getYForLine(this.line + -3);\n            this.applyStyle(ctx);\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, x, y);\n            const height = ctx.measureText(this.text).height;\n            const { family, size, weight, style } = this.textFont;\n            const smallerFontSize = Font.scaleSize(size, 0.769231);\n            if (this.superscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n            }\n            if (this.subscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n            }\n            this.restoreStyle(ctx);\n        }\n    }\n}\nTextNote.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 12,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nTextNote.Justification = TextJustification;\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { TextJustification, TextNote } from './textnote.js';\nimport { RuntimeError } from './util.js';\nexport class StaveText extends StaveModifier {\n    constructor(text, position, options = {}) {\n        super();\n        this.setWidth(16);\n        this.text = text;\n        this.position = position;\n        this.options = Object.assign({ shift_x: 0, shift_y: 0, justification: TextNote.Justification.CENTER }, options);\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"StaveText\";\n    }\n    setStaveText(text) {\n        this.text = text;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        const text_width = ctx.measureText('' + this.text).width;\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - text_width - 24 + this.options.shift_x;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX() + this.options.shift_x;\n                if (this.options.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - text_width / 2;\n                }\n                else if (this.options.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - text_width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2) + this.options.shift_y;\n                }\n                else {\n                    y = stave.getYForBottomText(2) + this.options.shift_y;\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        ctx.fillText('' + this.text, x, y + 4);\n        ctx.restore();\n        return this;\n    }\n}\nStaveText.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { StaveModifier } from './stavemodifier.js';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    constructor(type, number, x, y_shift) {\n        super();\n        this.volta = type;\n        this.x = x;\n        this.y_shift = y_shift;\n        this.number = number;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"Volta\";\n    }\n    static get type() {\n        return VoltaType;\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x;\n        const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        const vert_height = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.volta) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            default:\n                break;\n        }\n        if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n            ctx.restore();\n        }\n        ctx.fillRect(this.x + x, top_y, width, 1);\n        return this;\n    }\n}\nVolta.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n", "import { Glyph } from './glyph.js';\nimport { defined } from './util.js';\nexport class TimeSignatureGlyph extends Glyph {\n    constructor(timeSignature, topDigits, botDigits, code, point, options) {\n        var _a;\n        super(code, point, options);\n        this.timeSignature = timeSignature;\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        let topWidth = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            let timeSigType = topDigits[i];\n            switch (topDigits[i]) {\n                case '-':\n                    timeSigType = 'Minus';\n                    break;\n                case '+':\n                    timeSigType = botDigits.length > 0 ? 'PlusSmall' : 'Plus';\n                    break;\n                case '(':\n                    timeSigType = botDigits.length > 0 ? 'ParensLeftSmall' : 'ParensLeft';\n                    break;\n                case ')':\n                    timeSigType = botDigits.length > 0 ? 'ParensRightSmall' : 'ParensRight';\n                    break;\n            }\n            const topGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.topGlyphs.push(topGlyph);\n            topWidth += (_a = topGlyph.getMetrics().width) !== null && _a !== void 0 ? _a : 0;\n        }\n        let botWidth = 0;\n        for (let i = 0; i < botDigits.length; ++i) {\n            let timeSigType = botDigits[i];\n            switch (botDigits[i]) {\n                case '+':\n                    timeSigType = 'PlusSmall';\n                    break;\n                case '(':\n                    timeSigType = 'ParensLeftSmall';\n                    break;\n                case ')':\n                    timeSigType = 'ParensRightSmall';\n                    break;\n            }\n            const botGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.botGlyphs.push(botGlyph);\n            botWidth += defined(botGlyph.getMetrics().width);\n        }\n        this.width = Math.max(topWidth, botWidth);\n        this.xMin = this.getMetrics().x_min;\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n        this.reset();\n    }\n    getMetrics() {\n        return {\n            x_min: this.xMin,\n            x_max: this.xMin + this.width,\n            width: this.width,\n        };\n    }\n    renderToStave(x) {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        let start_x = x + this.topStartX;\n        let y = 0;\n        if (this.botGlyphs.length > 0)\n            y = stave.getYForLine(this.timeSignature.topLine);\n        else\n            y = (stave.getYForLine(this.timeSignature.topLine) + stave.getYForLine(this.timeSignature.bottomLine)) / 2;\n        for (let i = 0; i < this.topGlyphs.length; ++i) {\n            const glyph = this.topGlyphs[i];\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + this.x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n        start_x = x + this.botStartX;\n        y = stave.getYForLine(this.timeSignature.bottomLine);\n        for (let i = 0; i < this.botGlyphs.length; ++i) {\n            const glyph = this.botGlyphs[i];\n            this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + glyph.getMetrics().x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n    }\n}\n", "import { Glyph } from './glyph.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignatureGlyph } from './timesigglyph.js';\nimport { defined, RuntimeError } from './util.js';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        if (/^[0-9+\\-()]+$/.test(number) == false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\nexport class TimeSignature extends StaveModifier {\n    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {\n        super();\n        this.validate_args = validate_args;\n        const padding = customPadding;\n        const musicFont = Tables.currentMusicFont();\n        this.point = musicFont.lookupMetric('digits.point');\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.topLine = 2 + fontLineShift;\n        this.bottomLine = 4 + fontLineShift;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.info = this.parseTimeSpec(timeSpec);\n        this.setWidth(defined(this.info.glyph.getMetrics().width));\n        this.setPadding(padding);\n    }\n    static get CATEGORY() {\n        return \"TimeSignature\";\n    }\n    static get glyphs() {\n        return {\n            C: {\n                code: 'timeSigCommon',\n                point: 40,\n                line: 2,\n            },\n            'C|': {\n                code: 'timeSigCutCommon',\n                point: 40,\n                line: 2,\n            },\n        };\n    }\n    parseTimeSpec(timeSpec) {\n        var _a, _b;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const { line, code, point } = TimeSignature.glyphs[timeSpec];\n            return {\n                line,\n                num: false,\n                glyph: new Glyph(code, point),\n            };\n        }\n        if (this.validate_args) {\n            assertIsValidTimeSig(timeSpec);\n        }\n        const parts = timeSpec.split('/');\n        return {\n            num: true,\n            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),\n        };\n    }\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n    }\n    getInfo() {\n        return this.info;\n    }\n    setTimeSig(timeSpec) {\n        this.info = this.parseTimeSpec(timeSpec);\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        this.info.glyph.setStave(stave);\n        this.info.glyph.setContext(ctx);\n        this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n        this.info.glyph.renderToStave(this.x);\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n", "import { BoundingBox } from './boundingbox.js';\nimport { Clef } from './clef.js';\nimport { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { KeySignature } from './keysignature.js';\nimport { Barline, BarlineType } from './stavebarline.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Repetition } from './staverepetition.js';\nimport { StaveSection } from './stavesection.js';\nimport { StaveTempo } from './stavetempo.js';\nimport { StaveText } from './stavetext.js';\nimport { Volta } from './stavevolta.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    constructor(x, y, width, options) {\n        super();\n        this.height = 0;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.start_x = x + 5;\n        this.end_x = x + width;\n        this.modifiers = [];\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.resetFont();\n        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n        this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    static get CATEGORY() {\n        return \"Stave\";\n    }\n    static get defaultPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    static get rightPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacing_between_lines_px * spacing;\n    }\n    resetLines() {\n        this.options.line_config = [];\n        for (let i = 0; i < this.options.num_lines; i++) {\n            this.options.line_config.push({ visible: true });\n        }\n        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n        this.options.bottom_text_position = this.options.num_lines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.start_x = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.start_x;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.end_x;\n    }\n    getTieStartX() {\n        return this.start_x;\n    }\n    getTieEndX() {\n        return this.end_x;\n    }\n    getX() {\n        return this.x;\n    }\n    getNumLines() {\n        return this.options.num_lines;\n    }\n    setNumLines(n) {\n        this.options.num_lines = n;\n        this.resetLines();\n        return this;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    getY() {\n        return this.y;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.start_x += shift;\n        this.end_x += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.end_x = this.x + width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    getMeasure() {\n        return this.measure;\n    }\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let start_x = this.start_x - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n            start_x -= begBarline.getWidth();\n        }\n        return start_x;\n    }\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    setVoltaType(type, number_t, y) {\n        this.modifiers.push(new Volta(type, number_t, this.x, y));\n        return this;\n    }\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize)\n            staveSection.setFontSize(fontSize);\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    setText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacing_between_lines_px;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n        return score_bottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.num_lines);\n    }\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.top_text_position);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottom_text_position + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    setBegBarType(type) {\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.start_x = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = layoutMetrics.xMax || 0;\n                    widths.paddingRight = layoutMetrics.paddingRight || 0;\n                }\n                widths.left = -layoutMetrics.xMin || 0;\n                widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const num_lines = this.options.num_lines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        for (let line = 0; line < num_lines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.line_config[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.vertical_bar_width;\n    }\n    getConfigForLines() {\n        return this.options.line_config;\n    }\n    setConfigForLine(line_number, line_config) {\n        if (line_number >= this.options.num_lines || line_number < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (line_config.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof line_config.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.line_config[line_number] = line_config;\n        return this;\n    }\n    setConfigForLines(lines_configuration) {\n        if (lines_configuration.length !== this.options.num_lines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        for (const line_config in lines_configuration) {\n            if (lines_configuration[line_config].visible == undefined) {\n                lines_configuration[line_config] = this.options.line_config[line_config];\n            }\n            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\n        }\n        this.options.line_config = lines_configuration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        let maxX = 0;\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"Barline\");\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n        maxX = 0;\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"TimeSignature\");\n            modifiers.forEach((modifier) => {\n                if (modifier.getX() > maxX)\n                    maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, \"TimeSignature\");\n            modifiers.forEach((modifier) => {\n                modifier.setX(maxX);\n            });\n        });\n    }\n}\nStave.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 8,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n", "import { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let x_shift = 3;\n    let variableWidth = 3.5;\n    const thickLineOffset = 2;\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        x_shift = -5;\n        variableWidth = 3;\n    }\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\nexport class StaveConnector extends Element {\n    constructor(top_stave, bottom_stave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.width = 3;\n        this.top_stave = top_stave;\n        this.bottom_stave = bottom_stave;\n        this.type = StaveConnector.type.DOUBLE;\n        this.resetFont();\n        this.x_shift = 0;\n        this.texts = [];\n    }\n    static get CATEGORY() {\n        return \"StaveConnector\";\n    }\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    getType() {\n        return this.type;\n    }\n    setText(text, options = {}) {\n        this.texts.push({\n            content: text,\n            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),\n        });\n        return this;\n    }\n    setXShift(x_shift) {\n        if (typeof x_shift !== 'number') {\n            throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n        }\n        this.x_shift = x_shift;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.top_stave.getYForLine(0);\n        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n        let width = this.width;\n        let topX = this.top_stave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.top_stave.getX() + this.top_stave.getWidth();\n        }\n        let attachment_height = botY - topY;\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= this.width + 2;\n                topY -= this.thickness;\n                attachment_height += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                const x1 = this.top_stave.getX() - 2 + this.x_shift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachment_height / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachment_height;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachment_height;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachment_height;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachment_height;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachment_height;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachment_height;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachment_height = botY - topY;\n                Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n                Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n                topX -= this.width + 2;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachment_height -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachment_height);\n        }\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachment_height);\n        }\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        for (let i = 0; i < this.texts.length; i++) {\n            const text = this.texts[i];\n            const text_width = ctx.measureText('' + text.content).width;\n            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n            ctx.fillText('' + text.content, x, y + 4);\n        }\n        ctx.restore();\n    }\n}\nStaveConnector.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n", "import { Beam } from './beam.js';\nimport { Font } from './font.js';\nimport { Fraction } from './fraction.js';\nimport { ModifierContext } from './modifiercontext.js';\nimport { Stave } from './stave.js';\nimport { StaveConnector } from './staveconnector.js';\nimport { Tables } from './tables.js';\nimport { TickContext } from './tickcontext.js';\nimport { isNote, isStaveNote } from './typeguard.js';\nimport { defined, log, midLine, RuntimeError } from './util.js';\nimport { Voice } from './voice.js';\nconst sumArray = (arr) => arr.reduce((a, b) => a + b, 0);\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length == 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    voices.forEach((voice, voiceIndex) => {\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                tickList.push(integerTicks);\n            }\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    let nextRestLine = currRestLine;\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\nexport class Formatter {\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        this.minTotalWidth = 0;\n        this.hasMinTotalWidth = false;\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        options = Object.assign({ stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            auto_beam: false,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.auto_beam = params;\n        }\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n        new Formatter()\n            .joinVoices([voice])\n            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        return voice.getBoundingBox();\n    }\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n        let opts = {\n            auto_beam: autobeam,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.auto_beam = params;\n        }\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n        new Formatter()\n            .joinVoices([notevoice])\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                const position = currTickable.getGlyphProps().position.toUpperCase();\n                if (position !== 'R/4' && position !== 'B/4') {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    createModifierContexts(voices) {\n        if (voices.length == 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        const tickToContextMap = new Map();\n        const contexts = [];\n        voices.forEach((voice) => {\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        this.lossHistory = [];\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            shift = width - metrics.totalLeftPx;\n        });\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const musicFont = Tables.currentMusicFont();\n        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n        const leftPadding = musicFont.lookupMetric('stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ align_rests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.align_rests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\nFormatter.DEBUG = false;\n", "import { StemmableNote } from './stemmablenote.js';\nimport { isAnnotation } from './typeguard.js';\nimport { RuntimeError } from './util.js';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return \"GhostNote\";\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        this.setWidth(0);\n    }\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    addToModifierContext(mc) {\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n", "import { Note } from './note.js';\nexport class GlyphNote extends Note {\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        this.ignore_ticks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    static get CATEGORY() {\n        return \"GlyphNote\";\n    }\n    setGlyph(glyph) {\n        this.glyph = glyph;\n        this.setWidth(this.glyph.getMetrics().width);\n        return this;\n    }\n    getBoundingBox() {\n        return this.glyph.getBoundingBox();\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    getGlyphWidth() {\n        return this.glyph.getMetrics().width;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        const glyph = this.glyph;\n        if (!glyph.getContext()) {\n            glyph.setContext(ctx);\n        }\n        glyph.setStave(stave);\n        glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        glyph.renderToStave(x);\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n", "import { StaveNote } from './stavenote.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class GraceNote extends StaveNote {\n    constructor(noteStruct) {\n        super(Object.assign({ glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    static get CATEGORY() {\n        return \"GraceNote\";\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    static get SCALE() {\n        return 0.66;\n    }\n    getStemExtension() {\n        if (this.stem_extension_override) {\n            return this.stem_extension_override;\n        }\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            let ret = super.getStemExtension();\n            if (glyphProps.stem) {\n                const staveNoteScale = this.getStaveNoteScale();\n                ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n            }\n            return ret;\n        }\n        return 0;\n    }\n    getStaveNoteScale() {\n        return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const staveNoteScale = this.getStaveNoteScale();\n            const offsetScale = staveNoteScale / 0.66;\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n                    stem: 6 * offsetScale,\n                    beam: 5 * offsetScale,\n                });\n            }\n            else {\n                const stem_direction = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteStemHeight = stem.getHeight();\n                let x = this.getAbsoluteX();\n                let y = stem_direction === Stem.DOWN\n                    ? noteHeadBounds.y_top - noteStemHeight\n                    : noteHeadBounds.y_bottom - noteStemHeight;\n                const defaultStemExtention = stem_direction === Stem.DOWN ? this.glyphProps.stem_down_extension : this.glyphProps.stem_up_extension;\n                let defaultOffsetY = Tables.STEM_HEIGHT;\n                defaultOffsetY -= defaultOffsetY / 2.8;\n                defaultOffsetY += defaultStemExtention;\n                y += defaultOffsetY * staveNoteScale * stem_direction;\n                const offsets = stem_direction === Stem.UP\n                    ? {\n                        x1: 1,\n                        y1: 0,\n                        x2: 13,\n                        y2: -9,\n                    }\n                    : {\n                        x1: -4,\n                        y1: 1,\n                        x2: 13,\n                        y2: 9,\n                    };\n                x += offsets.x1 * offsetScale;\n                y += offsets.y1 * offsetScale;\n                slashBBox = {\n                    x1: x,\n                    y1: y,\n                    x2: x + offsets.x2 * offsetScale,\n                    y2: y + offsets.y2 * offsetScale,\n                };\n            }\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * offsetScale);\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beam_slope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beam_angle = Math.atan(beam_slope * scaleX);\n        const iPointOnBeam = {\n            dx: Math.cos(beam_angle) * slashBeamOffset,\n            dy: Math.sin(beam_angle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n        const ret = {\n            x1: stemX - protrusion_stem_dx,\n            y1: stemY + slashStemOffset - protrusion_stem_dy,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n        };\n        return ret;\n    }\n}\n", "import { KeySignature } from './keysignature.js';\nimport { Note } from './note.js';\nexport class KeySigNote extends Note {\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return \"KeySigNote\";\n    }\n    addToModifierContext(mc) {\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n", "import { Element } from './element.js';\nimport { Glyph } from './glyph.js';\nimport { NoteHead } from './notehead.js';\nimport { StaveModifierPosition } from './stavemodifier.js';\nimport { Tables } from './tables.js';\nimport { TimeSignature } from './timesignature.js';\nimport { isBarline } from './typeguard.js';\nimport { defined } from './util.js';\nlet semibreve_rest;\nfunction get_semibreve_rest() {\n    if (!semibreve_rest) {\n        const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n        semibreve_rest = {\n            glyph_font_scale: noteHead.render_options.glyph_font_scale,\n            glyph_code: noteHead.glyph_code,\n            width: noteHead.getWidth(),\n        };\n    }\n    return semibreve_rest;\n}\nexport class MultiMeasureRest extends Element {\n    constructor(number_of_measures, options) {\n        super();\n        this.xs = { left: NaN, right: NaN };\n        this.hasPaddingLeft = false;\n        this.hasPaddingRight = false;\n        this.hasLineThickness = false;\n        this.hasSymbolSpacing = false;\n        this.number_of_measures = number_of_measures;\n        this.hasPaddingLeft = typeof options.padding_left === 'number';\n        this.hasPaddingRight = typeof options.padding_right === 'number';\n        this.hasLineThickness = typeof options.line_thickness === 'number';\n        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n        const musicFont = Tables.currentMusicFont();\n        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: musicFont.lookupMetric('digits.point'), line: 2, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.render_options.number_line += fontLineShift;\n    }\n    static get CATEGORY() {\n        return \"MultiMeasureRest\";\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\n        const options = this.render_options;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let lineThicknessHalf;\n        if (this.hasLineThickness) {\n            lineThicknessHalf = options.line_thickness * 0.5;\n        }\n        else {\n            lineThicknessHalf = spacingBetweenLines * 0.25;\n        }\n        const serifThickness = options.serif_thickness;\n        const top = y - spacingBetweenLines;\n        const bot = y + spacingBetweenLines;\n        const leftIndented = left + serifThickness;\n        const rightIndented = right - serifThickness;\n        const lineTop = y - lineThicknessHalf;\n        const lineBottom = y + lineThicknessHalf;\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(left, top);\n        ctx.lineTo(leftIndented, top);\n        ctx.lineTo(leftIndented, lineTop);\n        ctx.lineTo(rightIndented, lineTop);\n        ctx.lineTo(rightIndented, top);\n        ctx.lineTo(right, top);\n        ctx.lineTo(right, bot);\n        ctx.lineTo(rightIndented, bot);\n        ctx.lineTo(rightIndented, lineBottom);\n        ctx.lineTo(leftIndented, lineBottom);\n        ctx.lineTo(leftIndented, bot);\n        ctx.lineTo(left, bot);\n        ctx.closePath();\n        ctx.fill();\n    }\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n        const n4 = Math.floor(this.number_of_measures / 4);\n        const n = this.number_of_measures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.render_options;\n        semibreve_rest = undefined;\n        const rest = get_semibreve_rest();\n        const rest_scale = options.semibreve_rest_glyph_scale;\n        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n        const glyphs = {\n            2: {\n                width: rest_width * 0.5,\n                height: spacingBetweenLines,\n            },\n            1: {\n                width: rest_width,\n            },\n        };\n        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        const yBottom = stave.getYForLine(line + 1);\n        ctx.save();\n        ctx.setStrokeStyle('none');\n        ctx.setLineWidth(0);\n        for (let i = 0; i < n4; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n2; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n1; ++i) {\n            Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n            x += glyphs[1].width + spacing;\n        }\n        ctx.restore();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.render_options;\n        if (this.hasPaddingLeft) {\n            left = stave.getX() + options.padding_left;\n        }\n        if (this.hasPaddingRight) {\n            right = stave.getX() + stave.getWidth() - options.padding_right;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        const spacingBetweenLines = options.spacing_between_lines_px;\n        if (options.use_symbols) {\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n        }\n        if (options.show_number) {\n            const timeSpec = '/' + this.number_of_measures;\n            const timeSig = new TimeSignature(timeSpec, 0, false);\n            timeSig.point = options.number_glyph_point;\n            timeSig.setTimeSig(timeSpec);\n            timeSig.setStave(stave);\n            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n            timeSig.bottomLine = options.number_line;\n            timeSig.setContext(ctx).draw();\n        }\n    }\n}\n", "import { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Tables } from './tables.js';\nimport { log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\nfunction drawPedalGlyph(name, context, x, y, point) {\n    const glyph_data = PedalMarking.GLYPHS[name];\n    const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\nexport class PedalMarking extends Element {\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        this.custom_depress_text = '';\n        this.custom_release_text = '';\n        this.resetFont();\n        this.render_options = {\n            bracket_height: 10,\n            text_margin_right: 6,\n            bracket_line_width: 1,\n            color: 'black',\n        };\n    }\n    static get CATEGORY() {\n        return \"PedalMarking\";\n    }\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    setCustomText(depress, release) {\n        this.custom_depress_text = depress || '';\n        this.custom_release_text = release || '';\n        return this;\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        let prev_x;\n        let prev_y;\n        this.notes.forEach((note, index, notes) => {\n            is_pedal_depressed = !is_pedal_depressed;\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            if (x < prev_x) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            const next_is_same = notes[index + 1] === note;\n            const prev_is_same = notes[index - 1] === note;\n            let x_shift = 0;\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            if (is_pedal_depressed) {\n                x_shift = prev_is_same ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n                    if (this.custom_depress_text) {\n                        const text_width = ctx.measureText(this.custom_depress_text).width;\n                        ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                        x_shift = text_width / 2 + this.render_options.text_margin_right;\n                    }\n                    else {\n                        drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                        x_shift = 20 + this.render_options.text_margin_right;\n                    }\n                }\n                else {\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.render_options.bracket_height);\n                    ctx.lineTo(x + x_shift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                x_shift = next_is_same ? -5 : 0;\n                ctx.beginPath();\n                ctx.moveTo(prev_x, prev_y);\n                ctx.lineTo(x + x_shift, y);\n                ctx.lineTo(x, y - this.render_options.bracket_height);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            prev_x = x + x_shift;\n            prev_y = y;\n        });\n    }\n    drawText() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        this.notes.forEach((note) => {\n            is_pedal_depressed = !is_pedal_depressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            let text_width = 0;\n            if (is_pedal_depressed) {\n                if (this.custom_depress_text) {\n                    text_width = ctx.measureText(this.custom_depress_text).width;\n                    ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                }\n            }\n            else {\n                if (this.custom_release_text) {\n                    text_width = ctx.measureText(this.custom_release_text).width;\n                    ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_release', ctx, x, y, point);\n                }\n            }\n        });\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.render_options.color);\n        ctx.setFillStyle(this.render_options.color);\n        ctx.setFont(this.textFont);\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.render_options.bracket_line_width);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\nPedalMarking.DEBUG = false;\nPedalMarking.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\nPedalMarking.GLYPHS = {\n    pedal_depress: {\n        code: 'keyboardPedalPed',\n        x_shift: -10,\n        y_shift: 0,\n    },\n    pedal_release: {\n        code: 'keyboardPedalUp',\n        x_shift: -2,\n        y_shift: 3,\n    },\n};\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n", "import { Glyph } from './glyph.js';\nimport { GlyphNote } from './glyphnote.js';\nimport { Tables } from './tables.js';\nconst CODES = {\n    '1': 'repeat1Bar',\n    '2': 'repeat2Bars',\n    '4': 'repeat4Bars',\n    slash: 'repeatBarSlash',\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return \"RepeatNote\";\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || 'repeat1Bar';\n        const glyph = new Glyph(glyphCode, Tables.currentMusicFont().lookupMetric('repeatNote.point', 40), {\n            category: 'repeatNote',\n        });\n        super(glyph, Object.assign({ duration: 'q', align_center: type !== 'slash' }, noteStruct), options);\n    }\n}\n", "import { Element } from './element.js';\nimport { Tables } from './tables.js';\nimport { TextJustification } from './textnote.js';\nimport { RuntimeError } from './util.js';\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.resetFont();\n        this.render_options = {\n            padding_left: 4,\n            padding_right: 3,\n            line_width: 1,\n            line_dash: undefined,\n            rounded_end: true,\n            color: undefined,\n            draw_start_arrow: false,\n            draw_end_arrow: false,\n            arrowhead_length: 10,\n            arrowhead_angle: Math.PI / 8,\n            text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n            text_justification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    static get CATEGORY() {\n        return \"StaveLine\";\n    }\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices)\n            notes.first_indices = [0];\n        if (!notes.last_indices)\n            notes.last_indices = [0];\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.first_indices = notes.first_indices;\n        this.last_note = notes.last_note;\n        this.last_indices = notes.last_indices;\n        return this;\n    }\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const render_options = this.render_options;\n        if (render_options.line_dash) {\n            ctx.setLineDash(render_options.line_dash);\n        }\n        if (render_options.line_width) {\n            ctx.setLineWidth(render_options.line_width);\n        }\n        if (render_options.rounded_end) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        const render_options = this.render_options;\n        const color = render_options.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    drawArrowLine(ctx, pt1, pt2) {\n        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n        let end_x;\n        let end_y;\n        let start_x;\n        let start_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            end_x = Math.round(x1 + (x2 - x1) * ratio);\n            end_y = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            end_x = x2;\n            end_y = y2;\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            start_x = x1 + (x2 - x1) * (1 - ratio);\n            start_y = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            start_x = x1;\n            start_y = y1;\n        }\n        if (this.render_options.color) {\n            ctx.setStrokeStyle(this.render_options.color);\n            ctx.setFillStyle(this.render_options.color);\n        }\n        ctx.beginPath();\n        ctx.moveTo(start_x, start_y);\n        ctx.lineTo(end_x, end_y);\n        ctx.stroke();\n        ctx.closePath();\n        const line_angle = Math.atan2(y2 - y1, x2 - x1);\n        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n        let angle1;\n        let angle2;\n        let top_x;\n        let top_y;\n        let bottom_x;\n        let bottom_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n            top_x = x2 + Math.cos(angle1) * h;\n            top_y = y2 + Math.sin(angle1) * h;\n            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n            bottom_x = x2 + Math.cos(angle2) * h;\n            bottom_y = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            angle1 = line_angle + this.render_options.arrowhead_angle;\n            top_x = x1 + Math.cos(angle1) * h;\n            top_y = y1 + Math.sin(angle1) * h;\n            angle2 = line_angle - this.render_options.arrowhead_angle;\n            bottom_x = x1 + Math.cos(angle2) * h;\n            bottom_y = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n        }\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.first_note;\n        const last_note = this.last_note;\n        const render_options = this.render_options;\n        ctx.save();\n        this.applyLineStyle();\n        let start_position = { x: 0, y: 0 };\n        let end_position = { x: 0, y: 0 };\n        this.first_indices.forEach((first_index, i) => {\n            const last_index = this.last_indices[i];\n            start_position = first_note.getModifierStartXY(2, first_index);\n            end_position = last_note.getModifierStartXY(1, last_index);\n            const upwards_slope = start_position.y > end_position.y;\n            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n            const notehead_width = first_note.getGlyphProps().getWidth();\n            const first_displaced = first_note.getKeyProps()[first_index].displaced;\n            if (first_displaced && first_note.getStemDirection() === 1) {\n                start_position.x += notehead_width + render_options.padding_left;\n            }\n            const last_displaced = last_note.getKeyProps()[last_index].displaced;\n            if (last_displaced && last_note.getStemDirection() === -1) {\n                end_position.x -= notehead_width + render_options.padding_right;\n            }\n            start_position.y += upwards_slope ? -3 : 1;\n            end_position.y += upwards_slope ? 2 : 0;\n            this.drawArrowLine(ctx, start_position, end_position);\n        });\n        ctx.restore();\n        const text_width = ctx.measureText(this.text).width;\n        const justification = render_options.text_justification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = start_position.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const delta_x = end_position.x - start_position.x;\n            const center_x = delta_x / 2 + start_position.x;\n            x = center_x - text_width / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = end_position.x - text_width;\n        }\n        let y = 0;\n        const vertical_position = render_options.text_position_vertical;\n        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n            y = first_note.checkStave().getYForTopText();\n        }\n        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n", "import { BoundingBox } from './boundingbox.js';\nimport { Element } from './element.js';\nimport { Formatter } from './formatter.js';\nimport { Note } from './note.js';\nimport { Stave } from './stave.js';\nimport { RuntimeError } from './util.js';\nexport class System extends Element {\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    static get CATEGORY() {\n        return \"System\";\n    }\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    getX() {\n        return this.options.x;\n    }\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n    }\n    getY() {\n        return this.options.y;\n    }\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n    }\n    getStaves() {\n        return this.partStaves;\n    }\n    getVoices() {\n        return this.partVoices;\n    }\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            top_stave: this.partStaves[0],\n            bottom_stave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ left_bar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    format() {\n        const options_details = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(options_details);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        formatter.joinVoices(this.partVoices);\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(options_details);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    draw() {\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n", "import { Font } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Modifier } from './modifier.js';\nimport { Stem } from './stem.js';\nimport { StemmableNote } from './stemmablenote.js';\nimport { Tables } from './tables.js';\nimport { isDot } from './typeguard.js';\nimport { defined, RuntimeError } from './util.js';\nfunction getUnusedStringGroups(num_lines, strings_used) {\n    const stem_through = [];\n    let group = [];\n    for (let string = 1; string <= num_lines; string++) {\n        const is_used = strings_used.indexOf(string) > -1;\n        if (!is_used) {\n            group.push(string);\n        }\n        else {\n            stem_through.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stem_through.push(group);\n    return stem_through;\n}\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n    const up_stem = stem_direction !== 1;\n    const down_stem = stem_direction !== -1;\n    const line_spacing = stave.getSpacingBetweenLines();\n    const total_lines = stave.getNumLines();\n    const stem_lines = [];\n    unused_strings.forEach((strings) => {\n        const containsLastString = strings.indexOf(total_lines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n            return;\n        }\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const line_ys = [];\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === total_lines;\n            let y = stave.getYForLine(string - 1);\n            if (index === 0 && !isTopBound) {\n                y -= line_spacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += line_spacing / 2 - 1;\n            }\n            line_ys.push(y);\n            if (stem_direction === 1 && isTopBound) {\n                line_ys.push(stem_y - 2);\n            }\n            else if (stem_direction === -1 && isBottomBound) {\n                line_ys.push(stem_y + 2);\n            }\n        });\n        stem_lines.push(line_ys.sort((a, b) => a - b));\n    });\n    return stem_lines;\n}\nexport class TabNote extends StemmableNote {\n    constructor(noteStruct, draw_stem = false) {\n        super(noteStruct);\n        this.glyphPropsArr = [];\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false;\n        this.positions = noteStruct.positions || [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: Tables.TABLATURE_FONT_SCALE, draw_stem, draw_dots: draw_stem, draw_stem_through_stave: false, y_shift: 0, scale: 1.0, font: `${Font.SIZE}pt ${Font.SANS_SERIF}` });\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stem_direction) {\n            this.setStemDirection(noteStruct.stem_direction);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        this.ghost = false;\n        this.updateWidth();\n    }\n    static get CATEGORY() {\n        return \"TabNote\";\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    hasStem() {\n        if (this.render_options.draw_stem)\n            return true;\n        return false;\n    }\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        if (this.stem_extension_override != null) {\n            return this.stem_extension_override;\n        }\n        if (glyphProps) {\n            return this.getStemDirection() === Stem.UP\n                ? glyphProps.tabnote_stem_up_extension\n                : glyphProps.tabnote_stem_down_extension;\n        }\n        return 0;\n    }\n    updateWidth() {\n        this.glyphPropsArr = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const glyphProps = Tables.tabToGlyphProps(fret.toString(), this.render_options.scale);\n            this.glyphPropsArr.push(glyphProps);\n            this.width = Math.max(glyphProps.getWidth(), this.width);\n        }\n        this.glyphProps.getWidth = () => this.width;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        if (ctx) {\n            this.width = 0;\n            for (let i = 0; i < this.glyphPropsArr.length; ++i) {\n                const glyphProps = this.glyphPropsArr[i];\n                const text = '' + glyphProps.text;\n                if (text.toUpperCase() !== 'X') {\n                    ctx.save();\n                    ctx.setFont(this.render_options.font);\n                    glyphProps.width = ctx.measureText(text).width;\n                    ctx.restore();\n                    glyphProps.getWidth = () => glyphProps.width;\n                }\n                this.width = Math.max(glyphProps.getWidth(), this.width);\n            }\n            this.glyphProps.getWidth = () => this.width;\n        }\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    getPositions() {\n        return this.positions;\n    }\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2;\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2;\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const note_glyph_width = this.glyphProps.getWidth();\n            x = note_glyph_width / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        this.preFormatted = true;\n    }\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    getStemY() {\n        const num_lines = this.checkStave().getNumLines();\n        const stemUpLine = -0.5;\n        const stemDownLine = num_lines - 0.5;\n        const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    drawFlag() {\n        var _a;\n        const { beam, glyphProps, render_options: { draw_stem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam == undefined && draw_stem;\n        if (glyphProps.flag && shouldDrawFlag) {\n            const flag_x = this.getStemX();\n            const flag_y = this.getStemDirection() === Stem.DOWN\n                ?\n                    this.getStemY() - this.checkStem().getHeight() - (this.glyphProps ? this.glyphProps.stem_down_extension : 0)\n                :\n                    this.getStemY() - this.checkStem().getHeight() + (this.glyphProps ? this.glyphProps.stem_up_extension : 0);\n            (_a = this.flag) === null || _a === void 0 ? void 0 : _a.render(context, flag_x, flag_y);\n        }\n    }\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            if (isDot(modifier) && !this.render_options.draw_dots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.render_options.draw_stem;\n        const stemThrough = this.render_options.draw_stem_through_stave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    drawPositions() {\n        var _a;\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.render_options.y_shift;\n            const glyphProps = this.glyphPropsArr[i];\n            const note_glyph_width = this.glyphProps.getWidth();\n            const tab_x = x + note_glyph_width / 2 - glyphProps.getWidth() / 2;\n            ctx.clearRect(tab_x - 2, y - 3, glyphProps.getWidth() + 4, 6);\n            if (glyphProps.code) {\n                Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyphProps.code);\n            }\n            else {\n                ctx.save();\n                ctx.setFont(this.render_options.font);\n                const text = (_a = glyphProps.text) !== null && _a !== void 0 ? _a : '';\n                ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n                ctx.restore();\n            }\n        }\n    }\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const render_stem = this.beam == undefined && this.render_options.draw_stem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && render_stem) {\n            const stem_x = this.getStemX();\n            this.stem.setNoteHeadXBounds(stem_x, stem_x);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n", "import { Stave } from './stave.js';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return \"TabStave\";\n    }\n    constructor(x, y, width, options) {\n        const tab_options = Object.assign({ spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 }, options);\n        super(x, y, width, tab_options);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n", "import { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Renderer } from './renderer.js';\nimport { Tables } from './tables.js';\nimport { log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.text = text;\n        this.superscript = superscript;\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.resetFont();\n        this.render_options = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            line_width: 1,\n            show_bracket: true,\n            bracket_height: 8,\n            underline_superscript: true,\n        };\n    }\n    static get CATEGORY() {\n        return \"TextBracket\";\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    static get Positions() {\n        L('Positions is deprecated, use TextBracketPosition instead.');\n        return TextBracketPosition;\n    }\n    static get PositionsString() {\n        L('PositionsString is deprecated, use PositionString instead.');\n        return TextBracket.PositionString;\n    }\n    applyStyle(ctx) {\n        ctx.setFont(this.font);\n        const options = this.render_options;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.line_width);\n        return this;\n    }\n    setDashed(dashed, dash) {\n        this.render_options.dashed = dashed;\n        if (dash)\n            this.render_options.dash = dash;\n        return this;\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracket_height = this.render_options.bracket_height * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        ctx.fillText(this.text, start.x, start.y);\n        const main_measure = ctx.measureText(this.text);\n        const main_width = main_measure.width;\n        const main_height = main_measure.height;\n        const super_y = start.y - main_height / 2.5;\n        const { family, size, weight, style } = this.textFont;\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        ctx.setFont(family, smallerFontSize, weight, style);\n        ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n        const super_measure = ctx.measureText(this.superscript);\n        const super_width = super_measure.width;\n        const super_height = super_measure.height;\n        let start_x = start.x;\n        let line_y = super_y;\n        const end_x = stop.x + this.stop.getGlyphProps().getWidth();\n        if (this.position === TextBracketPosition.TOP) {\n            start_x += main_width + super_width + 5;\n            line_y -= super_height / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            line_y += super_height / 2.7;\n            start_x += main_width + 2;\n            if (!this.render_options.underline_superscript) {\n                start_x += super_width;\n            }\n        }\n        if (this.render_options.dashed) {\n            Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n            if (this.render_options.show_bracket) {\n                Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(start_x, line_y);\n            ctx.lineTo(end_x, line_y);\n            if (this.render_options.show_bracket) {\n                ctx.lineTo(end_x, line_y + bracket_height);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\nTextBracket.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 15,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.ITALIC,\n};\n", "import { Glyph } from './glyph.js';\nimport { Note } from './note.js';\nimport { defined, log, RuntimeError } from './util.js';\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\nexport class TextDynamics extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.sequence = (noteStruct.text || '').toLowerCase();\n        this.line = noteStruct.line || 0;\n        this.glyphs = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: 40 });\n        L('New Dynamics Text: ', this.sequence);\n    }\n    static get CATEGORY() {\n        return \"TextDynamics\";\n    }\n    static get GLYPHS() {\n        return {\n            f: {\n                code: 'dynamicForte',\n                width: 12,\n            },\n            p: {\n                code: 'dynamicPiano',\n                width: 14,\n            },\n            m: {\n                code: 'dynamicMezzo',\n                width: 17,\n            },\n            s: {\n                code: 'dynamicSforzando',\n                width: 10,\n            },\n            z: {\n                code: 'dynamicZ',\n                width: 12,\n            },\n            r: {\n                code: 'dynamicRinforzando',\n                width: 12,\n            },\n        };\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    preFormat() {\n        let total_width = 0;\n        this.glyphs = [];\n        this.sequence.split('').forEach((letter) => {\n            const glyph_data = TextDynamics.GLYPHS[letter];\n            if (!glyph_data)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            const size = defined(this.render_options.glyph_font_size);\n            const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n            this.glyphs.push(glyph);\n            total_width += glyph_data.width;\n        });\n        this.setWidth(total_width);\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        let letter_x = x;\n        this.glyphs.forEach((glyph, index) => {\n            const current_letter = this.sequence[index];\n            glyph.render(this.checkContext(), letter_x, y);\n            letter_x += TextDynamics.GLYPHS[current_letter].width;\n        });\n    }\n}\nTextDynamics.DEBUG = false;\n", "import { Note } from './note.js';\nimport { TimeSignature } from './timesignature.js';\nexport class TimeSigNote extends Note {\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        const timeSignature = new TimeSignature(timeSpec, customPadding);\n        this.timeSigInfo = timeSignature.getInfo();\n        this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return \"TimeSigNote\";\n    }\n    addToModifierContext(mc) {\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (!this.timeSigInfo.glyph.getContext()) {\n            this.timeSigInfo.glyph.setContext(ctx);\n        }\n        this.timeSigInfo.glyph.setStave(stave);\n        this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n        this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n    }\n}\n", "import { Element } from './element.js';\nimport { Formatter } from './formatter.js';\nimport { Glyph } from './glyph.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nexport class Tuplet extends Element {\n    constructor(notes, options = {}) {\n        super();\n        this.numerator_glyphs = [];\n        this.denom_glyphs = [];\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n        if (this.options.beats_occupied) {\n            this.beatsOccupiedDeprecationWarning();\n        }\n        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n        if (this.options.bracketed != undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n        this.point = Tables.currentMusicFont().lookupMetric('digits.tupletPoint');\n        this.y_pos = 16;\n        this.x_pos = 100;\n        this.width = 200;\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    static get CATEGORY() {\n        return \"Tuplet\";\n    }\n    static get LOCATION_TOP() {\n        return 1;\n    }\n    static get LOCATION_BOTTOM() {\n        return -1;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.tuplet;\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.num_notes;\n    }\n    beatsOccupiedDeprecationWarning() {\n        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\n    }\n    getBeatsOccupied() {\n        this.beatsOccupiedDeprecationWarning();\n        return this.getNotesOccupied();\n    }\n    setBeatsOccupied(beats) {\n        this.beatsOccupiedDeprecationWarning();\n        return this.setNotesOccupied(beats);\n    }\n    getNotesOccupied() {\n        return this.notes_occupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notes_occupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        this.numerator_glyphs = [];\n        let n = this.num_notes;\n        while (n >= 1) {\n            this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n        this.denom_glyphs = [];\n        n = this.notes_occupied;\n        while (n >= 1) {\n            this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n    }\n    getNestedTupletCount() {\n        const location = this.location;\n        const first_note = this.notes[0];\n        let maxTupletCount = countTuplets(first_note, location);\n        let minTupletCount = countTuplets(first_note, location);\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    getYPosition() {\n        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        const y_offset = this.options.y_offset || 0;\n        const first_note = this.notes[0];\n        let y_pos;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().top_text_line);\n                }\n                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\n                if (note.hasStem() || note.isRest()) {\n                    const top_y = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset\n                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\n                    y_pos = Math.min(top_y, y_pos);\n                    if (modLines > 0) {\n                        y_pos = Math.min(modY, y_pos);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = Tuplet.metrics.bottomLine;\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\n                }\n            });\n            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottom_y = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset\n                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\n                    if (bottom_y > y_pos) {\n                        y_pos = bottom_y;\n                    }\n                }\n            }\n        }\n        return y_pos + nested_tuplet_y_offset + y_offset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.notes[0];\n        const last_note = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            this.x_pos = first_note.getStemX();\n            this.width = last_note.getStemX() - this.x_pos;\n        }\n        else {\n            this.x_pos = first_note.getTieLeftX() - 5;\n            this.width = last_note.getTieRightX() - this.x_pos + 5;\n        }\n        this.y_pos = this.getYPosition();\n        const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\n        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n        if (this.ratioed) {\n            width = this.denom_glyphs.reduce(addGlyphWidth, width);\n            width += this.point * 0.32;\n        }\n        const notation_center_x = this.x_pos + this.width / 2;\n        const notation_start_x = notation_center_x - width / 2;\n        if (this.bracketed) {\n            const line_width = this.width / 2 - width / 2 - 5;\n            if (line_width > 0) {\n                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\n        let x_offset = 0;\n        this.numerator_glyphs.forEach((glyph) => {\n            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n            x_offset += defined(glyph.getMetrics().width);\n        });\n        if (this.ratioed) {\n            const colon_x = notation_start_x + x_offset + this.point * 0.16;\n            const colon_radius = this.point * 0.06;\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            x_offset += this.point * 0.32;\n            this.denom_glyphs.forEach((glyph) => {\n                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n                x_offset += defined(glyph.getMetrics().width);\n            });\n        }\n    }\n}\n", "import { Element } from './element.js';\nimport { log } from './util.js';\nimport { Vibrato } from './vibrato.js';\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\nexport class VibratoBracket extends Element {\n    constructor(bracket_data) {\n        super();\n        if (bracket_data.start)\n            this.start = bracket_data.start;\n        if (bracket_data.stop)\n            this.stop = bracket_data.stop;\n        this.line = 1;\n        this.render_options = {\n            harsh: false,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n            vibrato_width: 0,\n        };\n    }\n    static get CATEGORY() {\n        return \"VibratoBracket\";\n    }\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        const start_x = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        const stop_x = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.render_options.vibrato_width = stop_x - start_x;\n        L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n        Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n    }\n}\nVibratoBracket.DEBUG = false;\n", "import { Accidental } from './accidental.js';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation.js';\nimport { Articulation } from './articulation.js';\nimport { BarNote } from './barnote.js';\nimport { Beam } from './beam.js';\nimport { ChordSymbol } from './chordsymbol.js';\nimport { ClefNote } from './clefnote.js';\nimport { Curve } from './curve.js';\nimport { EasyScore } from './easyscore.js';\nimport { Element } from './element.js';\nimport { Formatter } from './formatter.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { GhostNote } from './ghostnote.js';\nimport { GlyphNote } from './glyphnote.js';\nimport { GraceNote } from './gracenote.js';\nimport { GraceNoteGroup } from './gracenotegroup.js';\nimport { KeySigNote } from './keysignote.js';\nimport { ModifierContext } from './modifiercontext.js';\nimport { MultiMeasureRest } from './multimeasurerest.js';\nimport { NoteSubGroup } from './notesubgroup.js';\nimport { Ornament } from './ornament.js';\nimport { PedalMarking } from './pedalmarking.js';\nimport { Renderer } from './renderer.js';\nimport { RepeatNote } from './repeatnote.js';\nimport { Stave } from './stave.js';\nimport { StaveConnector } from './staveconnector.js';\nimport { StaveLine } from './staveline.js';\nimport { StaveNote } from './stavenote.js';\nimport { StaveTie } from './stavetie.js';\nimport { StringNumber } from './stringnumber.js';\nimport { System } from './system.js';\nimport { TabNote } from './tabnote.js';\nimport { TabStave } from './tabstave.js';\nimport { TextBracket } from './textbracket.js';\nimport { TextDynamics } from './textdynamics.js';\nimport { TextNote } from './textnote.js';\nimport { TickContext } from './tickcontext.js';\nimport { TimeSigNote } from './timesignote.js';\nimport { Tuplet } from './tuplet.js';\nimport { defined, log, RuntimeError } from './util.js';\nimport { VibratoBracket } from './vibratobracket.js';\nimport { Voice } from './voice.js';\nimport { isHTMLCanvas } from './web.js';\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\nexport class Factory {\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n            font: Factory.TEXT_FONT,\n        };\n        this.setOptions(options);\n    }\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined;\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId == null) {\n            return;\n        }\n        if (elementId == '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center', kerning: true, reportWidth: true }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        chordSymbol.setEnableKerning(p.kerning);\n        chordSymbol.setReportWidth(p.reportWidth);\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        const p = Object.assign({ type: 'a.', position: 'above' }, params);\n        const articulation = new Articulation(p.type);\n        articulation.setPosition(p.position);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, position: 0, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        ornament.setPosition(options.position);\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.harsh)\n            vibratoBracket.setHarsh(params.options.harsh);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\nFactory.DEBUG = false;\nFactory.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n", "import { Font } from './font.js';\nimport { TabNote } from './tabnote.js';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return \"GraceTabNote\";\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { y_shift: 0.3, scale: 0.6, font: `7.5pt ${Font.SANS_SERIF}` });\n        this.updateWidth();\n    }\n}\n", "import { Music } from './music.js';\nimport { RuntimeError } from './util.js';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const is_supported_type = Music.scaleTypes[this.keyParts.type];\n        if (!is_supported_type) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.root_indices[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote != null) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote != null) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n", "import { Element } from './element.js';\nimport { Modifier } from './modifier.js';\nimport { RuntimeError } from './util.js';\nexport class StaveHairpin extends Element {\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.render_options = {\n            height: 10,\n            y_shift: 0,\n            left_shift_px: 0,\n            right_shift_px: 0,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n    }\n    static get CATEGORY() {\n        return \"StaveHairpin\";\n    }\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt == null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const l_shift_px = ppt * ((_a = options.left_shift_ticks) !== null && _a !== void 0 ? _a : 0);\n        const r_shift_px = ppt * ((_b = options.right_shift_ticks) !== null && _b !== void 0 ? _b : 0);\n        const hairpin_options = {\n            height: options.height,\n            y_shift: options.y_shift,\n            left_shift_px: l_shift_px,\n            right_shift_px: r_shift_px,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n        new StaveHairpin({\n            first_note: notes.first_note,\n            last_note: notes.last_note,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpin_options)\n            .setPosition(position)\n            .draw();\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        if (options.height != null &&\n            options.y_shift != null &&\n            options.left_shift_px != null &&\n            options.right_shift_px != null) {\n            this.render_options = options;\n        }\n        return this;\n    }\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.last_note = notes.last_note;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.render_options.y_shift + 20;\n        let y_shift = params.first_y;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            y_shift = params.first_y - params.staff_height;\n        }\n        const l_shift = this.render_options.left_shift_px;\n        const r_shift = this.render_options.right_shift_px;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n                break;\n            default:\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.first_note;\n        const lastNote = this.last_note;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            first_x: start.x,\n            last_x: end.x,\n            first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staff_height: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n", "import { Font, FontStyle, FontWeight } from './font.js';\nimport { TabTie } from './tabtie.js';\nimport { RuntimeError } from './util.js';\nexport class TabSlide extends TabTie {\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        if (!direction) {\n            let first_fret = notes.first_note.getPositions()[0].fret;\n            if (typeof first_fret === 'string') {\n                first_fret = parseInt(first_fret, 10);\n            }\n            let last_fret = notes.last_note.getPositions()[0].fret;\n            if (typeof last_fret === 'string') {\n                last_fret = parseInt(last_fret, 10);\n            }\n            if (isNaN(first_fret) || isNaN(last_fret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.render_options.cp1 = 11;\n        this.render_options.cp2 = 14;\n        this.render_options.y_shift = 0.5;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return \"TabSlide\";\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const first_x_px = params.first_x_px;\n        const first_ys = params.first_ys;\n        const last_x_px = params.last_x_px;\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        const first_indices = this.notes.first_indices;\n        for (let i = 0; i < first_indices.length; ++i) {\n            const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n            if (isNaN(slide_y)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(first_x_px, slide_y + 3 * direction);\n            ctx.lineTo(last_x_px, slide_y - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\nTabSlide.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n", "import { Glyph } from './glyph.js';\nimport { GraceNote } from './gracenote.js';\nimport { Modifier } from './modifier.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { isGraceNote } from './typeguard.js';\nexport class Tremolo extends Modifier {\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.code = 'tremolo1';\n        this.y_spacing_scale = 1;\n        this.extra_stroke_scale = 1;\n    }\n    static get CATEGORY() {\n        return \"Tremolo\";\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let x = start.x;\n        const gn = isGraceNote(note);\n        const scale = gn ? GraceNote.SCALE : 1;\n        const category = `tremolo.${gn ? 'grace' : 'default'}`;\n        const musicFont = Tables.currentMusicFont();\n        let y_spacing = musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n        y_spacing *= this.y_spacing_scale;\n        const height = this.num * y_spacing;\n        let y = note.getStemExtents().baseY - height;\n        if (stemDirection < 0) {\n            y += musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n        }\n        else {\n            y += musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n        }\n        const fontScale = musicFont.lookupMetric(`${category}.point`);\n        x += musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n        for (let i = 0; i < this.num; ++i) {\n            Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category, scale: this.extra_stroke_scale });\n            y += y_spacing;\n        }\n    }\n}\n", "import { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nexport class Tuning {\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        this.setTuning(tuningString);\n    }\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).int_value) !== null && _a !== void 0 ? _a : -1;\n    }\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n", "export const VERSION = '4.1.0';\nexport const ID = 'a696355e15caddaff44c05e861991a5d355a8189';\nexport const DATE = '2022-12-02T01:15:31.154Z';", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Accidental } from './accidental.js';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation.js';\nimport { Articulation } from './articulation.js';\nimport { BarNote } from './barnote.js';\nimport { Beam } from './beam.js';\nimport { Bend } from './bend.js';\nimport { BoundingBox } from './boundingbox.js';\nimport { BoundingBoxComputation } from './boundingboxcomputation.js';\nimport { CanvasContext } from './canvascontext.js';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers, SymbolTypes, } from './chordsymbol.js';\nimport { Clef } from './clef.js';\nimport { ClefNote } from './clefnote.js';\nimport { Crescendo } from './crescendo.js';\nimport { Curve, CurvePosition } from './curve.js';\nimport { Dot } from './dot.js';\nimport { EasyScore } from './easyscore.js';\nimport { Element } from './element.js';\nimport { Factory } from './factory.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Formatter } from './formatter.js';\nimport { Fraction } from './fraction.js';\nimport { FretHandFinger } from './frethandfinger.js';\nimport { GhostNote } from './ghostnote.js';\nimport { Glyph } from './glyph.js';\nimport { GlyphNote } from './glyphnote.js';\nimport { GraceNote } from './gracenote.js';\nimport { GraceNoteGroup } from './gracenotegroup.js';\nimport { GraceTabNote } from './gracetabnote.js';\nimport { KeyManager } from './keymanager.js';\nimport { KeySignature } from './keysignature.js';\nimport { KeySigNote } from './keysignote.js';\nimport { Modifier, ModifierPosition } from './modifier.js';\nimport { ModifierContext } from './modifiercontext.js';\nimport { MultiMeasureRest } from './multimeasurerest.js';\nimport { Music } from './music.js';\nimport { Note } from './note.js';\nimport { NoteHead } from './notehead.js';\nimport { NoteSubGroup } from './notesubgroup.js';\nimport { Ornament } from './ornament.js';\nimport { Parenthesis } from './parenthesis.js';\nimport { Parser } from './parser.js';\nimport { PedalMarking } from './pedalmarking.js';\nimport { Registry } from './registry.js';\nimport { RenderContext } from './rendercontext.js';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer.js';\nimport { RepeatNote } from './repeatnote.js';\nimport { Stave } from './stave.js';\nimport { Barline, BarlineType } from './stavebarline.js';\nimport { StaveConnector } from './staveconnector.js';\nimport { StaveHairpin } from './stavehairpin.js';\nimport { StaveLine } from './staveline.js';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier.js';\nimport { StaveNote } from './stavenote.js';\nimport { Repetition } from './staverepetition.js';\nimport { StaveTempo } from './stavetempo.js';\nimport { StaveText } from './stavetext.js';\nimport { StaveTie } from './stavetie.js';\nimport { Volta, VoltaType } from './stavevolta.js';\nimport { Stem } from './stem.js';\nimport { StringNumber } from './stringnumber.js';\nimport { Stroke } from './strokes.js';\nimport { SVGContext } from './svgcontext.js';\nimport { System } from './system.js';\nimport { Tables } from './tables.js';\nimport { TabNote } from './tabnote.js';\nimport { TabSlide } from './tabslide.js';\nimport { TabStave } from './tabstave.js';\nimport { TabTie } from './tabtie.js';\nimport { TextBracket, TextBracketPosition } from './textbracket.js';\nimport { TextDynamics } from './textdynamics.js';\nimport { TextFormatter } from './textformatter.js';\nimport { TextJustification, TextNote } from './textnote.js';\nimport { TickContext } from './tickcontext.js';\nimport { TimeSignature } from './timesignature.js';\nimport { TimeSigNote } from './timesignote.js';\nimport { Tremolo } from './tremolo.js';\nimport { Tuning } from './tuning.js';\nimport { Tuplet } from './tuplet.js';\nimport { DATE, ID, VERSION } from './version.js';\nimport { Vibrato } from './vibrato.js';\nimport { VibratoBracket } from './vibratobracket.js';\nimport { Voice, VoiceMode } from './voice.js';\nexport class Flow {\n    static get BUILD() {\n        return {\n            VERSION: VERSION,\n            ID: ID,\n            DATE: DATE,\n        };\n    }\n    static setMusicFont(...fontNames) {\n        const fonts = fontNames.map((fontName) => Font.load(fontName));\n        Tables.MUSIC_FONT_STACK = fonts;\n        Glyph.MUSIC_FONT_STACK = fonts.slice();\n        Glyph.CURRENT_CACHE_KEY = fontNames.join(',');\n        return fonts;\n    }\n    static fetchMusicFont(fontName, fontModuleOrPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n        });\n    }\n    static getMusicFont() {\n        const fonts = Tables.MUSIC_FONT_STACK;\n        return fonts.map((font) => font.getName());\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get accidentalMap() {\n        return Tables.accidentalMap;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.BoundingBoxComputation = BoundingBoxComputation;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.Glyph = Glyph;\nFlow.GlyphNote = GlyphNote;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextFormatter = TextFormatter;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nFlow.SymbolTypes = SymbolTypes;\nFlow.SymbolModifiers = SymbolModifiers;\nFlow.CurvePosition = CurvePosition;\nFlow.FontWeight = FontWeight;\nFlow.FontStyle = FontStyle;\nFlow.ModifierPosition = ModifierPosition;\nFlow.RendererBackends = RendererBackends;\nFlow.RendererLineEndType = RendererLineEndType;\nFlow.BarlineType = BarlineType;\nFlow.StaveModifierPosition = StaveModifierPosition;\nFlow.VoltaType = VoltaType;\nFlow.TextBracketPosition = TextBracketPosition;\nFlow.TextJustification = TextJustification;\nFlow.VoiceMode = VoiceMode;\n", "export const BravuraFont = {\n    glyphs: {\n        bracketTop: {\n            x_min: 0,\n            x_max: 469,\n            y_min: 0,\n            y_max: 295,\n            ha: 295,\n            o: 'm 0 0 l 180 0 b 674 390 410 43 616 150 b 675 405 675 396 675 400 b 664 425 675 416 671 422 b 628 405 651 425 635 415 b 157 179 613 389 432 199 l 12 179 b 0 168 3 179 0 177 z',\n        },\n        bracketBottom: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -295,\n            y_max: 0,\n            ha: 295,\n            o: 'm 0 -168 b 12 -179 0 -177 3 -179 l 157 -179 b 628 -405 432 -199 613 -389 b 664 -425 635 -415 651 -425 b 675 -405 671 -422 675 -416 b 674 -390 675 -400 675 -396 b 180 0 616 -150 410 -43 l 0 0 z',\n        },\n        barlineTick: {\n            x_min: 0,\n            x_max: 36,\n            y_min: 868,\n            y_max: 1120,\n            ha: 252,\n            o: 'm 52 1250 l 52 1613 l 0 1613 l 0 1250 z',\n        },\n        breathMarkTick: {\n            x_min: 0,\n            x_max: 500,\n            y_min: 0,\n            y_max: 502,\n            ha: 502,\n            o: 'm 9 367 b 0 374 6 372 3 374 b 9 334 0 367 0 343 b 179 19 40 312 164 121 b 192 0 179 3 186 0 b 210 19 197 0 207 6 b 698 701 245 197 507 658 b 720 714 714 704 720 711 b 698 723 720 720 711 723 b 197 186 455 714 210 202 b 186 176 194 179 189 176 b 176 186 179 176 176 186 b 9 367 143 266 27 359 z',\n        },\n        segno: {\n            x_min: 4,\n            x_max: 550,\n            y_min: -27,\n            y_max: 759,\n            ha: 786,\n            o: 'm 194 958 b 217 939 203 958 213 955 l 220 929 b 325 805 230 890 252 805 b 425 901 384 805 425 840 b 413 969 425 923 420 946 b 220 1060 390 1035 294 1060 b 6 793 120 1060 6 936 b 29 687 6 759 13 723 b 295 449 75 582 284 454 b 304 438 301 446 304 444 b 295 415 304 432 301 425 b 78 22 285 395 78 22 b 73 3 75 16 73 9 b 114 -39 73 -20 91 -39 b 150 -17 128 -39 143 -30 b 377 395 150 -17 373 386 b 395 402 377 393 389 402 b 704 176 416 397 704 312 b 621 75 704 120 670 82 l 616 73 b 562 138 586 73 562 94 l 562 154 b 485 249 562 209 526 249 b 468 246 480 249 474 248 b 366 153 415 233 366 210 b 540 -12 366 65 455 -12 b 600 -1 559 -12 579 -9 b 792 251 716 37 792 131 b 789 292 792 264 791 278 b 523 588 768 451 540 579 b 498 611 505 598 498 603 b 501 619 498 613 500 616 b 732 1032 508 631 732 1032 b 737 1053 736 1040 737 1045 b 697 1093 737 1076 719 1093 b 661 1073 683 1093 668 1086 b 423 647 661 1073 432 660 b 410 635 419 639 416 635 b 396 639 406 635 402 636 b 128 792 383 644 166 727 b 108 868 120 808 108 838 b 186 958 108 907 125 948 z m 598 671 b 680 589 598 626 635 589 b 762 671 726 589 762 626 b 680 753 762 717 726 753 b 598 671 635 753 598 717 z m 202 380 b 120 462 202 425 166 462 b 37 380 75 462 37 425 b 120 298 37 334 75 298 b 202 380 166 298 202 334 z',\n        },\n        coda: {\n            x_min: -4,\n            x_max: 955,\n            y_min: -158,\n            y_max: 898,\n            ha: 1056,\n            o: 'm 1349 576 l 1178 576 b 729 1083 1164 847 962 1064 l 729 1269 b 694 1293 729 1287 713 1293 b 660 1269 675 1293 660 1287 l 660 1083 b 210 576 426 1064 226 848 l 20 576 b -6 541 0 576 -6 560 b 20 507 -6 523 0 507 l 210 507 b 660 0 226 238 426 19 l 660 -202 b 694 -228 660 -222 675 -228 b 729 -202 713 -228 729 -222 l 729 0 b 1178 507 962 19 1164 238 l 1349 507 b 1375 541 1369 507 1375 523 b 1349 576 1375 560 1369 576 z m 940 576 l 729 576 l 729 1002 b 940 576 930 985 940 809 z m 660 1002 l 660 576 l 455 576 b 660 1002 455 809 455 985 z m 455 507 l 660 507 l 660 69 b 455 507 474 91 456 285 z m 729 69 l 729 507 l 940 507 b 729 69 936 287 909 91 z',\n        },\n        gClef: {\n            x_min: 0,\n            x_max: 671,\n            y_min: -658,\n            y_max: 1098,\n            ha: 1756,\n            o: 'm 541 598 b 550 625 539 615 541 616 b 824 1174 706 770 824 953 b 730 1509 824 1299 789 1423 b 655 1581 708 1541 671 1581 b 562 1512 635 1581 590 1544 b 420 1064 455 1394 420 1214 b 441 828 420 981 431 887 b 428 793 444 811 445 808 b 0 125 220 622 0 416 b 524 -363 0 -125 171 -363 b 624 -354 557 -363 595 -360 b 645 -367 639 -351 642 -350 b 684 -657 662 -464 684 -589 b 455 -896 684 -870 540 -896 b 340 -854 377 -896 340 -873 b 386 -829 340 -844 353 -840 b 482 -694 431 -816 482 -778 b 344 -547 482 -615 432 -547 b 190 -713 248 -547 190 -624 b 464 -948 190 -806 246 -948 b 747 -660 560 -948 747 -904 b 706 -351 747 -577 721 -441 b 724 -327 703 -334 704 -336 b 966 16 870 -269 966 -147 b 619 363 966 200 831 363 b 577 389 582 363 582 363 z m 677 1358 b 763 1240 724 1358 763 1319 b 513 851 763 1080 626 950 b 494 863 503 842 497 844 b 485 995 488 900 485 949 b 677 1358 485 1220 589 1358 z m 520 377 b 498 343 524 350 524 351 b 289 63 372 300 289 186 b 455 -192 289 -66 357 -158 b 494 -200 467 -196 484 -200 b 511 -184 505 -200 511 -193 b 490 -166 511 -174 500 -170 b 386 -12 429 -140 386 -78 b 530 157 386 71 442 132 b 559 145 553 163 556 161 l 631 -284 b 611 -304 634 -300 632 -300 b 530 -311 588 -308 559 -311 b 115 29 278 -311 115 -171 b 249 363 115 114 130 228 b 469 567 336 459 402 513 b 490 562 484 579 487 577 z m 619 148 b 635 168 616 166 618 170 b 848 -66 752 158 848 60 b 713 -271 848 -157 793 -230 b 690 -262 696 -279 693 -279 z',\n        },\n        cClef: {\n            x_min: 0,\n            x_max: 699,\n            y_min: -506,\n            y_max: 506,\n            ha: 1012,\n            o: 'm 331 694 b 301 724 331 714 321 724 l 300 724 b 269 694 279 724 269 714 l 269 -694 b 300 -724 269 -714 279 -724 l 301 -724 b 331 -694 321 -724 331 -714 l 331 -63 b 344 -55 331 -52 338 -53 b 472 -265 382 -65 442 -102 b 500 -301 477 -288 485 -301 b 530 -262 516 -301 523 -287 b 684 -128 549 -199 582 -128 b 804 -409 778 -128 804 -220 b 651 -683 804 -598 770 -683 b 528 -644 631 -683 528 -674 b 567 -622 528 -636 552 -628 b 625 -528 596 -612 625 -583 b 527 -429 625 -465 583 -429 b 416 -547 465 -429 416 -471 b 667 -729 416 -638 495 -729 b 1007 -413 903 -729 1007 -563 b 706 -76 1007 -215 897 -76 b 618 -89 664 -76 636 -84 b 576 -88 603 -94 589 -96 b 524 0 556 -75 524 -29 b 576 88 524 29 556 75 b 618 89 589 96 603 94 b 706 76 636 84 664 76 b 1007 413 897 76 1007 215 b 667 729 1007 563 903 729 b 416 547 495 729 416 638 b 527 429 416 471 465 429 b 625 528 583 429 625 465 b 567 622 625 583 596 612 b 528 644 552 628 528 636 b 651 683 528 674 631 683 b 804 409 770 683 804 598 b 684 128 804 220 778 128 b 530 262 582 128 549 199 b 500 301 523 287 516 301 b 472 265 485 301 477 288 b 344 55 442 102 382 65 b 331 63 338 53 331 52 z m 30 724 b 0 694 10 724 0 714 l 0 -694 b 30 -724 0 -714 10 -724 l 154 -724 b 184 -694 174 -724 184 -714 l 184 694 b 154 724 184 714 174 724 z',\n        },\n        fClef: {\n            x_min: -5,\n            x_max: 684,\n            y_min: -635,\n            y_max: 262,\n            ha: 897,\n            o: 'm 363 377 b 0 56 112 377 0 194 b 177 -158 0 -59 60 -158 b 330 -6 268 -158 330 -95 b 192 144 330 86 262 144 b 120 134 153 144 138 134 b 96 160 101 134 96 145 b 330 323 96 217 183 323 b 549 -53 482 323 549 173 b 14 -871 549 -455 350 -680 b -7 -897 1 -878 -7 -886 b 12 -914 -7 -906 -1 -914 b 36 -907 19 -914 27 -912 b 765 -40 390 -734 765 -478 b 363 377 765 210 612 377 z m 906 259 b 827 180 861 259 827 225 b 906 101 827 135 861 101 b 985 180 950 101 985 135 b 906 259 985 225 950 259 z m 907 -102 b 829 -180 863 -102 829 -135 b 907 -258 829 -225 863 -258 b 985 -180 952 -258 985 -225 b 907 -102 985 -135 952 -102 z',\n        },\n        unpitchedPercussionClef1: {\n            x_min: 0,\n            x_max: 382,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 230 -338 l 230 338 b 210 360 230 350 222 360 l 20 360 b 0 338 9 360 0 350 l 0 -338 b 20 -360 0 -350 9 -360 l 210 -360 b 230 -338 222 -360 230 -350 z m 550 338 b 530 360 550 350 541 360 l 340 360 b 320 338 328 360 320 350 l 320 -338 b 340 -360 320 -350 328 -360 l 530 -360 b 550 -338 541 -360 550 -350 z',\n        },\n        '6stringTabClef': {\n            x_min: -3,\n            x_max: 408,\n            y_min: -748,\n            y_max: 764,\n            ha: 1512,\n            o: 'm 557 1024 l 557 1100 l 26 1100 l 26 1024 l 249 1024 l 249 422 l 336 422 l 336 1024 z m 588 -328 l 350 348 l 238 348 l -4 -328 l 88 -328 l 160 -125 l 420 -125 l 491 -328 z m 397 -52 l 181 -52 l 292 256 z m 544 -883 b 420 -719 544 -802 507 -752 b 514 -572 482 -690 514 -639 b 314 -399 514 -472 442 -399 l 39 -399 l 39 -1077 l 344 -1077 b 544 -883 467 -1077 544 -995 z m 428 -583 b 292 -691 428 -652 389 -691 l 125 -691 l 125 -475 l 292 -475 b 428 -583 389 -475 428 -514 z m 458 -884 b 337 -1001 458 -949 418 -1001 l 125 -1001 l 125 -768 l 337 -768 b 458 -884 418 -768 458 -818 z',\n        },\n        timeSig0: {\n            x_min: 20,\n            x_max: 450,\n            y_min: -250,\n            y_max: 251,\n            ha: 501,\n            o: 'm 648 0 b 338 361 648 200 510 361 b 29 0 167 361 29 200 b 338 -360 29 -199 167 -360 b 648 0 510 -360 648 -199 z m 338 317 b 446 10 397 317 446 180 b 338 -295 446 -158 397 -295 b 230 10 278 -295 230 -158 b 338 317 230 180 278 317 z',\n        },\n        timeSig1: {\n            x_min: 20,\n            x_max: 314,\n            y_min: -250,\n            y_max: 251,\n            ha: 501,\n            o: 'm 35 19 b 29 0 35 19 29 10 b 45 -20 29 -7 33 -16 b 58 -23 50 -22 56 -23 b 78 -10 72 -23 78 -10 b 156 117 78 -10 140 89 b 170 131 161 127 167 131 b 179 111 176 131 179 120 l 179 -261 b 115 -315 179 -294 145 -315 b 91 -337 105 -315 91 -320 b 122 -360 91 -353 104 -360 l 429 -360 b 452 -337 452 -360 452 -337 b 431 -315 452 -337 452 -315 b 384 -265 410 -315 384 -289 l 384 328 b 356 361 384 351 376 360 b 281 356 336 361 300 356 b 206 360 253 356 228 357 b 199 361 203 360 200 361 b 173 334 184 361 179 347 z',\n        },\n        timeSig2: {\n            x_min: 20,\n            x_max: 426,\n            y_min: -257,\n            y_max: 254,\n            ha: 511,\n            o: 'm 606 -131 b 589 -111 606 -114 599 -111 b 570 -127 577 -111 573 -117 l 569 -128 b 513 -192 554 -164 543 -192 b 488 -187 505 -192 498 -190 b 445 -171 469 -180 459 -179 b 289 -137 416 -160 348 -137 b 236 -145 271 -137 252 -140 b 422 -42 268 -94 390 -50 b 613 147 523 -14 613 27 b 330 366 613 300 464 366 b 69 275 229 366 140 357 b 29 170 45 245 29 209 b 42 108 29 150 33 130 b 160 29 63 63 108 29 b 261 156 248 29 261 120 b 161 275 261 242 161 246 b 275 330 164 295 190 330 b 405 192 403 330 405 233 b 193 -102 405 60 297 -39 b 33 -317 114 -153 58 -223 l 32 -321 b 69 -370 32 -340 48 -370 b 203 -282 101 -370 118 -282 b 410 -360 261 -282 282 -360 b 606 -131 472 -360 583 -354 z',\n        },\n        timeSig3: {\n            x_min: 20,\n            x_max: 401,\n            y_min: -251,\n            y_max: 249,\n            ha: 500,\n            o: 'm 307 357 b 301 357 305 357 304 357 l 291 359 b 285 359 289 359 287 359 b 37 200 161 359 37 276 b 154 84 37 153 65 89 l 161 84 b 256 177 225 84 256 130 l 256 189 b 209 248 252 242 216 245 b 180 268 202 251 180 248 l 180 274 b 240 310 183 298 228 310 b 374 199 363 310 374 233 l 374 189 b 199 36 374 82 289 40 b 164 12 184 35 164 27 b 200 -6 164 -6 189 -6 b 379 -137 366 -6 379 -118 b 269 -307 379 -289 301 -307 b 256 -305 264 -307 258 -305 b 216 -282 245 -304 217 -304 l 216 -275 b 249 -180 216 -243 248 -222 b 145 -76 249 -120 207 -76 b 130 -78 140 -76 135 -76 b 60 -115 105 -82 78 -96 b 29 -203 36 -137 29 -171 b 275 -361 32 -315 134 -359 l 288 -361 b 577 -161 431 -361 577 -288 l 577 -151 b 537 -50 575 -109 564 -82 b 503 -20 528 -39 517 -29 l 472 -3 l 425 10 b 410 17 418 12 413 12 b 409 24 409 20 409 22 b 415 37 409 30 410 36 b 459 50 431 42 446 43 b 547 181 517 78 547 115 b 307 357 547 314 367 353 z',\n        },\n        timeSig4: {\n            x_min: 20,\n            x_max: 450,\n            y_min: -250,\n            y_max: 251,\n            ha: 501,\n            o: 'm 521 -107 l 521 202 b 504 226 521 213 520 226 b 475 213 491 226 484 223 l 338 48 b 325 14 333 40 325 32 l 325 -107 l 131 -107 b 481 336 246 -9 477 318 l 482 340 b 461 361 482 353 472 361 b 363 359 448 361 389 359 b 261 361 337 359 272 361 b 228 334 248 361 228 357 b 43 -105 228 156 86 -45 l 35 -117 b 35 -118 35 -117 35 -118 l 33 -120 b 29 -137 30 -127 29 -132 b 58 -161 29 -151 40 -161 l 325 -161 l 325 -252 b 268 -302 325 -291 294 -302 b 235 -330 245 -302 235 -315 b 262 -360 235 -344 240 -360 l 569 -360 b 598 -330 583 -360 598 -350 b 566 -301 598 -310 580 -301 b 521 -246 552 -301 521 -292 l 521 -161 l 626 -161 b 648 -134 641 -161 648 -151 b 626 -107 648 -117 642 -107 z',\n        },\n        timeSig5: {\n            x_min: 20,\n            x_max: 383,\n            y_min: -251,\n            y_max: 246,\n            ha: 497,\n            o: 'm 109 85 b 117 179 109 85 115 166 b 138 197 118 190 125 197 l 144 197 b 285 184 158 194 226 184 b 492 323 485 184 492 300 b 472 353 492 341 488 353 b 295 340 454 353 341 340 b 101 354 249 340 125 351 b 66 330 75 354 68 341 l 50 10 l 50 7 b 79 -14 50 -12 65 -14 b 111 14 94 -14 95 -1 b 209 62 125 29 160 62 b 357 -125 258 62 357 35 b 235 -304 357 -284 272 -304 b 202 -300 223 -304 212 -304 b 184 -279 194 -295 186 -289 b 202 -259 184 -269 194 -264 b 256 -163 235 -239 256 -203 b 144 -50 256 -99 206 -50 b 30 -157 66 -50 35 -107 b 29 -183 29 -166 29 -174 b 284 -361 29 -302 107 -361 b 552 -125 456 -361 552 -255 b 314 112 552 6 445 112 b 122 71 230 112 168 98 b 115 69 120 69 117 69 b 109 79 109 69 109 75 z',\n        },\n        timeSig6: {\n            x_min: 20,\n            x_max: 414,\n            y_min: -249,\n            y_max: 251,\n            ha: 500,\n            o: 'm 439 120 b 554 229 500 120 554 167 b 553 245 554 235 554 239 b 348 361 539 337 426 361 b 85 209 239 360 137 307 b 29 4 53 148 29 72 l 29 -1 b 73 -200 30 -68 42 -143 b 324 -359 132 -307 203 -359 b 513 -307 389 -359 461 -348 b 596 -137 563 -266 596 -202 b 379 72 596 -24 490 72 b 248 22 333 72 285 55 b 239 19 245 19 242 19 b 226 53 230 19 226 30 b 346 327 230 320 315 327 b 393 305 374 327 393 320 b 357 251 393 285 366 268 b 347 209 350 238 347 223 b 369 150 347 187 354 166 b 439 120 379 131 420 120 z m 320 3 b 405 -158 366 3 405 -69 b 320 -320 405 -248 366 -320 b 236 -158 274 -320 236 -248 b 320 3 236 -69 274 3 z',\n        },\n        timeSig7: {\n            x_min: 20,\n            x_max: 421,\n            y_min: -250,\n            y_max: 249,\n            ha: 499,\n            o: 'm 606 294 b 582 351 606 333 606 351 b 552 336 580 351 557 346 b 485 236 541 318 521 236 b 262 359 449 236 382 359 b 137 307 179 359 157 325 b 98 281 117 288 108 282 b 60 315 86 281 68 301 b 43 325 58 321 50 325 b 29 308 36 325 29 321 l 29 71 b 45 48 29 71 30 48 b 66 76 56 48 60 60 b 164 196 81 112 99 196 b 374 88 222 196 291 88 b 446 118 415 88 435 109 b 459 124 451 121 456 124 b 469 111 465 124 468 120 b 272 -112 469 71 359 -10 b 173 -315 217 -176 173 -259 b 200 -360 173 -346 173 -360 b 294 -347 226 -360 258 -347 b 412 -360 330 -347 397 -360 b 435 -307 426 -360 435 -348 b 606 288 435 -66 606 140 z',\n        },\n        timeSig8: {\n            x_min: 20,\n            x_max: 416,\n            y_min: -259,\n            y_max: 259,\n            ha: 518,\n            o: 'm 481 52 b 567 204 533 85 567 132 b 317 373 567 351 356 373 b 36 176 150 373 36 297 b 161 -16 36 76 92 23 b 29 -190 86 -52 29 -99 b 301 -373 29 -315 158 -373 b 599 -117 445 -373 599 -311 b 481 52 599 -30 549 17 z m 406 85 b 168 240 291 125 168 150 b 314 331 168 301 251 331 b 482 207 360 331 482 308 b 406 85 482 150 454 112 z m 295 -325 b 111 -183 199 -325 111 -276 b 225 -48 111 -125 161 -72 b 436 -219 330 -94 436 -124 b 295 -325 436 -276 392 -325 z',\n        },\n        timeSig9: {\n            x_min: 20,\n            x_max: 414,\n            y_min: -249,\n            y_max: 251,\n            ha: 500,\n            o: 'm 186 -117 b 71 -226 125 -117 71 -164 b 72 -242 71 -232 71 -236 b 276 -359 86 -334 199 -359 b 540 -206 386 -357 488 -304 b 596 -1 572 -145 596 -69 l 596 4 b 552 203 595 71 583 145 b 301 361 492 310 422 361 b 112 310 236 361 164 351 b 29 140 62 269 29 204 b 246 -69 29 27 135 -69 b 377 -19 292 -69 340 -52 b 386 -16 380 -16 383 -16 b 399 -50 395 -16 399 -27 b 279 -324 395 -317 310 -324 b 232 -302 251 -324 232 -317 b 268 -248 232 -282 259 -265 b 278 -206 275 -235 278 -220 b 256 -147 278 -184 271 -163 b 186 -117 246 -128 204 -117 z m 305 0 b 220 161 259 0 220 72 b 305 323 220 251 259 323 b 389 161 351 323 389 251 b 305 0 389 72 351 0 z',\n        },\n        timeSigCommon: {\n            x_min: 5,\n            x_max: 424,\n            y_min: -249,\n            y_max: 251,\n            ha: 500,\n            o: 'm 336 361 b 7 -14 131 361 7 180 b 101 -262 7 -108 42 -190 b 321 -359 156 -328 235 -359 b 611 -88 573 -359 611 -130 b 589 -56 611 -56 595 -56 b 567 -82 577 -56 567 -58 b 363 -311 567 -268 409 -311 b 184 40 246 -311 184 -197 b 372 327 184 278 294 327 b 477 278 446 327 477 292 b 451 246 477 265 472 246 b 360 140 393 246 360 184 b 471 32 360 58 431 32 b 580 156 471 32 580 36 b 336 361 580 344 363 361 z',\n        },\n        timeSigCutCommon: {\n            x_min: 0,\n            x_max: 418,\n            y_min: -359,\n            y_max: 361,\n            ha: 720,\n            o: 'm 573 -58 b 559 -82 567 -58 559 -60 b 354 -310 559 -266 400 -310 b 317 -305 340 -310 328 -308 b 302 -284 311 -304 302 -295 l 302 287 b 338 323 302 297 328 321 b 363 324 347 324 356 324 b 468 275 436 324 468 289 b 442 243 468 264 464 243 b 351 137 384 243 351 181 b 462 30 351 56 422 30 b 572 154 462 30 572 35 b 318 357 572 295 441 357 b 302 390 310 359 302 383 l 302 495 b 276 520 302 507 292 520 b 252 495 265 520 252 507 l 252 369 b 235 346 252 359 238 346 l 196 331 b 0 -14 66 275 0 122 b 225 -346 0 -150 86 -310 b 252 -382 235 -350 252 -369 l 252 -492 b 276 -517 252 -505 265 -517 b 302 -492 292 -517 302 -505 l 302 -379 b 318 -359 302 -370 308 -363 b 602 -85 563 -354 602 -130 b 579 -58 600 -58 586 -58 z m 252 -235 b 243 -252 252 -248 248 -252 b 236 -248 240 -252 238 -251 b 177 37 197 -193 177 -96 b 232 259 177 147 200 215 b 236 262 233 262 235 262 b 252 239 243 262 252 251 z',\n        },\n        timeSigPlus: {\n            x_min: -1,\n            x_max: 499,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 432 53 b 413 79 420 53 413 65 l 413 340 b 392 360 413 350 405 360 l 325 360 b 305 340 312 360 305 350 l 305 79 b 284 53 305 66 292 53 l 19 53 b -1 33 9 53 -1 46 l -1 -33 b 19 -55 -1 -46 9 -55 l 284 -55 b 305 -75 298 -55 305 -68 l 305 -340 b 325 -360 305 -350 312 -360 l 392 -360 b 413 -340 405 -360 413 -350 l 413 -78 b 433 -55 413 -63 423 -55 l 698 -55 b 719 -33 708 -55 719 -46 l 719 33 b 698 53 719 46 708 53 z',\n        },\n        timeSigPlusSmall: {\n            x_min: -1,\n            x_max: 255,\n            y_min: -133,\n            y_max: 123,\n            ha: 256,\n            o: 'm 220 20 b 210 33 215 20 210 26 l 210 166 b 200 177 210 171 206 177 l 166 177 b 156 166 160 177 156 171 l 156 33 b 145 20 156 27 150 20 l 10 20 b -1 10 4 20 -1 16 l -1 -24 b 10 -35 -1 -30 4 -35 l 145 -35 b 156 -46 153 -35 156 -42 l 156 -180 b 166 -192 156 -186 160 -192 l 200 -192 b 210 -180 206 -192 210 -186 l 210 -48 b 222 -35 210 -39 216 -35 l 356 -35 b 367 -24 361 -35 367 -30 l 367 10 b 356 20 367 16 361 20 z',\n        },\n        timeSigMinus: {\n            x_min: 0,\n            x_max: 448,\n            y_min: -35,\n            y_max: 40,\n            ha: 75,\n            o: 'm 645 39 b 619 58 645 49 634 58 l 27 58 b 0 39 12 58 0 49 l 0 -32 b 27 -50 0 -42 12 -50 l 619 -50 b 645 -32 634 -50 645 -42 z',\n        },\n        timeSigParensRight: {\n            x_min: 0,\n            x_max: 184,\n            y_min: -489,\n            y_max: 491,\n            ha: 980,\n            o: 'm 0 -696 b 3 -704 0 -698 1 -704 b 7 -703 4 -704 6 -704 b 265 1 187 -530 265 -282 b 12 701 265 289 187 531 b 4 707 12 701 6 707 b 0 696 1 707 0 703 l 0 665 b 4 644 0 665 0 651 b 167 1 112 503 167 315 b 6 -641 167 -311 109 -497 b 0 -658 3 -644 0 -651 z',\n        },\n        timeSigParensRightSmall: {\n            x_min: 0,\n            x_max: 110,\n            y_min: -251,\n            y_max: 249,\n            ha: 500,\n            o: 'm 0 -356 b 3 -361 0 -357 1 -361 b 158 0 112 -272 158 -145 b 4 359 158 147 109 272 b 0 353 3 359 0 357 l 0 338 b 3 327 0 338 0 330 b 91 0 60 246 91 160 b 4 -328 91 -160 62 -249 b 0 -337 3 -330 0 -333 z',\n        },\n        timeSigParensLeft: {\n            x_min: 0,\n            x_max: 184,\n            y_min: -489,\n            y_max: 491,\n            ha: 980,\n            o: 'm 265 -658 b 259 -641 265 -651 262 -644 b 98 1 156 -497 98 -311 b 261 644 98 315 153 503 b 265 665 265 651 265 665 l 265 696 b 261 707 265 703 264 707 b 253 701 259 707 253 701 b 0 1 78 531 0 289 b 258 -703 0 -282 78 -530 b 262 -704 259 -704 261 -704 b 265 -696 264 -704 265 -698 z',\n        },\n        timeSigParensLeftSmall: {\n            x_min: 0,\n            x_max: 110,\n            y_min: -251,\n            y_max: 249,\n            ha: 500,\n            o: 'm 158 -337 b 154 -328 158 -333 156 -330 b 68 0 96 -249 68 -160 b 156 327 68 160 98 246 b 158 338 158 330 158 338 l 158 353 b 154 359 158 357 156 359 b 0 0 49 272 0 147 b 156 -361 0 -145 46 -272 b 158 -356 157 -361 158 -357 z',\n        },\n        noteheadDoubleWhole: {\n            x_min: 0,\n            x_max: 599,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 13 223 b 0 212 4 223 0 217 l 0 -213 b 13 -223 0 -219 4 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 z m 96 223 b 82 212 88 223 82 217 l 82 -213 b 96 -223 82 -219 88 -223 l 114 -223 b 128 -213 121 -223 128 -219 l 128 212 b 114 223 128 217 121 223 z m 747 223 b 733 212 740 223 733 217 l 733 -213 b 747 -223 733 -219 740 -223 l 766 -223 b 780 -213 773 -223 780 -219 l 780 212 b 766 223 780 217 773 223 z m 829 223 b 815 212 824 223 815 217 l 815 -213 b 829 -223 815 -219 824 -223 l 848 -223 b 863 -213 857 -223 863 -219 l 863 212 b 848 223 863 217 857 223 z m 438 180 b 130 1 248 180 130 101 b 423 -180 130 -92 210 -180 b 733 1 657 -180 733 -98 b 438 180 733 104 572 180 z m 469 -145 b 331 -71 409 -145 369 -112 b 284 58 305 -37 284 12 b 400 147 284 131 333 147 b 577 -45 498 147 577 42 b 469 -145 577 -115 533 -145 z',\n        },\n        noteheadWhole: {\n            x_min: 0,\n            x_max: 422,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 311 180 b 0 3 120 180 0 101 b 297 -180 0 -94 82 -180 b 608 3 533 -180 608 -98 b 311 180 608 105 445 180 z m 160 91 b 274 148 176 141 229 148 b 452 -45 373 148 452 42 b 386 -141 452 -89 433 -130 b 341 -147 372 -145 356 -147 b 206 -72 289 -147 236 -112 b 156 56 177 -39 156 10 b 160 91 156 68 157 79 z',\n        },\n        noteheadHalf: {\n            x_min: 0,\n            x_max: 295,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 140 -180 b 425 60 377 -180 425 13 b 282 180 425 134 366 180 b 0 -60 68 180 0 14 b 140 -180 0 -137 60 -180 z m 108 -125 b 50 -92 78 -125 60 -109 b 42 -63 46 -84 42 -73 b 318 121 42 7 251 121 b 372 91 346 121 361 108 b 380 63 376 82 380 73 b 108 -125 380 1 177 -125 z',\n        },\n        noteheadBlack: {\n            x_min: 0,\n            x_max: 295,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 140 -180 b 425 60 268 -180 425 -62 b 285 180 425 134 367 180 b 0 -60 127 180 0 63 b 140 -180 0 -135 62 -180 z',\n        },\n        noteheadXDoubleWhole: {\n            x_min: 0,\n            x_max: 546,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 43 213 b 30 223 43 217 39 223 l 13 223 b 0 213 6 223 0 217 l 0 -215 b 13 -223 0 -219 6 -223 l 30 -223 b 43 -215 39 -223 43 -219 z m 704 213 b 693 223 704 217 698 223 l 672 223 b 660 213 667 223 660 217 l 660 163 b 634 180 655 173 645 180 l 505 180 b 484 173 498 180 490 177 l 393 95 l 300 173 b 279 180 294 177 287 180 l 151 180 b 125 163 141 180 130 173 l 125 213 b 112 223 125 217 118 223 l 94 223 b 82 213 86 223 82 217 l 82 -215 b 94 -223 82 -219 86 -223 l 112 -223 b 125 -215 118 -223 125 -219 l 125 -163 b 151 -180 130 -173 140 -180 l 279 -180 b 300 -171 287 -180 294 -177 l 393 -95 l 485 -171 b 505 -180 491 -177 498 -180 l 632 -180 b 660 -163 645 -180 655 -173 l 660 -215 b 672 -223 660 -219 667 -223 l 693 -223 b 704 -215 698 -223 704 -219 z m 786 213 b 772 223 786 217 780 223 l 755 223 b 740 213 747 223 740 217 l 740 -215 b 755 -223 740 -219 747 -223 l 772 -223 b 786 -215 780 -223 786 -219 z m 507 -141 l 393 -45 l 276 -141 l 207 -141 l 364 0 l 207 141 l 276 141 l 393 45 l 507 141 l 577 141 l 420 0 l 577 -141 z m 660 -132 l 518 0 l 660 132 z m 125 131 l 266 0 l 125 -131 z',\n        },\n        noteheadXWhole: {\n            x_min: 0,\n            x_max: 377,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 272 -95 l 364 -171 b 384 -180 370 -177 377 -180 l 511 -180 b 543 -148 528 -180 543 -164 b 531 -124 543 -140 539 -131 l 412 0 l 531 124 b 541 148 539 131 541 140 b 513 180 541 164 528 180 l 384 180 b 364 171 377 180 370 177 l 272 94 l 179 171 b 158 180 173 177 166 180 l 30 180 b 0 148 16 180 0 164 b 12 124 0 140 4 131 l 132 0 l 12 -124 b 1 -148 4 -131 1 -140 b 32 -180 1 -164 14 -180 l 158 -180 b 179 -171 166 -180 173 -177 z m 386 -141 l 272 -45 l 157 -141 l 88 -141 l 245 0 l 88 141 l 157 141 l 272 45 l 386 141 l 456 141 l 300 0 l 456 -141 z',\n        },\n        noteheadXHalf: {\n            x_min: 0,\n            x_max: 334,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 295 180 b 271 170 287 180 278 177 l 209 98 l 115 171 b 95 180 109 177 104 180 l 36 180 b 4 148 19 180 4 164 b 14 124 4 140 7 132 l 140 22 l 7 -127 b 0 -148 3 -131 0 -138 b 32 -180 0 -166 14 -180 l 184 -180 b 209 -170 193 -180 203 -177 l 271 -99 l 363 -171 b 384 -180 370 -176 377 -180 l 445 -180 b 478 -147 461 -180 478 -163 b 465 -125 478 -138 474 -131 l 341 -22 l 474 127 b 481 148 480 131 481 138 b 448 180 481 166 468 180 z m 36 148 l 95 148 l 233 33 l 334 148 l 410 148 l 274 -6 l 445 -148 l 384 -148 l 248 -35 l 147 -148 l 71 -148 l 206 4 z',\n        },\n        noteheadXBlack: {\n            x_min: 0,\n            x_max: 290,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 410 -143 l 239 0 l 410 144 b 418 160 415 147 418 154 b 399 180 418 171 408 180 b 389 177 396 180 392 179 l 207 26 l 29 177 b 17 180 26 179 22 180 b 0 161 7 180 0 170 b 7 144 0 156 3 148 l 179 0 l 7 -143 b 0 -158 1 -147 0 -153 b 19 -180 0 -170 7 -180 b 29 -176 23 -180 26 -179 l 207 -24 l 389 -176 b 399 -180 392 -179 396 -180 b 418 -160 410 -180 418 -168 b 410 -143 418 -153 415 -147 z',\n        },\n        noteheadCircleXDoubleWhole: {\n            x_min: 0,\n            x_max: 422,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 576 223 b 563 213 570 223 563 219 l 563 -215 b 576 -223 563 -219 570 -223 l 595 -223 b 608 -215 602 -223 608 -219 l 608 213 b 595 223 608 219 602 223 z m 497 223 b 484 213 491 223 484 219 l 484 -215 b 497 -223 484 -219 491 -223 l 516 -223 b 528 -215 523 -223 528 -219 l 528 213 b 516 223 528 219 523 223 z m 94 223 b 81 213 86 223 81 219 l 81 -215 b 94 -223 81 -219 86 -223 l 111 -223 b 124 -215 118 -223 124 -219 l 124 213 b 111 223 124 219 118 223 z m 13 223 b 0 213 6 223 0 219 l 0 -215 b 13 -223 0 -219 6 -223 l 30 -223 b 45 -215 37 -223 45 -219 l 45 213 b 30 223 45 219 37 223 z m 304 180 b 127 0 206 180 127 101 b 304 -180 127 -99 206 -180 b 482 0 405 -180 482 -99 b 304 180 482 101 405 180 z m 305 32 l 225 112 b 304 140 248 130 275 140 b 387 112 336 140 364 130 z m 278 1 l 193 -82 b 216 0 199 -59 216 -30 b 194 85 216 33 203 50 z m 334 1 l 418 84 b 389 0 402 50 389 23 b 418 -81 389 -30 409 -60 z m 305 -27 l 389 -109 b 304 -138 364 -128 336 -138 b 222 -109 274 -138 246 -128 z',\n        },\n        noteheadCircleXWhole: {\n            x_min: 0,\n            x_max: 249,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 179 180 b 0 0 81 180 0 101 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 101 278 180 z m 180 32 l 99 112 b 179 140 121 130 150 140 b 262 112 210 140 238 130 z m 151 1 l 68 -82 b 86 0 73 -59 86 -30 b 68 85 86 33 78 50 z m 209 1 l 291 84 b 269 0 276 50 269 32 b 291 -79 269 -26 282 -58 z m 180 -27 l 264 -111 b 179 -138 239 -128 210 -138 b 96 -111 148 -138 120 -128 z',\n        },\n        noteheadCircleXHalf: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 179 180 b 0 0 81 180 0 101 b 179 -180 0 -99 81 -180 b 360 0 278 -180 360 -99 b 179 180 360 101 278 180 z m 186 37 l 131 92 b 220 124 153 109 189 124 b 262 112 236 124 249 121 z m 215 7 l 291 84 b 304 42 300 71 304 58 b 271 -49 304 10 288 -26 z m 145 -6 l 68 -82 b 56 -42 59 -71 56 -58 b 89 52 56 -9 72 27 z m 174 -33 l 230 -89 b 140 -124 206 -108 171 -124 b 96 -111 122 -124 109 -121 z',\n        },\n        noteheadCircleX: {\n            x_min: 0,\n            x_max: 249,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 179 180 b 0 0 81 180 0 99 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 99 278 180 z m 261 112 l 180 30 l 98 112 b 179 138 121 128 148 138 b 261 112 210 138 238 128 z m 317 0 b 292 -82 317 -30 308 -59 l 209 1 l 291 84 b 317 0 307 60 317 30 z m 40 0 b 69 84 40 32 50 60 l 151 1 l 68 -84 b 40 0 49 -60 40 -30 z m 95 -111 l 180 -27 l 262 -111 b 179 -138 239 -128 210 -138 b 95 -111 148 -138 120 -128 z',\n        },\n        noteheadCircledDoubleWhole: {\n            x_min: 0,\n            x_max: 603,\n            y_min: -218,\n            y_max: 213,\n            ha: 431,\n            o: 'm 770 223 l 752 223 b 737 213 744 223 737 219 l 737 59 b 435 307 710 203 582 307 b 128 48 281 307 156 197 l 128 213 b 115 223 128 219 122 223 l 96 223 b 84 213 89 223 84 219 l 84 -215 b 96 -223 84 -220 89 -223 l 115 -223 b 128 -215 122 -223 128 -220 l 128 -56 b 435 -314 156 -206 282 -314 b 654 -223 517 -314 595 -282 b 737 -66 697 -180 726 -125 l 737 -215 b 752 -223 737 -220 744 -223 l 770 -223 b 785 -215 778 -223 785 -220 l 785 213 b 770 223 785 219 778 223 z m 435 274 b 698 85 556 274 661 194 b 439 180 641 143 534 180 b 176 99 320 180 228 148 b 435 274 217 203 318 274 z m 32 223 l 13 223 b 0 213 6 223 0 219 l 0 -215 b 13 -223 0 -220 6 -223 l 32 -223 b 45 -215 40 -223 45 -220 l 45 213 b 32 223 45 219 40 223 z m 852 223 l 835 223 b 819 213 828 223 819 219 l 819 -215 b 835 -223 819 -220 828 -223 l 852 -223 b 868 -215 861 -223 868 -220 l 868 213 b 852 223 868 219 861 223 z m 580 -46 b 514 -143 580 -91 562 -131 b 472 -148 501 -147 487 -148 b 364 -105 433 -148 395 -131 l 334 -73 b 285 58 307 -39 285 10 b 289 91 285 69 287 79 b 403 145 305 140 357 145 b 580 -46 501 145 580 42 z m 435 -282 b 176 -108 318 -282 217 -209 b 425 -180 222 -151 301 -180 b 691 -109 563 -180 647 -153 b 435 -282 651 -210 550 -282 z',\n        },\n        noteheadCircledWhole: {\n            x_min: 0,\n            x_max: 437,\n            y_min: -225,\n            y_max: 211,\n            ha: 436,\n            o: 'm 314 304 b 0 -10 140 304 0 164 b 314 -324 0 -183 141 -324 b 629 -10 487 -324 629 -183 b 314 304 629 164 488 304 z m 314 275 b 588 73 441 275 549 193 b 321 180 536 137 420 180 b 48 88 190 180 95 143 b 314 275 85 199 199 275 z m 393 -141 b 350 -147 379 -145 364 -147 b 314 -141 337 -147 325 -145 b 167 55 235 -120 167 -26 b 173 91 167 66 168 79 b 284 145 187 138 239 145 b 459 -48 382 145 459 39 b 393 -141 459 -91 438 -131 z m 314 -294 b 40 -86 187 -294 75 -207 b 305 -180 81 -141 164 -180 b 588 -86 464 -180 550 -143 b 314 -294 554 -209 442 -294 z',\n        },\n        noteheadCircledHalf: {\n            x_min: -18,\n            x_max: 311,\n            y_min: -162,\n            y_max: 167,\n            ha: 329,\n            o: 'm 212 240 b -26 3 81 240 -26 134 b 212 -233 -26 -127 81 -233 b 448 3 341 -233 448 -127 b 212 240 448 134 341 240 z m 212 220 b 363 160 271 220 324 197 b 281 180 341 173 312 180 b 0 -52 76 180 6 26 b -6 3 -4 -35 -6 -16 b 212 220 -6 122 92 220 z m 50 -92 b 42 -63 46 -84 42 -73 b 173 63 42 -33 73 7 b 317 120 243 105 288 120 b 369 89 344 120 359 107 b 377 62 374 81 377 72 b 248 -66 377 33 348 -1 b 108 -125 183 -109 138 -125 b 50 -92 78 -125 60 -109 z m 212 -215 b 84 -171 164 -215 120 -199 b 138 -180 101 -179 120 -180 b 422 56 372 -180 420 7 b 429 3 426 40 429 22 b 212 -215 429 -117 333 -215 z',\n        },\n        noteheadCircledBlack: {\n            x_min: -21,\n            x_max: 321,\n            y_min: -171,\n            y_max: 167,\n            ha: 338,\n            o: 'm 216 240 b -30 -3 82 240 -30 131 b 216 -246 -30 -137 82 -246 b 462 -3 351 -246 462 -137 b 216 240 462 131 351 240 z m 216 220 b 372 160 276 220 331 197 b 284 180 348 174 317 180 b 0 -59 127 180 0 65 l 0 -66 b -10 -3 -6 -45 -10 -24 b 216 220 -10 120 92 220 z m 216 -226 b 56 -158 153 -226 96 -200 b 140 -180 79 -171 107 -180 b 425 60 268 -180 425 -60 b 422 88 425 71 425 79 b 442 -3 435 60 442 29 b 216 -226 442 -125 341 -226 z',\n        },\n        noteheadDoubleWholeSquare: {\n            x_min: 0,\n            x_max: 416,\n            y_min: -190,\n            y_max: 198,\n            ha: 388,\n            o: 'm 563 217 b 528 180 563 192 544 180 l 62 180 b 36 215 52 180 36 192 l 36 268 b 17 285 36 278 27 285 b 0 268 7 285 0 278 l 0 -255 b 17 -274 0 -264 7 -274 b 36 -255 27 -274 36 -264 l 36 -213 b 66 -180 36 -197 53 -180 l 528 -180 b 563 -209 549 -180 563 -196 l 563 -255 b 580 -274 563 -264 570 -274 b 599 -255 590 -274 599 -264 l 599 268 b 580 285 599 278 590 285 b 563 268 570 285 563 278 z m 36 23 b 111 71 36 55 58 71 l 487 71 b 563 30 533 71 563 53 l 563 -22 b 487 -68 563 -53 533 -68 l 117 -68 b 36 -22 66 -68 36 -49 z',\n        },\n        noteheadSquareWhite: {\n            x_min: 0,\n            x_max: 313,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z m 40 -138 l 40 140 l 410 140 l 410 -138 z',\n        },\n        noteheadSquareBlack: {\n            x_min: 0,\n            x_max: 313,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z',\n        },\n        noteheadTriangleDownDoubleWhole: {\n            x_min: 0,\n            x_max: 483,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 696 213 b 681 223 696 219 690 223 l 662 223 b 648 213 655 223 648 219 l 648 -213 b 662 -223 648 -217 655 -223 l 681 -223 b 696 -213 690 -223 696 -217 z m 619 213 b 605 223 619 219 613 223 l 588 223 b 573 213 580 223 573 219 l 573 174 b 562 180 570 177 566 180 l 134 180 b 122 174 130 180 125 177 l 122 213 b 108 223 122 219 117 223 l 91 223 b 76 213 84 223 76 219 l 76 -213 b 91 -223 76 -217 84 -223 l 108 -223 b 122 -213 117 -223 122 -217 l 122 154 l 334 -173 b 346 -180 337 -177 341 -180 b 357 -173 351 -180 354 -177 l 573 154 l 573 -213 b 588 -223 573 -217 580 -223 l 605 -223 b 619 -213 613 -223 619 -217 z m 32 -223 b 46 -213 40 -223 46 -217 l 46 213 b 32 223 46 219 40 223 l 14 223 b 0 213 7 223 0 219 l 0 -213 b 14 -223 0 -217 7 -223 z m 428 98 b 346 -107 428 17 377 -53 b 265 96 315 -55 265 17 b 289 137 265 109 275 137 l 406 137 b 428 98 419 137 428 111 z',\n        },\n        noteheadTriangleDownWhole: {\n            x_min: 0,\n            x_max: 319,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 14 180 b 0 166 6 180 0 173 b 1 158 0 163 1 160 l 216 -173 b 228 -180 219 -177 225 -180 b 239 -173 233 -180 238 -177 l 458 158 b 459 166 458 160 459 163 b 445 180 459 173 454 180 z m 288 137 b 310 98 301 137 310 111 b 228 -108 310 17 259 -55 b 145 96 197 -56 145 17 b 170 137 145 109 157 137 z',\n        },\n        noteheadTriangleDownHalf: {\n            x_min: 0,\n            x_max: 285,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 196 -180 b 209 -173 200 -180 206 -177 l 408 157 b 410 166 409 160 410 163 b 396 180 410 173 403 180 l 14 180 b 0 166 4 180 0 173 b 1 158 0 163 0 161 l 183 -173 b 196 -180 184 -174 190 -180 z m 164 138 l 295 138 l 179 -76 l 114 37 z',\n        },\n        noteheadTriangleDownBlack: {\n            x_min: 0,\n            x_max: 292,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 207 -180 l 420 180 l 0 180 z',\n        },\n        noteheadTriangleUpDoubleWhole: {\n            x_min: 0,\n            x_max: 483,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 696 213 b 681 223 696 217 690 223 l 662 223 b 648 213 655 223 648 217 l 648 -213 b 662 -223 648 -219 655 -223 l 681 -223 b 696 -213 690 -223 696 -219 z m 619 213 b 605 223 619 217 613 223 l 588 223 b 573 213 580 223 573 217 l 573 -154 l 357 173 b 346 180 354 177 351 180 b 334 173 341 180 337 177 l 122 -154 l 122 213 b 108 223 122 217 117 223 l 91 223 b 76 213 84 223 76 217 l 76 -213 b 91 -223 76 -219 84 -223 l 108 -223 b 122 -213 117 -223 122 -219 l 122 -174 b 134 -180 125 -177 130 -180 l 562 -180 b 573 -174 566 -180 570 -177 l 573 -213 b 588 -223 573 -219 580 -223 l 605 -223 b 619 -213 613 -223 619 -219 z m 32 223 l 14 223 b 0 213 7 223 0 217 l 0 -213 b 14 -223 0 -219 7 -223 l 32 -223 b 46 -213 40 -223 46 -219 l 46 213 b 32 223 46 217 40 223 z m 428 -98 b 406 -137 428 -111 419 -137 l 289 -137 b 265 -96 275 -137 265 -109 b 346 107 265 -17 315 55 b 428 -98 377 53 428 -17 z',\n        },\n        noteheadTriangleUpWhole: {\n            x_min: 0,\n            x_max: 319,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 445 -180 b 459 -166 454 -180 459 -173 b 458 -158 459 -163 458 -160 l 239 173 b 228 180 238 177 233 180 b 216 173 225 180 219 177 l 1 -158 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 6 -180 z m 170 -137 b 145 -96 157 -137 145 -109 b 228 108 145 -17 197 56 b 310 -98 259 55 310 -17 b 288 -137 310 -111 301 -137 z',\n        },\n        noteheadTriangleUpHalf: {\n            x_min: 0,\n            x_max: 285,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 215 180 b 202 173 210 180 204 177 l 3 -157 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 7 -180 l 396 -180 b 410 -166 406 -180 410 -173 b 409 -158 410 -163 410 -161 l 228 173 b 215 180 226 174 220 180 z m 246 -138 l 115 -138 l 232 76 l 297 -37 z',\n        },\n        noteheadTriangleUpBlack: {\n            x_min: 0,\n            x_max: 293,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 422 -180 l 207 180 l 0 -180 z',\n        },\n        noteheadSlashedDoubleWhole1: {\n            x_min: 0,\n            x_max: 596,\n            y_min: -179,\n            y_max: 168,\n            ha: 347,\n            o: 'm 618 135 l 697 206 b 704 222 703 210 704 216 b 698 236 704 226 703 232 b 683 242 694 239 688 242 b 670 238 677 242 674 240 l 575 153 b 435 180 531 168 481 180 b 128 0 246 180 128 98 b 236 -148 128 -58 160 -114 l 153 -222 b 145 -238 148 -226 145 -232 b 151 -252 145 -242 148 -248 b 167 -258 156 -256 161 -258 b 181 -253 171 -258 177 -256 l 282 -164 b 420 -180 320 -173 366 -180 b 729 0 654 -180 729 -98 b 618 135 729 55 681 104 z m 114 223 l 95 223 b 82 212 88 223 82 217 l 82 -215 b 95 -223 82 -219 88 -223 l 114 -223 b 127 -215 121 -223 127 -219 l 127 212 b 114 223 127 217 121 223 z m 32 223 l 13 223 b 0 212 6 223 0 217 l 0 -215 b 13 -223 0 -219 6 -223 l 32 -223 b 45 -215 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 z m 844 223 l 825 223 b 811 212 819 223 811 217 l 811 -215 b 825 -223 811 -219 819 -223 l 844 -223 b 858 -215 851 -223 858 -219 l 858 212 b 844 223 858 217 851 223 z m 763 223 l 743 223 b 730 212 736 223 730 217 l 730 -215 b 743 -223 730 -219 736 -223 l 763 -223 b 776 -215 769 -223 776 -219 l 776 212 b 763 223 776 217 769 223 z m 282 56 b 285 89 282 68 284 79 b 399 144 301 137 354 144 b 510 95 441 144 480 124 l 327 -68 b 282 56 301 -35 282 13 z m 572 -72 b 508 -141 564 -108 544 -132 b 467 -147 495 -145 481 -147 b 360 -104 428 -147 389 -128 l 356 -98 l 537 63 b 575 -46 560 30 575 -9 b 572 -72 575 -55 573 -65 z',\n        },\n        noteheadSlashedWhole1: {\n            x_min: -22,\n            x_max: 433,\n            y_min: -157,\n            y_max: 148,\n            ha: 305,\n            o: 'm 484 140 b 308 180 431 166 367 180 b 0 1 118 180 0 99 b 73 -128 0 -48 22 -95 l -22 -190 b -32 -206 -27 -194 -32 -200 b -27 -217 -32 -210 -30 -215 b -12 -226 -23 -223 -17 -226 b 0 -223 -7 -226 -4 -225 l 112 -150 b 294 -180 157 -168 217 -180 b 602 1 526 -180 602 -98 b 523 118 602 48 570 86 l 613 177 b 624 193 619 181 624 187 b 619 204 624 197 622 200 b 603 213 615 209 609 213 b 592 209 599 213 596 212 z m 190 -52 b 154 56 170 -20 154 19 b 160 91 154 68 156 79 b 271 147 174 138 226 147 b 396 82 321 147 364 121 z m 419 50 b 446 -48 436 19 446 -14 b 337 -147 446 -120 402 -147 b 301 -141 327 -147 314 -144 b 235 -104 276 -134 253 -120 b 215 -84 226 -98 220 -91 z',\n        },\n        noteheadSlashedHalf1: {\n            x_min: -67,\n            x_max: 386,\n            y_min: -142,\n            y_max: 160,\n            ha: 302,\n            o: 'm 552 222 b 536 230 549 228 543 230 b 524 228 533 230 528 230 l 389 140 b 281 180 364 164 327 180 b 0 -60 65 180 0 13 b 7 -105 0 -78 3 -92 l -88 -167 b -96 -184 -94 -171 -96 -177 b -94 -194 -96 -187 -95 -192 b -76 -204 -89 -202 -84 -204 b -66 -202 -73 -204 -69 -203 l 29 -140 b 137 -180 55 -167 92 -180 b 420 59 374 -180 420 13 b 412 107 420 76 419 92 l 546 194 b 556 210 552 197 556 204 b 552 222 556 213 554 217 z m 315 120 b 347 112 328 120 338 117 l 46 -82 b 42 -63 43 -76 42 -69 b 315 120 42 6 248 120 z m 108 -124 b 69 -114 91 -124 79 -120 l 372 81 b 376 63 374 75 376 69 b 108 -124 376 0 174 -124 z',\n        },\n        noteheadSlashedBlack1: {\n            x_min: -80,\n            x_max: 375,\n            y_min: -165,\n            y_max: 167,\n            ha: 332,\n            o: 'm 518 240 b 507 236 514 240 510 239 l 384 148 b 284 180 359 168 324 180 b 0 -62 127 180 0 63 b 13 -115 0 -82 4 -99 l -107 -202 b -115 -217 -111 -204 -115 -212 b -111 -229 -115 -222 -114 -225 b -95 -238 -108 -235 -101 -238 b -84 -235 -91 -238 -86 -236 l 39 -148 b 140 -180 63 -170 99 -180 b 425 59 268 -180 425 -62 b 410 117 425 81 420 101 l 530 203 b 540 219 536 207 540 213 b 518 240 540 229 528 240 z',\n        },\n        noteheadSlashedDoubleWhole2: {\n            x_min: 0,\n            x_max: 596,\n            y_min: -178,\n            y_max: 169,\n            ha: 347,\n            o: 'm 729 0 b 435 180 729 102 569 180 b 278 156 374 180 321 170 l 184 239 b 170 243 181 242 176 243 b 154 238 166 243 158 240 b 150 223 151 233 150 228 b 156 207 150 217 153 212 l 233 138 b 128 0 167 107 128 56 b 420 -180 128 -94 210 -180 b 575 -164 482 -180 533 -174 l 672 -252 b 687 -256 677 -255 681 -256 b 703 -251 691 -256 698 -255 b 707 -236 706 -246 707 -240 b 701 -220 707 -230 706 -225 l 619 -150 b 729 0 700 -117 729 -62 z m 114 223 l 95 223 b 82 213 88 223 82 217 l 82 -213 b 95 -223 82 -219 88 -223 l 114 -223 b 127 -213 121 -223 127 -219 l 127 213 b 114 223 127 217 121 223 z m 32 223 l 13 223 b 0 213 6 223 0 217 l 0 -213 b 13 -223 0 -219 6 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 213 b 32 223 45 217 39 223 z m 844 223 l 825 223 b 811 213 819 223 811 217 l 811 -213 b 825 -223 811 -219 819 -223 l 844 -223 b 858 -213 851 -223 858 -219 l 858 213 b 844 223 858 217 851 223 z m 763 223 l 743 223 b 730 213 736 223 730 217 l 730 -213 b 743 -223 730 -219 736 -223 l 763 -223 b 776 -213 769 -223 776 -219 l 776 213 b 763 223 776 217 769 223 z m 312 124 b 399 144 336 141 369 144 b 575 -46 495 144 575 40 b 563 -98 575 -65 570 -81 z m 508 -141 b 467 -147 495 -145 481 -147 b 360 -104 428 -147 389 -128 b 330 -72 350 -95 340 -82 b 282 56 304 -37 282 10 b 285 89 282 68 284 79 b 536 -130 287 89 304 75 z',\n        },\n        noteheadSlashedWhole2: {\n            x_min: -18,\n            x_max: 436,\n            y_min: -154,\n            y_max: 151,\n            ha: 305,\n            o: 'm 531 -128 b 602 1 582 -96 602 -49 b 308 180 602 104 441 180 b 114 144 230 180 164 166 l 4 215 b -6 217 1 217 -3 217 b -22 209 -13 217 -19 215 b -26 197 -24 204 -26 200 b -16 181 -26 192 -22 184 l 75 121 b 0 1 27 91 0 49 b 294 -180 0 -94 82 -180 b 491 -150 379 -180 444 -168 l 598 -219 b 608 -222 600 -222 605 -222 b 624 -213 615 -222 621 -219 b 628 -202 626 -209 628 -206 b 618 -186 628 -196 624 -189 z m 168 108 b 271 147 190 141 233 147 b 446 -48 369 147 446 40 b 445 -72 446 -56 446 -63 z m 154 69 l 429 -109 b 382 -141 419 -125 402 -135 b 337 -147 367 -144 351 -147 b 301 -141 327 -147 314 -144 b 235 -104 276 -134 253 -120 b 203 -72 223 -94 213 -82 b 154 58 177 -39 154 12 z',\n        },\n        noteheadSlashedHalf2: {\n            x_min: -73,\n            x_max: 380,\n            y_min: -134,\n            y_max: 168,\n            ha: 302,\n            o: 'm 537 -156 l 383 -58 b 422 60 413 -9 422 39 b 281 180 422 134 364 180 b 101 127 203 180 144 157 l -75 239 b -85 242 -78 242 -82 242 b -102 233 -92 242 -98 239 b -105 222 -104 229 -105 225 b -95 206 -105 216 -102 209 l 69 99 b 0 -59 19 46 0 -20 b 138 -180 0 -135 60 -180 b 359 -88 248 -180 317 -138 l 516 -190 b 527 -193 520 -192 524 -193 b 543 -183 534 -193 540 -190 b 547 -173 546 -180 547 -176 b 537 -156 547 -166 543 -160 z m 367 92 b 377 63 374 82 377 73 b 318 -14 377 43 361 20 l 184 72 b 317 121 248 108 289 121 b 367 92 344 121 357 109 z m 248 -66 b 108 -124 181 -108 138 -124 b 50 -92 78 -124 60 -109 b 42 -63 46 -84 42 -73 b 145 49 42 -35 68 0 l 285 -40 b 248 -66 274 -49 261 -56 z',\n        },\n        noteheadSlashedBlack2: {\n            x_min: -79,\n            x_max: 376,\n            y_min: -164,\n            y_max: 168,\n            ha: 332,\n            o: 'm 531 -200 l 363 -78 b 425 59 402 -37 425 10 b 285 180 425 132 367 180 b 92 114 210 180 144 154 l -81 238 b -94 242 -85 240 -89 242 b -111 232 -99 242 -107 238 b -114 220 -112 229 -114 225 b -105 204 -114 215 -111 207 l 62 85 b 0 -62 23 43 0 -9 b 140 -180 0 -137 62 -180 b 331 -108 204 -180 275 -153 l 507 -233 b 520 -236 511 -236 517 -236 b 537 -228 527 -236 533 -233 b 541 -216 540 -225 541 -220 b 531 -200 541 -210 537 -203 z',\n        },\n        noteheadDiamondDoubleWhole: {\n            x_min: 0,\n            x_max: 432,\n            y_min: -155,\n            y_max: 155,\n            ha: 310,\n            o: 'm 592 223 b 580 215 585 223 580 219 l 580 -215 b 592 -223 580 -219 585 -223 l 608 -223 b 622 -215 615 -223 622 -219 l 622 215 b 608 223 622 219 615 223 z m 517 223 b 504 215 510 223 504 219 l 504 -215 b 517 -223 504 -219 510 -223 l 533 -223 b 544 -215 540 -223 544 -219 l 544 215 b 533 223 544 219 540 223 z m 246 179 b 240 180 243 179 242 180 b 232 176 236 180 233 179 l 118 22 b 117 17 117 20 117 19 l 117 215 b 104 223 117 219 111 223 l 88 223 b 75 215 81 223 75 219 l 75 -215 b 88 -223 75 -219 81 -223 l 104 -223 b 117 -215 111 -223 117 -219 l 117 14 l 118 14 b 122 7 118 12 120 10 l 374 -179 b 382 -180 376 -180 379 -180 b 390 -177 384 -180 387 -180 l 503 -23 l 503 -17 b 500 -9 503 -13 503 -10 z m 12 223 b 0 215 4 223 0 219 l 0 -215 b 12 -223 0 -219 4 -223 l 29 -223 b 40 -215 36 -223 40 -219 l 40 215 b 29 223 40 219 36 223 z m 183 39 b 179 46 181 39 179 43 b 229 112 226 112 228 112 b 236 109 229 112 233 111 l 436 -39 b 439 -46 438 -39 439 -42 b 390 -112 393 -111 392 -112 b 383 -109 389 -112 386 -111 z',\n        },\n        noteheadDiamondWhole: {\n            x_min: 0,\n            x_max: 270,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 386 -23 b 389 -16 387 -20 389 -19 b 383 -7 389 -13 386 -9 l 130 179 b 122 180 128 180 125 180 b 115 177 120 180 117 180 l 3 23 b 0 17 1 20 0 19 b 4 7 0 16 3 10 l 258 -179 b 264 -180 261 -179 262 -180 b 272 -176 268 -180 271 -179 z m 66 40 b 62 48 65 42 62 45 l 109 111 b 112 112 109 112 111 112 b 118 111 115 112 117 111 l 320 -37 b 324 -46 323 -39 324 -42 b 275 -111 278 -111 276 -111 b 268 -108 272 -111 271 -109 z',\n        },\n        noteheadDiamondHalf: {\n            x_min: 0,\n            x_max: 251,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 359 -7 b 361 0 360 -6 361 -3 b 359 7 361 3 360 4 l 189 177 b 180 180 186 179 183 180 b 174 177 179 180 176 179 l 4 7 b 0 0 1 4 0 3 b 4 -7 0 -3 1 -6 l 174 -177 b 180 -180 176 -180 179 -180 b 189 -177 183 -180 186 -180 z m 266 26 b 138 -71 266 -12 176 -71 b 96 -50 121 -71 108 -63 b 88 -24 89 -43 88 -32 b 215 73 88 13 177 73 b 266 26 238 73 266 50 z',\n        },\n        noteheadDiamondBlack: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 357 -6 b 360 1 359 -4 360 -1 b 357 9 360 4 359 7 l 189 177 b 180 180 187 179 184 180 b 171 177 177 180 173 179 l 3 9 b 0 1 0 6 0 4 b 4 -7 0 -1 1 -4 l 173 -177 b 180 -180 176 -180 177 -180 b 187 -177 181 -180 184 -180 z',\n        },\n        noteheadParenthesis: {\n            x_min: -73,\n            x_max: 368,\n            y_min: -180,\n            y_max: 182,\n            ha: 362,\n            o: 'm 52 -249 b -30 -144 3 -212 -14 -190 b -52 4 -45 -102 -52 -56 b 52 252 -52 118 -36 179 l 46 262 b -105 3 -49 197 -105 124 b 45 -259 -105 -109 -48 -200 z m 382 -259 b 530 3 474 -202 530 -108 b 379 262 530 122 474 200 l 373 252 b 478 4 462 180 478 118 b 456 -144 478 -56 471 -102 b 373 -249 439 -190 422 -212 z',\n        },\n        noteheadParenthesisRight: {\n            x_min: -36,\n            x_max: 73,\n            y_min: -181,\n            y_max: 181,\n            ha: 362,\n            o: 'm -43 -261 b 105 1 49 -203 105 -109 b -46 261 105 121 49 199 l -52 251 b 53 3 37 179 53 117 b 32 -145 53 -58 46 -104 b -52 -251 14 -192 -3 -213 z',\n        },\n        noteheadParenthesisLeft: {\n            x_min: 0,\n            x_max: 109,\n            y_min: -181,\n            y_max: 181,\n            ha: 362,\n            o: 'm 157 -251 b 75 -145 108 -213 91 -192 b 53 3 60 -104 53 -58 b 157 251 53 117 69 177 l 151 261 b 0 1 56 196 0 122 b 150 -261 0 -111 58 -202 z',\n        },\n        noteheadMoonBlack: {\n            x_min: 0,\n            x_max: 315,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 228 -180 b 454 0 343 -180 454 -130 l 454 180 l 0 180 l 0 0 b 228 -180 0 -131 112 -180 z',\n        },\n        noteheadTriangleLeftBlack: {\n            x_min: 0,\n            x_max: 339,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 488 -180 l 0 180 l 0 -180 z',\n        },\n        noteheadTriangleRightBlack: {\n            x_min: 0,\n            x_max: 339,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 488 180 l 0 -180 l 488 -180 z',\n        },\n        noteheadTriangleRoundDownBlack: {\n            x_min: 0,\n            x_max: 278,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 200 -180 l 400 112 l 383 124 b 199 180 327 161 264 180 b 16 124 135 180 73 161 l 0 112 z',\n        },\n        augmentationDot: {\n            x_min: 0,\n            x_max: 100,\n            y_min: -50,\n            y_max: 50,\n            ha: 100,\n            o: 'm 144 0 b 72 72 144 40 112 72 b 0 0 32 72 0 40 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 z',\n        },\n        tremolo1: {\n            x_min: -150,\n            x_max: 150,\n            y_min: -93,\n            y_max: 94,\n            ha: 187,\n            o: 'm 216 -45 l 216 135 l -216 46 l -216 -134 z',\n        },\n        flag8thUp: {\n            x_min: 0,\n            x_max: 264,\n            y_min: -810.1921176545985,\n            y_max: 9,\n            ha: 819.1921176545985,\n            o: 'm 343 -1138 b 380 -888 343 -1138 380 -1001 b 215 -395 380 -708 305 -539 b 58 -19 141 -281 81 -157 b 27 13 53 4 42 13 b 0 -9 12 13 0 9 l 0 -353 b 284 -688 95 -370 232 -566 b 318 -904 305 -737 318 -819 b 284 -1102 318 -969 308 -1037 b 279 -1123 281 -1110 279 -1117 b 302 -1165 279 -1146 294 -1159 b 343 -1138 311 -1171 336 -1162 z',\n        },\n        flag8thDown: {\n            x_min: 0,\n            x_max: 306,\n            y_min: -14,\n            y_max: 808,\n            ha: 822,\n            o: 'm 346 1094 b 376 897 366 1034 376 962 b 318 642 376 812 340 691 b 0 340 265 521 193 405 l 0 1 b 23 -20 0 -13 12 -20 b 58 12 36 -20 55 -12 b 262 387 82 148 189 274 b 441 881 353 530 441 701 b 400 1142 441 994 412 1096 b 377 1164 396 1158 387 1164 b 346 1094 356 1164 331 1136 z',\n        },\n        flag16thUp: {\n            x_min: 0,\n            x_max: 279,\n            y_min: -813,\n            y_max: 2,\n            ha: 815,\n            o: 'm 392 -1146 b 402 -988 397 -1139 402 -1057 l 402 -956 b 360 -783 402 -896 386 -837 b 359 -770 360 -779 359 -776 b 360 -760 359 -768 359 -765 b 396 -577 364 -752 396 -665 b 392 -526 396 -559 395 -543 b 236 -275 377 -428 340 -387 b 53 -16 158 -192 78 -168 b 24 3 50 0 33 3 b 0 -12 16 3 0 -1 l 0 -570 l 7 -570 b 298 -778 96 -573 199 -576 b 344 -992 331 -847 344 -917 b 333 -1120 344 -1034 340 -1077 b 331 -1133 331 -1126 331 -1129 b 363 -1171 331 -1152 343 -1171 b 392 -1146 373 -1171 383 -1165 z m 301 -661 b 223 -562 278 -625 253 -596 b 59 -331 156 -484 89 -449 b 58 -327 58 -330 58 -328 b 78 -312 58 -321 66 -312 l 89 -312 b 302 -464 177 -312 255 -393 b 341 -592 328 -501 341 -546 b 340 -621 341 -602 341 -611 b 330 -658 337 -632 337 -647 b 311 -667 328 -662 318 -667 b 301 -661 307 -667 304 -665 z',\n        },\n        flag16thDown: {\n            x_min: 0,\n            x_max: 290.8951581511223,\n            y_min: -9,\n            y_max: 812.0064,\n            ha: 821.0064,\n            o: 'm 346 1132 b 312 768 367 1011 367 880 b 7 559 213 566 96 562 l 0 559 l 0 1 b 24 -13 0 -6 10 -13 b 53 6 35 -13 50 -10 b 406 516 88 228 372 289 b 410 567 409 531 410 549 b 374 750 410 655 379 742 b 373 760 373 753 373 756 b 374 773 373 766 374 769 b 405 1138 426 881 428 1022 b 370 1169 397 1171 387 1169 b 346 1132 353 1168 341 1156 z m 325 657 b 344 647 333 657 343 652 b 354 611 351 636 351 622 b 356 582 356 600 356 590 b 317 454 356 534 343 491 b 89 302 269 383 177 302 l 78 302 b 58 317 66 302 58 310 b 59 321 58 318 58 320 b 238 552 89 439 170 472 b 315 651 268 585 292 613 b 325 657 318 655 321 657 z',\n        },\n        flag32ndUp: {\n            x_min: 0,\n            x_max: 261,\n            y_min: -812,\n            y_max: 149,\n            ha: 961,\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 366 -289 369 -315 369 -302 b 220 -58 350 -202 317 -163 b 46 187 148 20 71 43 b 20 215 45 200 35 215 b 0 197 12 215 0 207 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 56 -390 147 -527 88 -495 b 73 -367 53 -380 60 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\n        },\n        flag32ndDown: {\n            x_min: 0,\n            x_max: 273,\n            y_min: -172,\n            y_max: 812,\n            ha: 984,\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -229 b 20 -248 0 -242 9 -248 b 48 -219 35 -248 46 -232 b 229 36 72 -69 154 -46 b 380 278 330 145 364 186 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z',\n        },\n        flag64thUp: {\n            x_min: 0,\n            x_max: 261,\n            y_min: -812,\n            y_max: 347,\n            ha: 1159,\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 220 228 350 84 317 122 b 46 472 148 305 71 328 b 20 500 45 485 32 500 b 0 482 10 500 0 492 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 58 187 148 20 82 43 b 56 193 58 189 58 192 b 300 24 138 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 52 -376 63 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\n        },\n        flag64thDown: {\n            x_min: 0,\n            x_max: 273,\n            y_min: -376,\n            y_max: 812,\n            ha: 1188,\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -523 b 20 -541 0 -534 9 -541 b 48 -513 35 -541 46 -526 b 229 -258 72 -363 154 -340 b 380 -16 330 -148 364 -108 b 384 27 383 -1 384 13 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z',\n        },\n        flag128thUp: {\n            x_min: 0,\n            x_max: 261,\n            y_min: -812,\n            y_max: 533,\n            ha: 1345,\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 341 75 360 26 353 50 b 369 222 354 111 369 167 b 366 264 369 236 369 251 b 220 495 350 351 317 390 b 46 740 148 573 71 596 b 22 768 45 753 35 768 b 0 750 10 768 0 760 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 292 b 321 223 315 264 321 242 b 317 193 321 212 318 203 b 301 135 314 180 308 158 b 220 228 281 161 255 190 b 55 461 151 304 79 327 b 300 292 134 461 220 426 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 56 187 148 20 81 43 b 55 193 56 189 56 192 b 300 24 137 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 53 -376 62 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\n        },\n        flag128thDown: {\n            x_min: 0,\n            x_max: 273,\n            y_min: -580,\n            y_max: 812,\n            ha: 1392,\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -816 b 20 -835 0 -828 7 -835 b 48 -806 33 -835 46 -819 b 229 -552 72 -657 154 -634 b 380 -310 330 -442 364 -402 b 384 -266 383 -295 384 -281 b 351 -105 384 -206 366 -143 b 384 27 372 -66 384 -16 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z m 330 -238 b 334 -268 331 -248 334 -256 b 311 -340 334 -287 328 -310 b 56 -516 229 -478 137 -516 b 229 -258 75 -380 145 -348 b 311 -166 264 -220 289 -192 z',\n        },\n        accidentalFlat: {\n            x_min: 0,\n            x_max: 226,\n            y_min: -175,\n            y_max: 439,\n            ha: 614,\n            o: 'm 17 -245 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 82 -225 117 -186 b 325 82 281 -72 325 16 b 196 220 325 164 262 216 b 117 196 171 220 137 209 b 85 176 108 189 92 176 b 78 177 82 176 81 176 b 62 202 68 181 62 192 b 72 608 63 233 72 579 b 45 632 72 624 59 632 b 0 592 24 632 1 618 b 17 -245 0 592 6 -230 z m 68 -117 b 63 27 68 -117 63 -30 b 66 73 63 50 65 68 b 167 144 76 102 134 144 b 226 60 209 144 226 96 b 98 -134 226 -17 160 -95 b 84 -138 92 -137 88 -138 b 68 -117 71 -138 68 -124 z',\n        },\n        accidentalNatural: {\n            x_min: 0,\n            x_max: 168,\n            y_min: -335,\n            y_max: 341,\n            ha: 676,\n            o: 'm 203 261 b 197 259 200 261 199 259 b 68 226 197 259 105 226 b 53 233 59 226 53 228 l 53 474 b 36 491 53 484 45 491 l 17 491 b 0 474 7 491 0 484 l 0 -268 b 13 -281 0 -276 4 -281 l 16 -279 b 22 -278 17 -279 20 -279 b 164 -235 42 -269 122 -235 b 189 -251 179 -235 189 -239 l 189 -465 b 206 -482 189 -475 196 -482 l 225 -482 b 242 -465 233 -482 242 -475 l 242 258 b 230 269 242 265 236 269 b 225 268 229 269 226 269 z m 53 56 b 176 114 53 76 141 114 b 189 107 184 114 189 112 l 189 -42 b 71 -101 189 -68 107 -101 b 53 -92 60 -101 53 -98 z',\n        },\n        accidentalSharp: {\n            x_min: 0,\n            x_max: 249,\n            y_min: -348,\n            y_max: 350,\n            ha: 698,\n            o: 'm 341 170 b 359 194 351 174 359 186 l 359 297 b 348 308 359 304 354 308 b 341 307 346 308 344 308 b 305 294 341 307 312 295 b 285 312 295 294 285 301 l 285 488 b 265 504 285 497 276 504 b 242 488 251 504 242 497 l 242 301 b 223 259 240 287 236 268 b 132 223 206 249 157 229 b 115 252 120 223 115 240 l 115 425 b 95 441 115 433 105 441 b 72 425 81 441 72 433 l 72 230 b 55 192 72 210 63 196 b 17 176 46 187 17 176 b 0 153 7 173 0 161 l 0 50 b 13 37 0 42 4 37 l 16 39 b 50 53 17 39 39 48 l 52 55 b 72 29 63 55 72 40 l 72 -114 b 56 -147 72 -130 65 -143 b 17 -163 48 -150 17 -163 b 0 -186 7 -166 0 -177 l 0 -288 b 13 -301 0 -297 4 -301 l 16 -300 b 50 -287 17 -300 37 -291 b 55 -285 52 -285 53 -285 b 72 -308 65 -285 72 -301 l 72 -485 b 91 -501 72 -494 81 -501 b 115 -485 105 -501 115 -494 l 115 -285 b 130 -253 115 -266 122 -256 l 217 -217 b 219 -217 217 -217 219 -217 l 222 -216 b 242 -242 235 -216 242 -233 l 242 -422 b 261 -438 242 -431 251 -438 b 285 -422 276 -438 285 -431 l 285 -217 b 301 -184 285 -206 291 -189 b 341 -168 311 -180 341 -168 b 359 -144 351 -164 359 -153 l 359 -42 b 348 -30 359 -35 354 -30 b 341 -32 346 -30 344 -30 l 304 -46 b 285 -20 295 -46 285 -37 l 285 114 b 304 156 285 124 292 151 z m 242 -65 b 132 -122 233 -94 166 -122 b 115 -115 124 -122 117 -120 b 111 -43 112 -109 111 -78 b 115 63 111 1 112 52 b 220 118 118 88 184 118 b 242 109 230 118 239 115 b 248 27 245 102 248 66 b 242 -65 248 -12 245 -52 z',\n        },\n        accidentalDoubleSharp: {\n            x_min: 0,\n            x_max: 247,\n            y_min: -125,\n            y_max: 127,\n            ha: 252,\n            o: 'm 274 -46 b 206 1 258 -37 206 -9 b 274 50 206 22 253 43 b 278 50 275 50 276 50 l 287 49 b 346 63 304 49 331 52 b 356 115 353 71 356 92 b 292 183 356 174 351 183 b 233 173 266 183 240 180 b 226 117 228 168 226 143 b 179 49 219 101 196 49 b 130 117 158 49 135 96 b 118 173 130 141 125 167 b 66 183 112 180 89 183 b 7 173 42 183 16 180 b 0 120 3 170 0 145 b 7 63 0 94 3 68 b 68 49 17 55 43 49 b 82 50 73 49 78 50 b 150 3 98 42 150 13 b 84 -46 150 -16 104 -39 l 69 -46 b 7 -56 43 -46 16 -49 b 0 -111 3 -60 0 -85 b 7 -166 0 -137 3 -163 b 65 -180 17 -174 40 -180 b 118 -166 86 -180 109 -176 b 130 -111 127 -158 130 -134 b 132 -105 130 -109 131 -107 b 177 -45 141 -85 158 -45 b 226 -111 196 -45 220 -91 b 233 -166 226 -137 228 -161 b 291 -180 243 -174 266 -180 b 356 -114 346 -180 356 -166 b 346 -56 356 -89 351 -63 b 288 -46 338 -49 312 -46 z',\n        },\n        accidentalDoubleFlat: {\n            x_min: 0,\n            x_max: 411,\n            y_min: -175,\n            y_max: 437,\n            ha: 612,\n            o: 'm 452 217 b 384 194 426 217 408 207 b 350 176 374 189 363 176 b 343 177 347 176 344 176 b 328 202 333 180 328 190 b 337 606 328 232 337 579 b 310 629 337 622 324 629 b 265 592 291 629 268 616 b 269 194 265 592 266 395 b 196 217 248 209 223 217 l 187 217 b 120 194 160 217 143 207 b 85 176 108 189 98 176 b 78 177 82 176 81 176 b 62 202 68 180 62 190 b 72 606 62 232 72 579 b 45 629 72 622 59 629 b 0 592 24 629 1 616 b 17 -245 0 592 7 -232 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 84 -226 120 -186 b 274 -50 206 -124 246 -85 b 284 -245 276 -158 279 -240 b 295 -252 288 -251 292 -252 b 304 -249 300 -252 304 -249 b 416 -163 348 -226 383 -186 b 592 82 546 -72 592 16 b 461 217 592 163 528 216 z m 96 -134 b 84 -138 92 -137 86 -138 b 68 -115 72 -138 68 -124 b 63 26 68 -115 63 -30 b 66 72 63 49 65 66 b 168 144 75 101 134 144 b 226 59 212 144 226 95 b 96 -134 226 -22 161 -94 z m 361 -134 b 348 -138 356 -137 351 -138 b 333 -115 337 -138 333 -124 b 328 39 333 -115 328 -16 b 330 72 328 55 328 68 b 433 144 338 101 399 144 b 468 130 448 144 459 140 b 490 59 481 112 490 88 b 361 -134 490 -22 426 -94 z',\n        },\n        accidentalParensLeft: {\n            x_min: 0,\n            x_max: 141,\n            y_min: -248,\n            y_max: 247,\n            ha: 495,\n            o: 'm 203 331 l 203 351 b 202 356 203 354 203 356 b 0 0 60 281 0 140 b 199 -357 0 -144 60 -269 b 203 -354 200 -357 203 -356 l 203 -333 b 200 -327 203 -330 202 -328 b 86 0 118 -253 86 -160 b 200 324 86 158 120 251 b 203 331 202 325 203 327 z',\n        },\n        accidentalParensRight: {\n            x_min: 0,\n            x_max: 141,\n            y_min: -248,\n            y_max: 247,\n            ha: 495,\n            o: 'm 0 331 b 3 324 0 327 1 325 b 117 0 84 251 117 158 b 3 -327 117 -160 85 -253 b 0 -333 1 -328 0 -330 l 0 -354 b 4 -357 0 -356 3 -357 b 203 0 143 -269 203 -144 b 1 356 203 140 143 281 b 0 351 0 356 0 354 z',\n        },\n        accidentalQuarterToneFlatStein: {\n            x_min: 1,\n            x_max: 227,\n            y_min: -175,\n            y_max: 439,\n            ha: 614,\n            o: 'm 310 -245 b 327 592 321 -230 327 592 b 282 632 325 618 302 632 b 255 608 268 632 255 624 b 265 202 255 579 264 233 b 249 177 265 192 259 181 b 242 176 246 176 245 176 b 210 196 235 176 219 189 b 131 220 190 209 156 220 b 1 85 65 216 1 164 b 174 -161 1 16 46 -72 b 288 -249 210 -186 245 -225 b 297 -252 288 -249 292 -252 b 310 -245 301 -252 305 -251 z m 259 -117 b 243 -138 259 -124 256 -138 b 229 -134 239 -138 235 -137 b 101 60 167 -95 101 -17 b 160 144 101 96 118 144 b 261 73 193 144 251 102 b 264 27 262 68 264 50 b 259 -117 264 -30 259 -117 z',\n        },\n        accidentalThreeQuarterTonesFlatZimmermann: {\n            x_min: 1,\n            x_max: 466,\n            y_min: -175,\n            y_max: 439,\n            ha: 614,\n            o: 'm 363 -245 b 376 -252 367 -251 372 -252 b 384 -249 380 -252 384 -249 b 497 -161 428 -226 464 -186 b 671 84 625 -72 671 16 b 541 220 671 164 606 217 b 513 217 531 220 523 219 b 464 196 495 212 480 206 b 431 176 452 189 442 176 b 423 177 428 176 426 176 b 408 202 413 180 408 190 l 419 608 b 392 632 419 625 406 632 b 346 592 372 632 347 618 b 363 -245 346 592 351 -230 z m 289 -249 b 297 -252 289 -249 292 -252 b 310 -245 300 -252 305 -251 b 328 592 321 -230 328 592 b 282 631 327 618 302 631 b 255 608 268 631 255 624 l 266 202 b 251 177 266 190 261 180 b 243 176 248 176 246 176 b 210 196 232 176 222 189 b 164 216 196 204 180 210 l 163 217 b 132 220 151 219 143 220 b 1 84 65 217 1 163 b 177 -163 1 16 48 -72 b 289 -249 210 -186 245 -226 z m 262 72 b 265 26 264 66 265 49 b 261 -115 265 -30 261 -115 b 245 -138 261 -124 258 -138 b 230 -134 240 -138 236 -137 b 102 60 166 -92 102 -20 b 124 128 102 88 111 112 b 161 144 134 138 147 144 b 199 134 173 144 184 141 b 262 72 219 122 256 92 z m 413 -115 b 409 26 413 -115 409 -30 b 412 72 409 49 410 66 b 514 144 420 102 480 144 b 570 60 557 144 570 96 b 442 -134 570 -23 508 -91 b 429 -138 436 -137 433 -138 b 413 -115 418 -138 413 -124 z',\n        },\n        accidentalQuarterToneSharpStein: {\n            x_min: 0,\n            x_max: 179,\n            y_min: -353,\n            y_max: 307,\n            ha: 660,\n            o: 'm 258 240 b 246 252 258 248 252 252 b 240 251 245 252 242 252 b 168 225 240 251 171 225 b 150 253 156 225 150 240 l 150 426 b 130 442 150 435 141 442 b 105 418 108 442 105 429 l 105 230 b 91 193 105 219 101 202 b 17 161 65 183 42 171 b 0 138 9 158 0 147 l 0 36 b 13 23 0 27 4 23 l 16 24 b 86 53 17 24 73 49 l 88 55 b 107 30 98 55 107 42 l 107 -114 b 92 -145 107 -130 101 -143 l 17 -177 b 0 -200 9 -180 0 -192 l 0 -302 b 13 -315 0 -311 4 -315 l 16 -314 b 85 -285 17 -314 72 -291 b 105 -312 92 -282 105 -301 l 105 -492 b 125 -508 105 -501 114 -508 b 150 -484 147 -508 150 -498 l 150 -285 b 151 -274 150 -281 150 -278 b 164 -253 153 -265 158 -256 b 240 -225 176 -251 240 -225 b 258 -202 249 -222 258 -210 l 258 -99 b 245 -86 258 -91 253 -86 l 242 -88 b 240 -88 242 -88 240 -88 l 240 -86 b 168 -115 240 -86 174 -114 b 148 -91 158 -115 148 -107 l 148 43 b 167 85 148 55 156 81 b 240 114 180 91 240 114 b 258 138 249 118 258 128 z',\n        },\n        accidentalThreeQuarterTonesSharpStein: {\n            x_min: 3,\n            x_max: 317,\n            y_min: -347,\n            y_max: 369,\n            ha: 716,\n            o: 'm 456 324 b 448 336 456 330 454 336 b 393 317 445 336 400 320 b 389 315 392 315 390 315 b 383 325 386 315 383 318 l 383 508 b 360 531 383 528 379 531 b 337 508 341 531 337 527 l 337 318 b 325 291 337 300 334 294 b 268 268 320 288 287 276 b 253 281 256 268 253 274 l 253 464 b 230 487 253 484 249 487 b 207 464 212 487 207 482 l 207 264 b 194 240 207 253 204 245 l 132 217 b 131 217 132 217 132 217 l 130 216 b 118 229 122 216 118 220 l 118 420 b 95 444 118 439 114 444 b 72 420 76 444 72 439 l 72 212 b 60 190 72 197 68 193 l 16 173 b 4 161 9 170 4 167 l 4 50 b 13 39 4 45 9 39 b 58 55 16 39 46 49 b 63 56 60 56 62 56 b 72 42 71 56 72 50 l 72 -125 b 58 -150 72 -137 65 -147 l 16 -166 b 4 -177 9 -168 4 -171 l 4 -289 b 14 -301 4 -295 9 -301 b 53 -287 16 -301 40 -291 b 62 -285 56 -285 59 -285 b 72 -298 69 -285 72 -289 l 72 -477 b 95 -500 72 -495 76 -500 b 118 -477 114 -500 118 -495 l 118 -278 b 127 -259 118 -269 121 -261 l 196 -232 b 207 -243 204 -232 207 -235 l 207 -432 b 230 -455 207 -452 212 -455 b 253 -432 249 -455 253 -451 l 253 -228 b 268 -204 253 -216 259 -207 l 320 -186 b 328 -183 323 -184 325 -183 b 337 -194 334 -183 337 -187 l 337 -387 b 360 -410 337 -408 341 -410 b 383 -387 379 -410 383 -406 l 383 -174 b 395 -157 383 -166 390 -158 l 445 -138 b 456 -127 452 -135 456 -132 l 456 -14 b 448 -3 456 -10 454 -3 b 397 -22 445 -3 408 -17 l 396 -23 b 383 -6 387 -23 383 -16 l 383 163 b 392 181 383 173 384 179 b 445 202 397 183 445 202 b 456 213 452 203 456 207 z m 337 -45 b 266 -78 333 -56 287 -78 b 258 -75 262 -78 259 -76 b 253 19 255 -71 253 -27 b 258 130 253 69 255 122 b 333 163 264 141 315 163 b 337 161 334 163 337 161 b 341 78 340 157 341 120 b 337 -45 341 24 340 -37 z m 118 -127 b 114 -48 114 -121 114 -86 b 118 78 114 6 115 68 b 200 114 122 91 180 114 b 207 111 204 114 206 112 b 212 22 210 107 212 66 b 207 -94 212 -29 210 -85 b 127 -130 203 -108 148 -130 b 118 -127 122 -130 120 -128 z',\n        },\n        accidentalBuyukMucennebFlat: {\n            x_min: 1,\n            x_max: 287,\n            y_min: -174,\n            y_max: 438,\n            ha: 612,\n            o: 'm 379 452 b 370 464 379 458 377 464 b 164 389 366 464 170 392 b 156 396 163 389 156 393 b 157 436 157 409 157 428 b 167 452 157 445 161 449 b 366 526 173 455 366 526 b 379 540 374 528 379 534 l 379 611 b 370 622 379 616 377 622 b 170 550 366 622 174 552 b 160 557 163 550 160 554 b 161 608 160 585 161 602 b 134 631 161 624 148 631 b 89 590 114 631 91 616 l 89 528 b 81 517 89 526 88 518 b 16 491 76 514 16 491 b 1 480 6 490 1 485 l 1 406 b 13 395 1 400 4 395 l 14 396 b 79 419 16 396 72 415 b 89 412 86 419 89 415 b 91 376 89 399 89 386 b 82 359 91 364 89 361 b 16 331 76 356 16 331 b 1 321 6 331 1 328 l 1 248 b 13 236 1 242 4 236 b 79 262 16 236 71 258 b 92 251 89 262 92 256 b 107 -242 95 23 101 -236 b 120 -251 111 -249 115 -251 b 128 -248 124 -251 128 -248 b 240 -160 171 -225 207 -184 b 413 84 367 -71 413 16 b 284 220 413 166 350 216 b 207 196 259 220 229 209 b 170 176 196 190 184 176 l 168 177 b 151 203 157 181 151 192 b 153 269 151 210 151 236 b 163 292 153 275 153 289 b 366 367 173 297 366 367 b 379 383 374 370 379 376 z m 186 -132 b 173 -137 180 -135 176 -137 b 157 -114 161 -137 157 -122 b 153 35 157 -114 153 -22 b 154 73 153 53 153 68 b 219 135 160 92 197 124 b 255 144 232 141 243 144 b 292 130 269 144 282 140 b 314 62 305 114 314 91 b 186 -132 314 -17 251 -94 z',\n        },\n        accidentalBakiyeFlat: {\n            x_min: -1,\n            x_max: 286,\n            y_min: -175,\n            y_max: 439,\n            ha: 614,\n            o: 'm 377 454 b 369 467 377 458 376 467 b 363 465 367 467 364 467 b 161 390 363 465 167 393 b 153 399 154 390 153 395 b 157 608 154 494 157 593 b 130 632 157 624 144 632 b 86 592 111 632 88 618 b 88 377 86 592 86 501 b 76 356 88 373 88 360 l 12 331 b -1 320 3 330 -1 327 l -1 248 b 9 236 -1 242 1 236 b 81 264 12 236 78 261 b 89 258 86 264 89 261 b 104 -245 92 30 96 -236 b 115 -252 108 -251 112 -252 b 124 -249 120 -252 124 -249 b 239 -161 167 -226 203 -186 b 412 84 367 -72 412 17 b 282 220 412 166 348 216 b 255 216 274 220 264 219 b 203 196 238 212 222 206 b 171 177 193 189 177 177 b 163 179 168 177 166 177 b 147 202 153 181 147 192 b 147 216 147 204 147 209 l 150 262 b 150 276 150 269 150 275 b 158 291 150 287 154 289 b 363 370 163 292 363 370 b 377 384 373 373 377 379 z m 181 -134 b 167 -138 176 -137 171 -138 b 153 -117 156 -138 153 -125 b 148 27 153 -117 148 -30 b 151 73 148 50 150 68 b 255 144 161 105 219 144 b 312 62 298 144 312 99 b 181 -134 312 -19 249 -96 z',\n        },\n        accidentalKomaSharp: {\n            x_min: 0,\n            x_max: 229,\n            y_min: -337,\n            y_max: 322,\n            ha: 659,\n            o: 'm 312 151 b 330 176 323 156 330 166 l 330 278 b 320 289 330 285 327 289 b 312 288 318 289 315 289 b 200 246 312 288 203 248 b 181 275 187 246 181 264 l 181 448 b 163 464 181 456 173 464 b 138 441 140 464 138 452 l 138 253 b 122 215 137 240 132 225 b 17 177 92 203 45 177 b 0 153 7 173 0 163 l 0 50 b 10 39 0 43 4 39 b 17 40 13 39 14 39 l 128 81 b 138 52 138 81 138 63 l 138 -91 b 124 -124 138 -107 132 -120 b 17 -167 115 -127 17 -167 b 0 -192 7 -171 0 -181 l 0 -294 b 10 -305 0 -301 4 -305 b 17 -304 13 -305 14 -305 b 128 -261 17 -304 117 -264 l 130 -259 b 138 -276 137 -259 138 -268 l 138 -469 b 157 -485 138 -478 147 -485 b 181 -462 179 -485 181 -475 l 181 -262 b 183 -252 181 -258 181 -255 b 197 -232 186 -243 190 -235 b 312 -187 207 -228 312 -187 b 330 -163 323 -183 330 -173 l 330 -60 b 320 -49 330 -53 327 -49 b 312 -50 318 -49 315 -49 l 200 -94 b 193 -95 197 -95 194 -95 b 181 -68 183 -95 181 -85 l 181 66 b 200 108 181 92 189 104 z',\n        },\n        accidentalKucukMucennebSharp: {\n            x_min: -1,\n            x_max: 339,\n            y_min: -338,\n            y_max: 321,\n            ha: 659,\n            o: 'm 264 92 b 271 102 264 98 265 99 l 395 150 b 412 174 405 154 412 164 l 412 276 b 402 288 412 284 409 288 b 395 287 400 288 397 288 b 282 245 395 287 285 246 b 264 274 269 245 264 262 l 264 446 b 245 462 264 455 255 462 b 220 439 222 462 220 451 l 220 252 b 204 213 219 239 215 223 b 99 176 174 202 127 176 b 82 151 89 171 82 161 l 82 49 b 92 37 82 42 86 37 b 99 39 95 37 96 37 l 210 79 b 216 81 212 81 215 81 b 220 78 219 81 220 79 l 220 56 b 216 46 220 52 220 48 b 16 -29 210 45 16 -29 b -1 -45 4 -32 -1 -36 l -1 -138 b 12 -154 -1 -145 3 -154 l 215 -79 b 220 -84 219 -79 220 -81 l 220 -105 b 210 -122 220 -115 219 -120 b 99 -168 202 -127 99 -168 b 82 -193 89 -173 82 -183 l 82 -295 b 92 -307 82 -302 86 -307 b 99 -305 95 -307 96 -307 b 210 -262 99 -305 199 -265 l 212 -261 b 220 -278 219 -261 220 -269 l 220 -471 b 239 -487 220 -480 229 -487 b 264 -464 261 -487 264 -477 l 264 -264 b 265 -253 264 -259 264 -256 b 279 -233 268 -245 272 -236 b 395 -189 289 -229 395 -189 b 412 -164 405 -184 412 -174 l 412 -62 b 402 -50 412 -55 409 -50 b 395 -52 400 -50 397 -50 l 278 -96 b 264 -86 268 -96 264 -94 l 264 -68 b 269 -59 264 -62 265 -60 b 471 17 274 -58 471 17 b 488 36 484 22 488 27 l 488 127 b 475 144 488 134 487 144 l 472 141 b 471 141 472 141 471 141 l 471 143 b 272 68 471 143 282 71 l 269 66 b 264 71 264 66 264 69 z',\n        },\n        accidentalKoron: {\n            x_min: 0,\n            x_max: 300,\n            y_min: -472,\n            y_max: 157,\n            ha: 629,\n            o: 'm 432 -4 b 415 10 432 1 418 9 l 4 226 b 0 223 1 226 0 225 l 0 -672 b 7 -680 0 -677 3 -680 l 45 -680 b 52 -672 49 -680 52 -677 l 52 -193 l 415 -22 b 432 -4 418 -20 432 -13 z m 52 -137 l 52 144 l 327 -7 z',\n        },\n        accidentalSori: {\n            x_min: 0,\n            x_max: 421,\n            y_min: -318,\n            y_max: 328,\n            ha: 646,\n            o: 'm 606 10 b 589 23 606 16 592 22 l 382 109 l 382 465 b 374 472 382 469 379 472 l 337 472 b 330 465 333 472 330 469 l 330 132 l 183 194 l 183 425 b 176 432 183 429 180 432 l 138 432 b 131 425 134 432 131 429 l 131 216 l 3 269 b 0 265 0 269 0 266 l 0 223 b 3 213 0 216 0 215 l 131 160 l 131 -150 l 3 -203 b 0 -212 0 -204 0 -206 l 0 -255 b 3 -259 0 -258 1 -259 l 131 -204 l 131 -451 b 138 -458 131 -455 134 -458 l 176 -458 b 183 -451 180 -458 183 -455 l 183 -183 l 330 -120 l 330 -410 b 337 -418 330 -415 333 -418 l 374 -418 b 382 -410 379 -418 382 -415 l 382 -98 l 589 -9 b 606 10 592 -9 606 0 z m 183 -128 l 183 138 l 330 76 l 330 -66 z m 382 -45 l 382 55 l 501 6 z',\n        },\n        articAccentAbove: {\n            x_min: 0,\n            x_max: 339,\n            y_min: 1,\n            y_max: 245,\n            ha: 244,\n            o: 'm 469 151 b 488 177 488 156 488 166 b 469 203 488 189 488 197 l 37 350 b 24 353 32 351 26 353 b 3 333 12 353 7 344 b 0 318 1 327 0 323 b 20 298 0 311 4 304 b 346 187 20 298 331 193 b 356 177 353 186 356 181 b 344 167 356 173 353 170 b 20 58 328 163 20 58 b 0 36 4 50 0 43 b 3 23 0 32 1 27 b 23 1 7 13 13 1 b 29 3 24 1 27 1 z',\n        },\n        articAccentBelow: {\n            x_min: 0,\n            x_max: 339,\n            y_min: -244,\n            y_max: 0,\n            ha: 244,\n            o: 'm 469 -202 b 488 -176 488 -197 488 -187 b 469 -150 488 -164 488 -156 l 37 -3 b 24 0 32 -1 26 0 b 3 -20 12 0 7 -9 b 0 -35 1 -26 0 -30 b 20 -55 0 -42 4 -49 b 346 -166 20 -55 331 -160 b 356 -176 353 -167 356 -171 b 344 -186 356 -180 353 -183 b 20 -295 328 -190 20 -295 b 0 -317 4 -302 0 -310 b 3 -330 0 -321 1 -325 b 23 -351 7 -340 13 -351 b 29 -350 24 -351 27 -351 z',\n        },\n        articTenutoAbove: {\n            x_min: -1,\n            x_max: 338,\n            y_min: 0,\n            y_max: 48,\n            ha: 48,\n            o: 'm 452 0 b 487 35 485 0 487 16 b 452 69 487 53 487 69 l 33 69 b -1 35 -1 69 -1 53 b 33 0 -1 16 -1 0 z',\n        },\n        articTenutoBelow: {\n            x_min: -1,\n            x_max: 338,\n            y_min: -48,\n            y_max: 0,\n            ha: 48,\n            o: 'm 452 -69 b 487 -35 485 -69 487 -53 b 452 0 487 -16 487 0 l 33 0 b -1 -35 -1 0 -1 -16 b 33 -69 -1 -53 -1 -69 z',\n        },\n        articStaccatoAbove: {\n            x_min: 0,\n            x_max: 84,\n            y_min: 0,\n            y_max: 84,\n            ha: 84,\n            o: 'm 121 60 b 60 121 121 94 94 121 b 0 60 27 121 0 94 b 60 0 0 27 27 0 b 121 60 94 0 121 27 z',\n        },\n        articStaccatoBelow: {\n            x_min: 0,\n            x_max: 84,\n            y_min: -84,\n            y_max: 0,\n            ha: 84,\n            o: 'm 121 -60 b 60 0 121 -27 94 0 b 0 -60 27 0 0 -27 b 60 -121 0 -94 27 -121 b 121 -60 94 -121 121 -94 z',\n        },\n        articStaccatissimoAbove: {\n            x_min: 1,\n            x_max: 100,\n            y_min: -2,\n            y_max: 293,\n            ha: 295,\n            o: 'm 72 422 b 1 390 35 422 3 409 b 72 -3 1 369 39 -3 b 144 389 108 -3 144 356 b 72 422 144 410 111 422 z',\n        },\n        articStaccatissimoBelow: {\n            x_min: 1,\n            x_max: 100,\n            y_min: -295,\n            y_max: 0,\n            ha: 295,\n            o: 'm 72 -425 b 144 -392 111 -425 144 -413 b 72 0 144 -359 108 0 b 1 -393 39 0 1 -372 b 72 -425 3 -412 35 -425 z',\n        },\n        articMarcatoAbove: {\n            x_min: -1,\n            x_max: 235,\n            y_min: -1,\n            y_max: 253,\n            ha: 254,\n            o: 'm 181 356 b 167 364 177 361 173 364 b 153 356 157 364 153 356 l 0 23 b -1 16 -1 20 -1 19 b 9 0 -1 9 1 1 b 16 -1 10 -1 14 -1 b 32 9 22 -1 29 1 b 112 186 32 9 109 180 b 118 190 114 189 115 190 b 127 186 121 190 124 189 b 209 9 128 180 209 9 b 225 0 213 3 219 0 l 323 0 b 338 16 333 1 338 7 b 337 23 338 19 338 22 z',\n        },\n        articMarcatoBelow: {\n            x_min: -1,\n            x_max: 235,\n            y_min: -254,\n            y_max: 0,\n            ha: 254,\n            o: 'm 156 -357 b 170 -366 160 -363 164 -366 b 184 -357 180 -366 184 -357 l 337 -24 b 338 -17 338 -22 338 -20 b 328 -1 338 -10 336 -3 b 321 0 327 0 323 0 b 305 -10 315 0 308 -3 b 225 -187 305 -10 228 -181 b 219 -192 223 -190 222 -192 b 210 -187 216 -192 213 -190 b 128 -10 209 -181 128 -10 b 112 -1 124 -4 118 -1 l 14 -1 b -1 -17 4 -3 -1 -9 b 0 -24 -1 -20 -1 -23 z',\n        },\n        fermataAbove: {\n            x_min: 3,\n            x_max: 605,\n            y_min: -3,\n            y_max: 329,\n            ha: 332,\n            o: 'm 435 318 b 818 36 742 318 804 91 b 821 26 819 32 819 27 b 851 -4 831 6 837 -4 b 871 16 864 -4 871 1 b 870 30 871 20 871 24 b 438 474 780 471 480 474 b 6 30 392 474 94 471 b 4 14 4 24 4 19 b 23 -4 4 0 12 -4 b 52 26 36 -4 43 6 b 56 39 53 27 55 33 b 435 318 73 98 138 318 z m 516 75 b 436 153 516 117 480 153 b 359 75 395 153 359 117 b 436 -4 359 32 395 -4 b 516 75 480 -4 516 32 z',\n        },\n        fermataBelow: {\n            x_min: 3,\n            x_max: 605,\n            y_min: -332,\n            y_max: 0,\n            ha: 332,\n            o: 'm 435 -323 b 56 -43 138 -323 73 -102 b 52 -30 55 -37 53 -32 b 23 0 43 -10 36 0 b 4 -19 12 0 4 -4 b 6 -35 4 -23 4 -29 b 438 -478 94 -475 392 -478 b 870 -35 480 -478 780 -475 b 871 -20 871 -29 871 -24 b 851 0 871 -6 864 0 b 821 -30 837 0 831 -10 b 818 -40 819 -32 819 -36 b 435 -323 804 -95 742 -323 z m 516 -79 b 436 0 516 -36 480 0 b 359 -79 395 0 359 -36 b 436 -157 359 -121 395 -157 b 516 -79 480 -157 516 -121 z',\n        },\n        fermataLongAbove: {\n            x_min: 0,\n            x_max: 603,\n            y_min: -1,\n            y_max: 333,\n            ha: 334,\n            o: 'm 72 480 b 0 441 32 480 0 462 l 0 19 b 35 0 0 9 16 0 b 71 19 55 0 71 9 l 71 289 b 433 315 71 307 252 315 b 798 289 615 315 798 307 l 798 19 b 832 0 798 9 814 0 b 868 19 852 0 868 9 l 868 441 b 796 480 868 462 837 480 z m 513 78 b 433 156 513 121 478 156 b 356 78 390 156 356 121 b 433 -1 356 35 390 -1 b 513 78 478 -1 513 35 z',\n        },\n        fermataLongBelow: {\n            x_min: 0,\n            x_max: 603,\n            y_min: -333,\n            y_max: 1,\n            ha: 334,\n            o: 'm 513 -78 b 433 1 513 -35 478 1 b 356 -78 390 1 356 -35 b 433 -156 356 -121 390 -156 b 513 -78 478 -156 513 -121 z m 796 -480 b 868 -441 837 -480 868 -462 l 868 -19 b 832 0 868 -9 852 0 b 798 -19 814 0 798 -9 l 798 -289 b 433 -315 798 -307 615 -315 b 71 -289 252 -315 71 -307 l 71 -19 b 35 0 71 -9 55 0 b 0 -19 16 0 0 -9 l 0 -441 b 72 -480 0 -462 32 -480 z',\n        },\n        fermataVeryLongAbove: {\n            x_min: 0,\n            x_max: 715,\n            y_min: 0,\n            y_max: 408,\n            ha: 408,\n            o: 'm 76 588 b 0 546 35 588 0 569 l 0 22 b 37 1 0 10 17 1 b 75 22 59 1 75 10 l 75 431 b 514 458 75 449 294 458 b 955 431 734 458 955 449 l 955 22 b 991 1 955 10 971 1 b 1030 22 1012 1 1030 10 l 1030 546 b 953 588 1030 569 995 588 z m 215 389 b 138 347 171 389 138 370 l 138 22 b 174 1 138 10 154 1 b 213 22 196 1 213 10 l 213 217 b 514 245 213 235 363 245 b 816 217 665 245 816 235 l 816 22 b 854 1 816 10 834 1 b 891 22 876 1 891 10 l 891 347 b 815 389 891 370 858 389 z m 606 84 b 521 167 606 130 569 167 b 439 84 475 167 439 130 b 521 0 439 39 475 0 b 606 84 569 0 606 39 z',\n        },\n        fermataVeryLongBelow: {\n            x_min: 0,\n            x_max: 715,\n            y_min: -408,\n            y_max: 0,\n            ha: 408,\n            o: 'm 606 -84 b 521 0 606 -39 569 0 b 439 -84 475 0 439 -39 b 521 -167 439 -130 475 -167 b 606 -84 569 -167 606 -130 z m 815 -389 b 891 -347 858 -389 891 -370 l 891 -22 b 854 -1 891 -10 876 -1 b 816 -22 834 -1 816 -10 l 816 -217 b 514 -245 816 -235 665 -245 b 213 -217 363 -245 213 -235 l 213 -22 b 174 -1 213 -10 196 -1 b 138 -22 154 -1 138 -10 l 138 -347 b 215 -389 138 -370 171 -389 z m 953 -588 b 1030 -546 995 -588 1030 -569 l 1030 -22 b 991 -1 1030 -10 1012 -1 b 955 -22 971 -1 955 -10 l 955 -431 b 514 -458 955 -449 734 -458 b 75 -431 294 -458 75 -449 l 75 -22 b 37 -1 75 -10 59 -1 b 0 -22 17 -1 0 -10 l 0 -546 b 76 -588 0 -569 35 -588 z',\n        },\n        fermataShortAbove: {\n            x_min: 0,\n            x_max: 604,\n            y_min: 0,\n            y_max: 341,\n            ha: 341,\n            o: 'm 78 0 b 88 6 81 0 82 3 b 435 328 134 45 412 328 b 783 3 458 328 742 39 b 793 0 786 1 793 0 l 865 0 b 870 4 865 0 870 1 b 867 10 870 6 868 9 b 435 491 805 69 474 491 b 3 10 397 491 69 75 b 0 4 1 9 0 6 b 4 0 0 1 4 0 z m 513 94 b 433 171 513 135 477 171 b 354 94 390 171 354 135 b 433 13 354 49 390 13 b 513 94 477 13 513 49 z',\n        },\n        fermataShortBelow: {\n            x_min: 0,\n            x_max: 604,\n            y_min: -341,\n            y_max: 0,\n            ha: 341,\n            o: 'm 4 0 b 0 -4 4 0 0 -1 b 3 -10 0 -6 1 -9 b 435 -491 69 -75 397 -491 b 867 -10 474 -491 805 -69 b 870 -4 868 -9 870 -6 b 865 0 870 -1 865 0 l 793 0 b 783 -3 793 0 786 -1 b 435 -328 742 -39 458 -328 b 88 -6 412 -328 134 -45 b 78 0 82 -3 81 0 z m 513 -94 b 433 -13 513 -49 477 -13 b 354 -94 390 -13 354 -49 b 433 -171 354 -135 390 -171 b 513 -94 477 -171 513 -135 z',\n        },\n        breathMarkComma: {\n            x_min: 1,\n            x_max: 152,\n            y_min: 2,\n            y_max: 251,\n            ha: 249,\n            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',\n        },\n        breathMarkUpbow: {\n            x_min: 1,\n            x_max: 249,\n            y_min: 1,\n            y_max: 495,\n            ha: 494,\n            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',\n        },\n        caesura: {\n            x_min: 0,\n            x_max: 384,\n            y_min: -1,\n            y_max: 532,\n            ha: 533,\n            o: 'm 40 -1 b 78 26 58 -1 72 9 l 321 713 b 323 726 323 717 323 721 b 282 766 323 747 304 766 b 245 739 265 766 251 756 l 3 52 b 0 37 1 48 0 42 b 27 1 0 22 10 7 b 40 -1 32 -1 36 -1 z m 308 26 l 552 713 b 553 726 553 717 553 721 b 513 766 553 747 534 766 b 475 739 495 766 481 756 l 232 52 b 230 39 230 48 230 43 b 258 1 230 23 240 7 b 271 -1 262 -1 266 -1 b 308 26 287 -1 302 9 z',\n        },\n        caesuraCurved: {\n            x_min: 0,\n            x_max: 373,\n            y_min: 0,\n            y_max: 530,\n            ha: 530,\n            o: 'm 491 763 b 445 719 468 763 446 744 b 252 98 432 507 340 295 l 226 39 b 223 27 225 35 223 32 b 252 0 223 13 233 0 b 276 16 262 0 272 6 b 537 716 386 230 537 478 b 491 763 537 742 518 763 z m 29 0 b 53 16 39 0 48 6 l 82 69 b 314 716 187 264 314 498 b 268 763 314 742 295 763 b 222 719 245 763 223 744 b 29 98 209 507 117 295 l 3 39 b 0 29 1 36 0 33 b 29 0 0 14 12 0 z',\n        },\n        restMaxima: {\n            x_min: 0,\n            x_max: 381,\n            y_min: -249,\n            y_max: 250,\n            ha: 499,\n            o: 'm 180 -330 l 180 331 b 156 360 180 356 170 360 l 23 360 b 0 331 10 360 0 356 l 0 -330 b 23 -359 0 -354 10 -359 l 156 -359 b 180 -330 170 -359 180 -354 z m 549 -330 l 549 331 b 524 360 549 356 539 360 l 392 360 b 369 331 379 360 369 356 l 369 -330 b 392 -359 369 -354 379 -359 l 524 -359 b 549 -330 539 -359 549 -354 z',\n        },\n        restDoubleWhole: {\n            x_min: 0,\n            x_max: 125,\n            y_min: 0,\n            y_max: 250,\n            ha: 250,\n            o: 'm 180 22 l 180 338 b 156 360 180 350 170 360 l 23 360 b 0 338 10 360 0 350 l 0 22 b 23 0 0 10 10 0 l 156 0 b 180 22 170 0 180 10 z',\n        },\n        restWhole: {\n            x_min: 0,\n            x_max: 282,\n            y_min: -135,\n            y_max: 9,\n            ha: 144,\n            o: 'm 406 -157 l 406 -24 b 369 13 406 -3 389 13 l 37 13 b 0 -24 16 13 0 -3 l 0 -157 b 37 -194 0 -177 16 -194 l 369 -194 b 406 -157 389 -194 406 -177 z',\n        },\n        restWholeLegerLine: {\n            x_min: -117,\n            x_max: 399,\n            y_min: -135,\n            y_max: 20,\n            ha: 155,\n            o: 'm -143 29 b -168 3 -157 29 -168 17 b -143 -23 -168 -12 -157 -23 l 0 -23 l 0 -157 b 37 -194 0 -177 16 -194 l 369 -194 b 406 -157 389 -194 406 -177 l 406 -24 b 549 -23 406 -23 406 -23 b 575 3 563 -23 575 -12 b 549 29 575 17 563 29 z',\n        },\n        restHalf: {\n            x_min: 0,\n            x_max: 282,\n            y_min: -2,\n            y_max: 142,\n            ha: 144,\n            o: 'm 406 35 l 406 167 b 369 204 406 189 389 204 l 37 204 b 0 167 16 204 0 189 l 0 35 b 37 -3 0 14 16 -3 l 369 -3 b 406 35 389 -3 406 14 z',\n        },\n        restHalfLegerLine: {\n            x_min: -117,\n            x_max: 399,\n            y_min: -13,\n            y_max: 142,\n            ha: 155,\n            o: 'm 549 -19 b 575 7 563 -19 575 -7 b 549 33 575 22 563 33 b 406 35 406 33 406 33 l 406 167 b 369 204 406 187 389 204 l 37 204 b 0 167 16 204 0 187 l 0 33 l -143 33 b -168 7 -157 33 -168 22 b -143 -19 -168 -7 -157 -19 z',\n        },\n        restQuarter: {\n            x_min: 1,\n            x_max: 270,\n            y_min: -375,\n            y_max: 373,\n            ha: 748,\n            o: 'm 112 -55 b 174 -141 135 -84 156 -111 b 183 -161 177 -147 183 -158 b 181 -167 183 -163 183 -166 b 166 -174 179 -173 173 -174 b 143 -170 160 -174 148 -171 b 137 -170 141 -170 138 -170 l 125 -166 b 1 -304 50 -166 1 -233 b 168 -527 1 -376 63 -446 b 206 -540 180 -536 194 -540 b 228 -531 216 -540 226 -537 b 230 -521 229 -527 230 -524 b 207 -487 230 -508 219 -497 b 170 -435 189 -487 173 -448 b 164 -397 166 -423 164 -410 b 255 -292 164 -338 194 -292 b 369 -317 297 -292 344 -308 l 370 -318 b 382 -320 376 -320 379 -320 b 389 -314 386 -320 389 -318 b 336 -232 389 -297 351 -249 b 236 -32 281 -166 236 -112 b 236 -27 236 -30 236 -29 l 238 -17 b 238 -13 238 -16 238 -14 b 333 199 243 71 295 140 b 338 220 337 206 338 213 b 333 248 338 235 333 248 b 95 526 333 248 120 501 b 69 537 88 533 78 537 b 40 507 55 537 40 527 b 46 484 40 500 42 492 b 134 291 52 468 134 395 b 48 108 134 238 112 176 b 27 66 33 94 27 78 b 42 32 27 46 42 32 z',\n        },\n        rest8th: {\n            x_min: 0,\n            x_max: 247,\n            y_min: -251,\n            y_max: 174,\n            ha: 425,\n            o: 'm 193 154 b 96 251 193 207 150 251 b 0 154 43 251 0 207 b 39 81 0 124 17 98 b 117 56 62 65 89 56 b 173 66 137 56 157 60 b 225 88 193 72 206 78 b 232 89 228 89 230 89 b 239 76 238 89 239 84 b 238 60 239 72 239 66 b 104 -343 233 39 130 -248 b 145 -361 104 -360 137 -361 b 196 -347 161 -361 181 -359 b 341 161 200 -344 341 161 b 356 217 347 187 354 210 b 338 240 356 232 341 239 b 323 235 336 240 331 240 b 193 140 312 226 240 140 z',\n        },\n        rest16th: {\n            x_min: 0,\n            x_max: 320,\n            y_min: -500,\n            y_max: 179,\n            ha: 679,\n            o: 'm 300 160 b 202 258 300 215 256 258 b 104 160 148 258 104 215 b 219 62 104 101 164 62 b 331 94 258 62 298 75 b 341 96 336 95 338 96 b 348 86 346 96 348 94 b 265 -173 348 63 275 -151 b 194 -217 253 -200 215 -217 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 151 -105 b 0 -203 43 -105 0 -148 b 115 -301 0 -262 60 -301 b 223 -271 153 -301 190 -288 b 229 -279 226 -271 229 -274 l 228 -281 b 228 -282 228 -282 228 -282 l 91 -690 b 91 -691 91 -690 91 -691 l 89 -693 b 134 -720 89 -706 102 -720 b 189 -687 176 -720 183 -703 l 356 -138 b 420 81 393 -16 420 81 b 459 226 420 81 456 207 b 461 232 459 229 461 230 b 446 248 461 240 449 246 b 431 242 439 248 435 245 b 300 145 420 233 348 147 z',\n        },\n        rest32nd: {\n            x_min: 0,\n            x_max: 363,\n            y_min: -500,\n            y_max: 426,\n            ha: 926,\n            o: 'm 508 603 b 492 598 501 603 497 600 b 361 503 482 590 410 503 l 361 516 b 264 613 361 570 318 613 b 166 516 210 613 166 570 b 206 444 166 487 183 461 b 246 423 217 433 232 428 b 284 418 258 420 269 418 b 393 449 321 418 360 432 b 399 451 395 451 397 451 b 415 426 409 451 415 436 l 413 423 b 413 422 413 423 413 422 l 357 192 b 279 140 350 168 302 140 b 281 153 281 144 281 148 b 183 251 281 207 236 251 b 85 153 128 251 85 207 b 125 81 85 124 102 98 b 164 60 137 71 150 65 b 203 55 176 58 189 55 b 311 86 240 55 278 69 b 315 88 312 88 314 88 b 325 69 323 88 325 76 l 268 -167 b 194 -217 261 -197 216 -216 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 153 -105 b 0 -203 45 -105 0 -148 b 115 -301 0 -262 60 -301 b 228 -269 154 -301 194 -288 b 232 -268 229 -268 230 -268 b 240 -276 236 -268 240 -272 b 138 -688 240 -282 141 -678 b 137 -697 137 -691 137 -694 b 176 -720 137 -708 145 -720 b 232 -690 222 -720 226 -706 b 484 436 236 -672 484 436 b 521 582 484 436 518 564 b 523 588 521 585 523 586 b 508 603 523 600 511 603 z',\n        },\n        rest64th: {\n            x_min: 0,\n            x_max: 423,\n            y_min: -753,\n            y_max: 430,\n            ha: 1183,\n            o: 'm 596 609 b 580 603 589 609 585 606 b 448 507 569 595 497 507 b 449 521 449 511 449 516 b 351 619 449 575 405 619 b 253 521 297 619 253 575 b 372 422 253 461 317 422 b 481 454 410 422 446 438 b 491 456 484 455 488 456 b 504 441 498 456 504 451 b 501 426 504 436 503 432 b 445 202 500 422 451 217 b 359 144 435 174 383 144 l 359 158 b 261 256 359 212 315 256 b 163 158 207 256 163 212 b 243 65 163 112 202 78 b 279 60 255 62 266 60 b 397 91 320 60 360 73 b 403 92 400 92 402 92 b 412 79 409 92 412 86 b 410 72 412 76 412 75 b 351 -161 408 59 356 -150 b 281 -212 340 -199 301 -212 l 281 -197 b 183 -99 281 -144 238 -99 b 85 -197 130 -99 85 -144 b 125 -271 85 -228 102 -253 b 166 -291 138 -279 151 -287 b 204 -297 177 -294 192 -297 b 262 -287 225 -297 245 -292 b 305 -265 282 -279 287 -274 b 310 -264 307 -264 308 -264 b 318 -284 317 -264 318 -275 b 317 -295 318 -288 317 -294 b 259 -524 315 -302 265 -508 b 194 -567 251 -554 213 -567 b 196 -554 196 -563 196 -559 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 40 -626 0 -583 17 -609 b 118 -652 60 -644 92 -652 b 210 -629 145 -652 186 -642 b 216 -628 213 -628 215 -628 b 228 -647 226 -628 228 -639 l 226 -651 b 226 -652 226 -651 226 -652 l 122 -1054 b 121 -1064 121 -1058 121 -1061 b 167 -1084 121 -1077 134 -1084 b 215 -1060 202 -1084 209 -1076 b 402 -278 217 -1047 229 -1021 b 436 -135 403 -278 431 -161 l 570 441 b 609 588 570 441 605 569 b 596 609 609 603 602 608 z',\n        },\n        rest128th: {\n            x_min: 0,\n            x_max: 485,\n            y_min: -750,\n            y_max: 689,\n            ha: 1439,\n            o: 'm 537 894 b 439 992 537 949 494 992 b 341 894 386 992 341 949 b 382 822 341 865 359 840 b 459 796 402 805 433 796 b 518 806 480 796 501 801 l 520 808 b 569 828 539 814 552 819 b 580 831 572 829 577 831 b 598 812 589 831 598 825 b 596 801 598 809 598 805 b 540 575 590 773 546 595 b 448 510 534 553 475 510 l 448 524 b 350 622 448 577 405 622 b 252 524 297 622 252 577 b 292 451 252 494 269 468 b 369 426 318 433 337 426 b 429 435 389 426 412 429 b 494 464 449 442 475 455 b 498 465 495 465 497 465 b 505 446 504 465 505 456 b 503 426 505 439 504 432 l 446 202 b 366 144 439 173 389 144 l 366 158 b 268 256 366 212 323 256 b 170 158 215 256 170 212 b 289 59 170 98 235 59 b 347 69 310 59 330 63 b 397 91 367 76 379 82 b 406 94 400 92 403 94 b 415 79 412 94 415 88 b 412 63 415 75 413 69 b 357 -157 408 42 364 -134 b 281 -212 346 -196 302 -212 b 282 -197 281 -207 282 -203 b 184 -99 282 -144 238 -99 b 86 -197 130 -99 86 -144 b 204 -297 86 -258 150 -297 b 262 -287 225 -297 245 -292 b 312 -265 282 -279 294 -274 b 318 -264 314 -264 317 -264 b 327 -275 324 -264 327 -269 b 266 -517 324 -287 278 -490 b 200 -569 248 -566 220 -567 l 196 -554 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 118 -652 0 -615 63 -652 b 177 -642 138 -652 160 -648 l 179 -641 b 229 -621 197 -635 210 -629 l 230 -619 b 239 -626 236 -619 239 -622 b 238 -632 239 -628 239 -631 b 131 -1057 235 -642 134 -1050 b 173 -1080 131 -1071 140 -1080 b 230 -1057 219 -1080 225 -1074 l 658 815 b 697 960 658 815 694 942 b 698 966 697 963 698 965 b 684 982 698 975 687 981 b 668 976 677 982 672 979 b 537 880 658 969 586 881 z',\n        },\n        dynamicPiano: {\n            x_min: -89,\n            x_max: 366,\n            y_min: -142,\n            y_max: 274,\n            ha: 416,\n            o: 'm 395 395 b 292 357 350 395 318 380 b 262 328 272 340 268 328 b 246 363 255 328 259 338 b 177 393 236 380 215 393 b 1 251 92 393 46 333 b -9 223 -6 238 -9 230 b 7 207 -9 213 -1 207 b 30 229 17 207 23 216 b 127 338 72 301 101 338 b 143 321 138 338 143 331 b 134 285 143 310 138 295 l -43 -154 b -65 -168 -48 -166 -50 -168 l -109 -168 b -128 -187 -122 -168 -128 -174 b -111 -204 -128 -199 -122 -204 l 167 -204 b 186 -186 180 -204 186 -199 b 168 -168 186 -174 180 -168 l 111 -168 b 98 -164 102 -168 98 -168 b 101 -154 98 -163 99 -158 l 166 7 b 179 24 168 14 171 24 b 213 -1 186 24 190 10 b 276 -14 233 -12 252 -14 b 527 266 415 -14 527 130 b 395 395 527 350 475 395 z m 356 341 b 389 288 380 341 389 320 b 243 35 389 217 312 35 b 207 81 219 35 207 50 b 235 180 207 111 219 140 l 264 251 b 356 341 284 300 321 341 z',\n        },\n        dynamicMezzo: {\n            x_min: -20,\n            x_max: 446,\n            y_min: -10,\n            y_max: 274,\n            ha: 284,\n            o: 'm 528 395 b 431 350 487 395 454 374 b 409 330 416 336 415 330 b 397 360 402 330 406 341 b 334 395 389 379 370 395 b 236 350 292 395 259 374 b 215 330 222 336 220 330 b 203 360 207 330 212 340 b 147 393 194 379 174 393 b -19 251 71 393 26 331 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 1 215 b 107 338 52 300 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 287 323 225 292 255 323 b 308 302 304 323 308 314 b 294 249 308 285 302 269 b 203 24 294 248 292 248 b 199 9 200 17 199 13 b 215 0 199 3 203 0 l 285 0 b 308 17 298 0 302 3 l 402 251 b 481 323 419 292 449 323 b 503 302 498 323 503 314 b 413 43 503 252 413 104 b 478 -14 413 6 436 -14 b 629 102 533 -14 583 26 b 642 132 638 117 642 125 b 629 145 642 141 636 145 b 608 127 619 145 615 138 b 534 49 580 84 553 49 b 523 62 526 49 523 53 b 606 317 523 112 606 238 b 528 395 606 353 588 395 z',\n        },\n        dynamicForte: {\n            x_min: -141,\n            x_max: 364,\n            y_min: -152,\n            y_max: 444,\n            ha: 596,\n            o: 'm 23 380 b 0 357 7 380 0 373 b 22 336 0 343 7 336 l 105 336 b 117 330 114 336 117 336 b 114 315 117 327 115 323 l 23 0 b -101 -187 -17 -141 -43 -187 b -127 -174 -120 -187 -127 -181 b -92 -156 -127 -163 -114 -170 b -63 -102 -75 -144 -63 -125 b -128 -43 -63 -65 -89 -43 b -203 -122 -171 -43 -203 -78 b -95 -219 -203 -186 -156 -219 b 161 17 14 -219 82 -145 b 269 317 203 105 235 194 l 271 318 b 289 336 271 323 282 336 l 383 336 b 406 359 399 336 406 343 b 384 380 406 373 399 380 l 298 380 b 284 387 288 380 284 380 b 287 405 284 392 285 396 b 419 606 315 530 347 606 b 442 595 431 606 442 603 b 419 580 442 586 435 588 b 389 526 400 572 389 552 b 454 465 389 485 418 465 b 524 543 491 465 524 490 b 400 639 524 596 491 639 b 135 402 261 639 183 540 b 107 380 128 380 127 380 z',\n        },\n        dynamicRinforzando: {\n            x_min: -20,\n            x_max: 277,\n            y_min: 0,\n            y_max: 274,\n            ha: 274,\n            o: 'm 324 395 b 235 350 287 395 256 374 b 215 330 222 336 220 330 b 203 360 207 330 213 337 b 145 393 194 379 174 393 b -19 251 75 393 27 337 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 3 215 b 107 338 52 301 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 304 351 226 298 272 351 b 318 343 312 351 318 348 b 287 285 318 330 287 325 b 338 239 287 256 308 239 b 399 318 373 239 399 268 b 324 395 399 360 377 395 z',\n        },\n        dynamicSforzando: {\n            x_min: 0,\n            x_max: 229,\n            y_min: -10,\n            y_max: 273,\n            ha: 283,\n            o: 'm 212 393 b 68 274 127 393 68 350 b 145 161 68 223 95 196 b 200 85 187 132 200 114 b 127 20 200 53 173 20 b 66 42 91 20 66 32 b 91 56 66 49 75 46 b 111 98 104 65 111 79 b 59 145 111 127 86 145 b 0 78 24 145 0 117 b 125 -14 0 30 49 -14 b 291 120 219 -14 291 36 b 220 232 291 160 276 190 b 151 314 168 271 151 287 b 213 361 151 337 168 361 b 258 346 238 361 258 356 b 240 333 258 340 251 340 b 226 298 232 325 226 314 b 276 252 226 269 248 252 b 330 307 311 252 330 279 b 212 393 330 360 285 393 z',\n        },\n        dynamicZ: {\n            x_min: -30,\n            x_max: 244,\n            y_min: -10,\n            y_max: 268,\n            ha: 278,\n            o: 'm 333 386 b 298 377 321 386 314 382 b 239 370 282 373 259 370 b 94 383 153 370 111 383 b 68 364 79 383 72 377 l 33 264 b 29 242 30 255 29 248 b 45 228 29 232 36 228 b 66 249 55 228 60 236 l 81 279 b 96 297 85 288 88 297 b 168 292 102 297 127 292 b 223 302 194 292 215 302 b 196 269 229 302 197 271 l -26 45 b -43 16 -37 33 -43 27 b -24 -1 -43 6 -36 -1 b 4 16 -12 -1 -3 10 b 39 30 16 24 27 30 b 179 -14 79 30 108 -14 b 297 102 259 -14 297 43 b 245 166 297 147 271 166 b 197 115 219 166 197 145 b 236 72 197 88 216 72 b 259 79 251 72 255 79 b 264 75 262 79 264 78 b 258 60 264 72 261 66 b 229 45 252 50 242 45 b 117 95 186 45 173 95 b 85 86 98 95 89 86 b 102 111 85 86 95 104 l 333 338 b 351 370 344 350 351 359 b 333 386 351 380 343 386 z',\n        },\n        ornamentTrill: {\n            x_min: 0,\n            x_max: 521,\n            y_min: -10,\n            y_max: 390,\n            ha: 400,\n            o: 'm 383 562 b 364 557 377 562 369 559 l 294 534 b 269 511 281 530 275 526 l 217 384 b 206 367 212 370 210 367 b 179 380 200 367 192 374 b 118 393 158 389 140 393 b 0 292 50 393 0 353 b 95 210 0 248 30 210 b 140 213 112 210 131 213 b 144 209 143 213 144 212 b 140 194 144 206 143 202 l 124 156 b 96 58 108 117 96 88 b 179 -14 96 17 124 -14 b 325 153 253 -14 325 46 b 307 251 325 187 320 219 b 302 265 304 258 302 261 b 334 294 302 274 311 281 l 343 298 b 455 348 393 328 428 348 b 474 327 468 348 474 344 b 465 285 474 312 469 295 l 360 24 b 356 9 357 17 356 13 b 372 0 356 3 360 0 l 442 0 b 465 17 455 0 459 3 l 559 251 b 655 351 577 298 624 351 b 670 343 664 351 670 348 b 638 285 670 330 638 325 b 690 239 638 256 660 239 b 750 318 724 239 750 268 b 675 395 750 360 729 395 b 586 350 638 395 608 374 b 566 330 573 336 572 330 b 553 361 559 330 564 340 b 490 393 543 380 521 393 b 347 348 432 393 377 364 b 312 333 328 338 320 333 b 308 337 310 333 308 334 b 315 359 308 343 312 351 l 387 537 b 392 553 390 544 392 549 b 383 562 392 559 389 562 z m 118 360 b 192 325 134 360 192 347 b 186 307 192 321 189 314 l 180 292 b 148 265 173 274 167 269 b 98 258 130 261 112 258 b 39 301 50 258 39 281 b 118 360 39 327 60 360 z m 272 240 b 292 151 285 240 292 164 b 212 30 292 88 253 30 b 196 48 200 30 196 37 b 207 92 196 59 202 78 b 264 230 207 94 209 94 b 272 240 266 238 268 240 z',\n        },\n        ornamentTurn: {\n            x_min: 0,\n            x_max: 460,\n            y_min: 0,\n            y_max: 218,\n            ha: 218,\n            o: 'm 534 314 b 454 251 490 314 454 294 b 505 199 454 219 475 199 b 579 232 547 199 549 232 b 626 164 603 232 626 202 b 533 72 626 102 583 72 b 377 180 487 72 439 111 b 150 312 307 258 243 312 b 0 148 55 312 0 240 b 128 0 0 45 66 0 b 209 63 173 0 209 20 b 157 115 209 95 187 115 b 84 82 115 115 114 82 b 36 150 59 82 36 112 b 130 242 36 212 79 242 b 285 134 176 242 223 203 b 513 1 356 56 419 1 b 662 166 608 1 662 73 b 534 314 662 269 596 314 z',\n        },\n        ornamentTurnSlash: {\n            x_min: 0,\n            x_max: 460,\n            y_min: -90,\n            y_max: 306,\n            ha: 396,\n            o: 'm 333 441 b 310 418 315 441 310 433 l 310 274 b 302 252 310 258 308 252 b 261 278 294 252 287 262 b 150 311 228 298 192 311 b 0 147 55 311 0 239 b 128 -1 0 43 66 -1 b 209 62 173 -1 209 19 b 157 114 209 94 187 114 b 84 81 115 114 114 81 b 36 148 59 81 36 111 b 130 240 36 210 79 240 b 285 128 176 240 222 197 b 307 79 304 108 307 105 l 307 -107 b 330 -130 307 -122 312 -130 b 353 -107 347 -130 353 -122 l 353 37 b 360 59 353 53 353 59 b 402 33 369 59 376 49 b 513 0 435 13 471 0 b 662 164 608 0 662 72 b 534 312 662 268 596 312 b 454 249 490 312 454 292 b 505 197 454 217 475 197 b 579 230 547 197 549 230 b 626 163 603 230 626 200 b 533 71 626 101 583 71 b 377 183 487 71 441 114 b 356 232 359 203 356 206 l 356 418 b 333 441 356 433 350 441 z',\n        },\n        ornamentMordent: {\n            x_min: 1,\n            x_max: 729,\n            y_min: -73,\n            y_max: 319,\n            ha: 392,\n            o: 'm 546 265 l 546 459 l 501 459 l 501 216 l 459 167 b 439 167 454 160 445 160 b 302 327 387 228 310 317 b 258 353 291 338 282 351 b 226 340 245 353 238 348 l 20 107 b 1 73 12 98 1 84 b 30 59 1 65 9 59 b 88 94 53 59 73 79 b 144 143 107 109 124 127 b 176 161 158 154 168 161 b 197 144 183 161 189 156 l 323 10 b 351 0 328 3 340 0 b 377 9 361 0 372 3 b 498 114 392 17 475 94 l 498 -105 l 544 -105 l 544 153 b 562 160 550 157 556 160 b 585 144 569 160 576 156 b 710 10 590 135 697 24 b 737 0 716 3 727 0 b 765 9 749 0 759 3 b 1030 295 776 17 1011 274 l 1032 300 b 1050 328 1041 308 1050 318 b 1012 353 1050 343 1024 353 b 986 343 1002 353 994 348 b 854 190 971 330 871 206 b 828 176 842 180 835 176 b 802 190 818 176 809 183 b 681 333 791 202 696 320 b 645 353 668 344 657 353 b 613 340 634 353 626 350 b 580 304 600 330 590 315 z',\n        },\n        ornamentShortTrill: {\n            x_min: 0,\n            x_max: 725,\n            y_min: 0,\n            y_max: 245,\n            ha: 245,\n            o: 'm 429 167 l 301 325 b 256 353 291 338 282 350 b 225 340 246 353 238 350 b 16 105 158 268 88 186 b 0 72 9 96 0 86 b 29 58 0 63 7 58 b 71 76 42 58 55 62 l 158 154 b 174 160 163 158 168 160 b 197 143 181 160 187 154 b 321 10 203 135 310 24 b 350 0 327 3 338 0 b 377 7 361 0 372 3 l 533 148 b 554 160 543 158 550 160 b 577 143 562 160 566 156 b 703 10 585 135 690 24 b 732 0 708 3 720 0 b 759 7 743 0 753 3 b 1024 294 769 16 1005 272 b 1044 327 1032 305 1044 321 b 1005 353 1044 341 1018 353 b 979 343 996 353 988 348 b 848 189 963 330 864 204 b 821 174 837 179 828 174 b 796 189 811 174 804 181 b 674 331 783 202 688 318 b 641 351 662 343 651 351 b 606 340 628 351 619 350 b 573 304 593 328 583 315 b 444 167 533 259 491 213 b 429 167 439 161 433 161 z',\n        },\n        ornamentTremblement: {\n            x_min: 1,\n            x_max: 985,\n            y_min: 0,\n            y_max: 244,\n            ha: 244,\n            o: 'm 678 325 b 634 351 667 338 657 350 b 602 338 621 351 613 348 l 448 167 b 439 167 446 164 441 164 l 302 325 b 258 351 291 338 281 350 b 228 338 245 351 238 348 b 193 304 215 328 204 315 l 19 107 b 1 72 13 96 1 76 b 30 58 1 63 9 58 b 89 92 52 58 73 78 l 144 141 b 148 144 145 143 147 143 b 176 160 160 153 170 160 b 199 143 183 160 189 154 b 324 10 204 134 311 23 b 351 0 330 3 340 0 b 379 7 363 0 373 3 l 530 148 b 552 160 536 154 546 160 b 575 143 559 160 564 154 b 698 10 580 134 687 23 b 727 0 704 3 716 0 b 755 7 739 0 749 3 l 907 147 b 930 160 922 158 923 160 b 952 143 937 160 943 154 l 1077 10 b 1107 0 1084 3 1096 0 b 1133 7 1117 0 1128 3 b 1398 294 1143 16 1380 272 b 1418 327 1407 305 1418 321 b 1381 351 1418 343 1394 351 b 1354 341 1371 351 1362 348 b 1223 189 1338 328 1238 204 b 1195 174 1211 179 1202 174 b 1171 189 1185 174 1178 181 b 1048 331 1158 200 1063 318 b 1012 351 1035 343 1024 351 b 981 338 1002 351 994 350 b 948 304 968 328 958 315 b 827 166 907 258 865 212 b 815 166 824 163 818 163 b 678 325 760 226 732 264 z',\n        },\n        ornamentPrecompAppoggTrill: {\n            x_min: 0,\n            x_max: 1119,\n            y_min: 0,\n            y_max: 481,\n            ha: 481,\n            o: 'm 1015 163 b 873 328 963 223 880 318 b 828 354 860 344 847 353 b 796 341 816 354 809 351 b 763 305 783 331 773 317 b 642 168 721 261 681 215 b 636 163 641 167 639 164 b 494 328 585 223 501 318 b 449 354 481 344 468 353 b 418 341 438 354 431 351 b 384 305 405 331 395 317 b 264 168 343 261 302 215 l 242 144 b 144 88 232 124 171 88 b 79 197 81 88 79 189 l 79 648 b 60 693 79 683 71 693 b 52 691 58 693 55 693 b 0 616 3 672 0 625 l 0 207 b 121 0 0 40 68 0 b 249 68 168 0 232 53 b 279 94 262 75 271 86 b 336 144 298 111 315 128 b 367 163 350 156 360 163 b 389 145 374 163 380 157 b 514 12 395 137 501 26 b 543 1 520 4 531 1 b 569 9 553 1 563 4 b 636 73 576 14 605 43 l 658 94 b 714 144 677 111 694 128 b 746 163 729 156 739 163 b 768 145 753 163 759 157 b 893 12 773 137 880 26 b 922 1 899 4 910 1 b 948 9 932 1 942 4 l 1012 71 b 1037 94 1022 78 1030 86 b 1092 144 1054 111 1073 128 b 1123 161 1106 156 1115 161 b 1146 145 1130 161 1136 157 b 1270 12 1152 137 1259 26 b 1299 1 1276 4 1287 1 b 1326 9 1310 1 1320 4 b 1591 297 1336 19 1572 275 b 1611 328 1600 307 1611 320 b 1574 354 1611 343 1585 354 b 1548 344 1565 354 1555 350 b 1416 192 1532 331 1431 206 b 1388 177 1404 181 1395 177 b 1365 190 1380 177 1371 184 b 1243 333 1352 203 1256 321 b 1205 354 1228 346 1217 354 b 1174 341 1195 354 1187 351 b 1140 305 1161 330 1152 317 z',\n        },\n        ornamentPrecompSlideTrillDAnglebert: {\n            x_min: 2,\n            x_max: 1150,\n            y_min: -367,\n            y_max: 245,\n            ha: 612,\n            o: 'm 1058 160 b 916 327 1007 220 923 317 b 871 353 903 343 890 351 b 840 340 860 353 852 350 b 806 304 827 330 816 315 b 685 167 765 259 724 213 l 680 160 l 615 235 b 419 344 582 275 523 344 b 3 -144 258 344 3 26 b 4 -168 3 -153 3 -160 b 246 -482 24 -315 99 -422 b 458 -528 340 -521 410 -528 b 514 -526 485 -528 504 -526 b 552 -508 531 -526 552 -517 b 514 -497 552 -503 541 -498 l 503 -497 b 194 -390 432 -494 298 -488 b 69 -151 194 -390 69 -279 b 184 96 69 -60 128 27 b 328 183 202 118 258 183 b 477 96 413 183 454 118 b 559 10 510 62 552 19 b 588 0 566 3 576 0 b 613 7 598 0 609 3 b 723 112 622 14 681 73 b 789 161 733 122 776 161 b 811 144 796 161 802 156 b 936 10 816 135 923 24 b 965 0 942 3 953 0 b 991 7 975 0 985 3 b 1051 66 996 12 1022 37 b 1081 92 1063 73 1073 84 b 1136 143 1099 109 1117 127 b 1168 160 1151 154 1159 160 b 1191 144 1175 160 1181 156 b 1315 10 1197 135 1303 24 b 1344 0 1320 3 1332 0 b 1371 7 1355 0 1365 3 b 1636 295 1381 17 1617 274 b 1656 327 1644 305 1656 318 b 1619 353 1656 341 1630 353 b 1593 343 1610 353 1600 348 b 1460 190 1577 330 1476 204 b 1433 176 1449 180 1440 176 b 1410 189 1424 176 1416 183 b 1287 331 1397 202 1300 320 b 1250 353 1273 344 1261 353 b 1218 340 1240 353 1231 350 b 1185 304 1205 328 1197 315 z',\n        },\n        ornamentPrecompSlideTrillBach: {\n            x_min: 0,\n            x_max: 1048,\n            y_min: -367,\n            y_max: 331,\n            ha: 698,\n            o: 'm 1038 477 l 979 477 l 979 238 l 912 160 b 769 327 858 220 775 317 b 724 353 756 343 743 351 b 693 340 713 353 706 350 b 660 304 680 330 670 315 b 539 167 618 259 577 213 b 533 161 536 166 534 163 b 390 327 480 220 396 317 b 346 353 377 343 364 351 l 340 353 b 308 340 330 353 321 350 b 275 304 295 330 285 315 b 117 122 220 243 168 186 b 0 -144 68 62 0 -48 b 1 -168 0 -153 0 -160 b 243 -482 22 -315 96 -422 b 455 -528 337 -521 408 -528 b 511 -526 482 -528 501 -526 b 549 -508 528 -526 549 -517 b 511 -497 549 -503 539 -498 l 500 -497 b 192 -390 429 -494 295 -488 b 68 -177 192 -390 84 -298 b 66 -151 66 -168 66 -160 b 189 105 66 -58 127 35 b 232 143 203 118 216 131 b 264 161 246 154 256 161 b 285 144 271 161 276 156 b 410 10 291 135 397 24 b 439 0 416 3 428 0 b 465 7 449 0 459 3 l 531 72 b 554 92 540 78 547 86 b 611 143 573 109 590 127 b 642 161 625 154 635 161 b 664 144 649 161 655 156 b 789 10 670 135 776 24 b 818 0 795 3 806 0 b 844 7 828 0 838 3 b 904 66 850 12 876 37 b 935 92 916 73 924 84 b 979 134 949 107 963 121 l 979 -88 l 1037 -88 l 1037 151 l 1044 144 b 1168 10 1050 135 1156 24 b 1197 0 1174 3 1185 0 b 1224 7 1208 0 1218 3 b 1489 295 1234 17 1470 274 b 1509 327 1498 305 1509 318 b 1472 353 1509 341 1483 353 b 1446 343 1463 353 1453 348 b 1313 190 1430 330 1329 204 b 1286 176 1302 180 1293 176 b 1263 189 1277 176 1269 183 b 1140 331 1250 202 1153 320 b 1103 353 1126 344 1115 353 b 1071 340 1093 353 1084 350 b 1038 304 1058 328 1050 315 z',\n        },\n        ornamentPrecompTrillSuffixDandrieu: {\n            x_min: 0,\n            x_max: 949,\n            y_min: 0,\n            y_max: 381,\n            ha: 381,\n            o: 'm 1367 314 b 1250 521 1367 419 1318 482 b 1107 549 1211 537 1145 549 b 1083 546 1096 549 1087 549 b 1066 528 1071 540 1066 534 b 1079 520 1066 524 1070 520 b 1323 351 1187 517 1323 487 b 1201 171 1323 269 1260 219 b 1194 166 1201 171 1198 168 b 1056 327 1142 226 1063 317 b 1011 353 1043 343 1030 351 b 979 340 999 353 992 350 b 946 304 966 330 956 315 b 825 167 904 259 864 213 l 821 161 b 678 327 768 222 685 317 b 634 353 665 343 652 351 b 602 340 622 353 615 350 b 569 304 589 330 579 315 b 448 167 527 259 487 213 l 444 161 b 301 327 390 222 308 317 b 256 353 288 343 275 351 b 225 340 245 353 238 350 b 192 304 212 330 202 315 b 71 167 150 259 109 213 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 174 161 157 154 167 161 b 196 144 181 161 187 156 b 321 10 202 135 308 24 b 350 0 327 3 338 0 b 376 7 360 0 370 3 b 485 112 384 14 444 73 b 552 161 495 122 539 161 b 573 144 559 161 564 156 b 698 10 579 135 685 24 b 727 0 704 3 716 0 b 753 7 737 0 747 3 b 863 112 762 14 821 73 b 929 161 873 122 916 161 b 950 144 936 161 942 156 b 1076 10 956 135 1063 24 b 1104 0 1081 3 1093 0 b 1130 7 1115 0 1125 3 b 1236 108 1139 14 1195 69 b 1367 314 1297 160 1367 233 z',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefix: {\n            x_min: 0,\n            x_max: 1278,\n            y_min: 0,\n            y_max: 247,\n            ha: 247,\n            o: 'm 1801 356 b 1776 346 1793 356 1783 351 b 1642 192 1760 333 1659 206 b 1614 177 1630 181 1621 177 b 1591 190 1606 177 1597 184 b 1469 334 1578 203 1482 323 b 1430 356 1453 347 1441 356 b 1398 343 1420 356 1411 353 b 1365 307 1385 331 1377 318 l 1240 164 b 1097 330 1187 226 1104 320 b 1053 356 1084 346 1071 354 b 1021 343 1041 356 1034 353 b 988 307 1008 333 998 318 b 865 168 946 262 904 216 l 861 163 b 717 330 808 223 724 320 b 672 356 704 346 691 354 b 641 343 661 356 654 353 b 608 307 628 333 618 318 b 485 168 566 262 524 216 l 455 134 b 284 46 409 88 351 46 b 16 285 148 46 32 265 b 3 295 9 292 4 295 b 0 291 1 295 0 292 b 1 285 0 288 1 285 b 308 0 42 190 157 0 b 530 120 415 1 482 63 b 559 144 539 128 549 137 b 590 163 573 156 583 163 b 612 145 598 163 603 157 b 739 10 618 137 724 24 b 768 0 744 3 756 0 b 793 7 778 0 788 3 b 903 114 802 14 861 75 l 939 144 b 971 163 953 156 963 163 b 992 145 978 163 984 157 b 1119 10 998 137 1106 24 b 1148 0 1125 3 1136 0 b 1174 7 1158 0 1168 3 b 1284 114 1182 14 1241 75 b 1316 144 1282 115 1312 141 b 1348 161 1331 156 1339 161 b 1371 145 1355 161 1361 157 b 1496 10 1377 137 1485 24 b 1525 0 1502 3 1513 0 b 1552 7 1536 0 1547 3 b 1819 298 1562 17 1800 276 b 1840 330 1829 308 1840 320 b 1832 344 1840 334 1837 340 b 1801 356 1820 351 1810 356 z',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\n            x_min: 0,\n            x_max: 1277,\n            y_min: -62,\n            y_max: 333,\n            ha: 395,\n            o: 'm 1273 202 l 1273 480 l 1230 480 l 1230 174 l 1097 328 b 1053 354 1084 344 1071 353 b 1021 341 1041 354 1034 351 b 988 305 1008 331 998 317 b 865 167 945 261 904 215 l 861 161 b 717 328 808 222 724 318 b 672 354 704 344 691 353 b 641 341 661 354 654 351 b 608 305 628 331 618 317 b 485 167 564 261 524 215 b 455 132 474 156 465 144 b 284 45 410 88 350 45 b 14 284 148 45 30 264 b 3 294 9 291 4 294 b 0 289 1 294 0 291 b 1 284 0 287 1 284 b 308 -1 42 189 157 -1 b 530 118 415 0 481 62 b 557 143 539 127 547 135 b 590 161 572 154 582 161 b 612 144 598 161 603 156 b 737 9 618 135 724 24 b 768 -1 743 1 755 -1 b 793 6 778 -1 788 1 b 903 112 802 13 861 73 l 937 143 b 971 161 953 154 963 161 b 992 144 978 161 984 156 b 1117 9 998 135 1104 24 b 1148 -1 1123 1 1136 -1 b 1174 6 1158 -1 1168 1 l 1230 60 l 1230 -89 l 1273 -89 l 1273 102 l 1283 112 b 1348 160 1295 125 1332 160 b 1371 144 1355 160 1361 156 b 1496 9 1377 135 1483 24 b 1525 -1 1502 1 1513 -1 b 1552 6 1536 -1 1547 1 b 1819 297 1562 16 1800 275 b 1839 328 1827 307 1839 320 b 1801 354 1839 343 1813 354 b 1776 344 1793 354 1783 350 b 1642 190 1760 331 1657 206 b 1614 176 1630 180 1621 176 b 1591 189 1606 176 1597 183 b 1467 333 1578 203 1480 321 b 1430 354 1453 346 1441 354 b 1398 341 1420 354 1411 351 b 1365 305 1385 330 1377 317 z',\n        },\n        ornamentPrecompTrillLowerSuffix: {\n            x_min: 0,\n            x_max: 859,\n            y_min: -222,\n            y_max: 246,\n            ha: 468,\n            o: 'm 1164 217 b 1031 351 1138 259 1063 351 b 1011 337 1020 351 1024 347 b 828 167 952 291 886 217 l 824 164 b 683 328 772 225 690 318 b 638 354 670 344 657 353 b 606 341 626 354 619 351 b 573 305 593 331 583 317 b 451 167 530 261 490 215 l 446 161 b 302 328 393 222 310 318 b 258 354 289 344 276 353 b 226 341 246 354 239 351 b 193 305 213 331 203 317 b 71 167 150 261 109 215 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 176 161 157 154 168 161 b 197 144 183 161 189 156 b 323 9 203 135 310 23 b 353 -1 328 1 340 -1 b 379 6 363 -1 373 1 b 488 112 387 13 446 73 l 523 143 b 556 161 539 154 549 161 b 577 144 563 161 569 156 b 703 9 583 135 690 23 b 733 -1 708 1 721 -1 b 759 6 743 -1 753 1 b 868 112 768 13 827 73 b 955 183 878 122 943 183 b 1081 107 965 183 1031 153 b 1156 -89 1128 63 1156 6 l 1156 -102 b 948 -297 1156 -204 1048 -297 b 806 -271 904 -297 850 -282 l 792 -266 b 801 -288 792 -268 795 -282 b 948 -320 809 -297 880 -320 b 1237 -50 1092 -320 1237 -199 b 1164 217 1237 75 1218 122 z',\n        },\n        brassScoop: {\n            x_min: 1,\n            x_max: 320,\n            y_min: -373,\n            y_max: 13,\n            ha: 386,\n            o: 'm 35 -537 b 461 -12 194 -518 461 -289 b 438 19 461 13 451 19 b 410 -9 425 19 413 9 b 35 -425 357 -366 92 -403 b 1 -482 13 -433 1 -438 l 1 -505 b 26 -537 1 -526 3 -537 z',\n        },\n        brassDoitMedium: {\n            x_min: 0,\n            x_max: 489,\n            y_min: -40,\n            y_max: 346,\n            ha: 386,\n            o: 'm 33 -58 b 704 468 255 -58 683 186 b 681 498 704 494 693 498 b 654 471 668 498 658 488 b 33 55 550 118 91 76 b 0 -3 12 46 0 42 l 0 -26 b 24 -58 0 -46 1 -58 z',\n        },\n        brassFallLipShort: {\n            x_min: 1,\n            x_max: 293,\n            y_min: -345,\n            y_max: 42,\n            ha: 387,\n            o: 'm 22 60 b 1 35 4 60 1 52 l 1 6 b 26 -50 3 -40 10 -43 b 32 -52 27 -50 30 -50 b 376 -469 85 -73 327 -111 b 400 -497 379 -487 387 -497 b 422 -467 412 -497 422 -491 b 32 60 422 -187 177 40 z',\n        },\n        brassLiftMedium: {\n            x_min: 0,\n            x_max: 811,\n            y_min: 0,\n            y_max: 852,\n            ha: 852,\n            o: 'm 1138 1220 b 1135 1225 1135 1223 1135 1224 b 1129 1227 1133 1227 1130 1227 b 1117 1207 1122 1227 1117 1212 l 1117 1201 b 1109 1164 1117 1187 1117 1172 b 1100 1156 1107 1161 1104 1158 b 959 1104 1058 1128 995 1140 b 929 1032 936 1081 929 1056 b 932 1007 929 1024 930 1015 b 923 976 932 995 930 985 l 914 971 b 773 919 873 942 809 955 b 743 847 750 896 743 870 b 746 821 743 838 744 829 b 737 791 746 809 744 799 l 729 783 b 588 733 687 756 624 769 b 557 661 564 710 557 684 b 560 635 557 652 559 644 b 552 605 560 624 559 612 l 543 598 b 402 547 501 570 438 583 b 372 475 379 524 372 498 b 374 449 372 467 373 458 b 366 419 374 438 373 426 l 357 412 b 216 361 315 384 252 397 b 186 289 193 338 186 312 b 189 264 186 281 187 272 b 180 233 189 252 187 240 b 171 226 177 232 174 229 b 30 176 130 199 66 212 b 0 104 7 153 0 128 b 33 0 0 88 14 0 b 49 17 40 0 49 10 b 71 63 52 35 56 49 b 212 115 102 95 154 59 b 239 186 230 134 239 160 b 236 210 239 194 238 202 b 256 249 239 225 243 236 b 397 301 288 281 340 245 b 425 372 416 320 425 346 b 422 396 425 380 423 387 b 442 435 425 410 429 422 b 583 487 474 467 526 431 b 611 557 602 505 611 531 b 608 582 611 566 609 573 b 628 621 611 596 615 608 b 769 672 660 652 711 618 b 796 743 788 691 796 717 b 793 768 796 752 795 759 b 814 806 796 782 801 793 b 955 858 845 838 897 804 b 982 929 973 877 982 903 b 979 953 982 937 981 945 b 999 992 982 968 986 979 b 1140 1045 1031 1024 1083 989 b 1168 1116 1161 1066 1168 1090 b 1138 1220 1168 1162 1145 1207 z',\n        },\n        brassFallRoughMedium: {\n            x_min: 0,\n            x_max: 811,\n            y_min: 0,\n            y_max: 852,\n            ha: 852,\n            o: 'm 30 1220 b 0 1116 23 1207 0 1162 b 27 1045 0 1090 7 1066 b 168 992 85 989 137 1024 b 189 953 181 979 186 968 b 186 929 187 945 186 937 b 213 858 186 903 194 877 b 354 806 271 804 323 838 b 374 768 367 793 372 782 b 372 743 373 759 372 752 b 399 672 372 717 380 691 b 540 621 456 618 508 652 b 560 582 553 608 557 596 b 557 557 559 573 557 566 b 585 487 557 531 566 505 b 726 435 642 431 694 467 b 746 396 739 422 743 410 b 743 372 744 387 743 380 b 770 301 743 346 752 320 b 912 249 828 245 880 281 b 932 210 924 236 929 225 b 929 186 930 202 929 194 b 956 115 929 160 937 134 b 1097 63 1014 59 1066 95 b 1119 17 1112 49 1116 35 b 1135 0 1119 10 1128 0 b 1168 104 1153 0 1168 91 b 1138 176 1168 128 1161 153 b 996 226 1102 212 1038 199 b 988 233 994 229 991 232 b 979 264 981 240 979 252 b 982 289 981 272 982 281 b 952 361 982 312 975 338 b 811 412 916 397 852 384 l 802 419 b 793 449 795 426 793 438 b 796 475 795 458 796 467 b 766 547 796 498 789 524 b 625 598 730 583 667 570 l 616 605 b 608 635 609 612 608 624 b 611 661 609 644 611 652 b 580 733 611 684 603 710 b 439 783 544 769 481 756 l 431 791 b 422 821 423 799 422 809 b 425 847 423 829 425 838 b 395 919 425 870 418 896 b 253 971 359 955 295 942 l 245 976 b 236 1007 238 985 236 995 b 239 1032 238 1015 239 1024 b 209 1104 239 1056 232 1081 b 68 1156 173 1140 109 1128 b 59 1164 63 1158 60 1161 b 50 1201 50 1172 50 1187 l 50 1207 b 39 1227 50 1212 46 1227 b 33 1225 37 1227 35 1227 b 30 1220 33 1224 33 1223 z',\n        },\n        brassBend: {\n            x_min: 0,\n            x_max: 392,\n            y_min: 0,\n            y_max: 282,\n            ha: 282,\n            o: 'm 282 0 b 552 72 369 0 456 23 b 564 92 560 75 564 84 l 564 383 b 541 406 564 395 554 406 b 518 383 528 406 518 395 l 518 107 b 282 46 435 65 357 46 b 46 107 207 46 130 65 l 46 383 b 23 406 46 395 36 406 b 0 383 10 406 0 395 l 0 92 b 13 72 0 84 4 75 b 282 0 108 23 196 0 z',\n        },\n        brassMuteClosed: {\n            x_min: 0,\n            x_max: 272,\n            y_min: 0,\n            y_max: 272,\n            ha: 272,\n            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',\n        },\n        brassMuteOpen: {\n            x_min: 0,\n            x_max: 304,\n            y_min: 0,\n            y_max: 304,\n            ha: 304,\n            o: 'm 219 0 b 438 219 340 0 438 98 b 219 438 438 340 340 438 b 0 219 98 438 0 340 b 219 0 0 98 98 0 z m 219 392 b 392 219 314 392 392 314 b 219 46 392 124 314 46 b 46 219 124 46 46 124 b 219 392 46 314 124 392 z',\n        },\n        brassFlip: {\n            x_min: 0,\n            x_max: 379,\n            y_min: 0,\n            y_max: 282,\n            ha: 282,\n            o: 'm 523 0 b 541 9 530 0 536 3 b 546 22 544 13 546 17 b 536 42 546 29 541 36 l 36 402 b 23 406 33 405 27 406 b 0 383 12 406 0 395 l 0 23 b 23 0 0 10 10 0 b 46 23 36 0 46 10 l 46 337 l 508 4 b 523 0 513 1 517 0 z',\n        },\n        brassJazzTurn: {\n            x_min: 0,\n            x_max: 620,\n            y_min: 0,\n            y_max: 245,\n            ha: 245,\n            o: 'm 792 190 b 765 176 780 179 772 176 b 740 190 755 176 747 183 b 629 325 727 202 644 312 b 593 347 616 338 605 347 b 562 334 583 346 575 344 b 528 298 549 323 539 310 l 406 176 b 389 168 406 176 399 168 b 374 176 384 168 379 170 b 245 325 360 192 245 325 b 200 353 232 343 219 351 b 168 340 190 353 181 350 l 17 156 b 0 121 10 147 0 132 b 16 107 0 114 4 108 b 84 143 26 107 76 137 b 118 160 92 150 108 160 b 141 143 125 160 131 154 b 265 10 147 135 253 24 b 294 0 271 3 282 0 b 321 7 305 0 315 3 b 498 160 321 7 478 158 b 521 143 505 160 513 154 b 647 10 528 135 635 24 b 675 0 652 3 664 0 b 703 7 687 0 697 3 b 874 186 713 16 855 164 b 893 220 881 196 893 212 b 873 245 890 235 883 243 b 796 194 847 245 815 213 z',\n        },\n        brassSmear: {\n            x_min: 1,\n            x_max: 306,\n            y_min: 0,\n            y_max: 170,\n            ha: 170,\n            o: 'm 193 79 b 308 0 219 50 264 0 b 439 117 396 0 438 102 b 439 120 439 118 439 118 l 441 125 b 441 128 441 127 441 127 b 433 141 441 135 439 141 b 416 130 429 141 423 137 b 343 94 390 107 370 94 b 269 153 315 94 294 121 l 265 158 b 144 245 239 190 180 245 b 6 134 62 245 10 143 b 1 114 3 125 1 118 b 7 107 1 108 4 107 b 36 122 13 107 22 112 b 92 151 55 137 65 151 b 183 89 125 151 161 112 b 189 84 184 88 187 86 z',\n        },\n        stringsDownBow: {\n            x_min: 0,\n            x_max: 312,\n            y_min: 0,\n            y_max: 318,\n            ha: 318,\n            o: 'm 37 458 b 0 420 17 458 0 441 l 0 17 b 17 0 0 7 9 0 l 37 0 b 55 17 46 0 55 7 l 55 253 b 225 278 55 269 140 278 b 395 253 310 278 395 269 l 395 17 b 413 0 395 7 403 0 l 432 0 b 449 17 441 0 449 7 l 449 420 b 412 458 449 441 432 458 z',\n        },\n        stringsUpBow: {\n            x_min: 1,\n            x_max: 249,\n            y_min: 1,\n            y_max: 495,\n            ha: 494,\n            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',\n        },\n        stringsHarmonic: {\n            x_min: 0,\n            x_max: 200,\n            y_min: 0,\n            y_max: 200,\n            ha: 200,\n            o: 'm 288 144 b 144 288 288 225 223 288 b 0 144 65 288 0 225 b 144 0 0 65 65 0 b 288 144 223 0 288 65 z m 144 249 b 249 144 203 249 249 203 b 144 39 249 86 203 39 b 39 144 86 39 39 86 b 144 249 39 203 86 249 z',\n        },\n        pluckedSnapPizzicatoAbove: {\n            x_min: 0,\n            x_max: 200,\n            y_min: 0,\n            y_max: 300,\n            ha: 300,\n            o: 'm 0 144 b 144 0 0 63 65 0 b 288 144 223 0 288 63 b 167 285 288 215 235 275 l 167 432 l 121 432 l 121 285 b 0 144 52 275 0 215 z m 121 246 l 121 144 l 167 144 l 167 246 b 249 144 213 236 249 193 b 144 39 249 85 202 39 b 39 144 85 39 39 85 b 121 246 39 193 73 236 z',\n        },\n        pluckedSnapPizzicatoBelow: {\n            x_min: 0,\n            x_max: 200,\n            y_min: 0,\n            y_max: 300,\n            ha: 300,\n            o: 'm 288 288 b 144 432 288 369 223 432 b 0 288 65 432 0 369 b 121 145 0 216 52 157 l 121 0 l 167 0 l 167 145 b 288 288 235 157 288 216 z m 167 186 l 167 288 l 121 288 l 121 186 b 39 288 75 196 39 238 b 144 393 39 347 86 393 b 249 288 203 393 249 347 b 167 186 249 238 215 196 z',\n        },\n        pluckedLeftHandPizzicato: {\n            x_min: 0,\n            x_max: 272,\n            y_min: 0,\n            y_max: 272,\n            ha: 272,\n            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',\n        },\n        keyboardPedalPed: {\n            x_min: 0,\n            x_max: 1019,\n            y_min: -8,\n            y_max: 555,\n            ha: 563,\n            o: 'm 413 799 b 179 749 327 798 261 789 b 0 517 107 713 0 632 b 122 376 0 454 37 376 b 240 540 189 376 240 452 b 225 586 240 579 233 586 b 204 549 213 586 212 573 b 138 480 199 527 181 480 b 85 549 96 480 85 517 l 85 554 b 353 762 89 690 230 762 b 373 752 364 762 373 760 b 351 708 373 740 360 723 b 274 546 330 675 274 585 b 353 416 274 508 333 444 b 412 304 372 390 412 351 b 382 228 412 275 403 256 b 334 190 363 202 361 200 b 147 29 271 167 147 88 b 196 -12 147 4 171 -12 b 343 108 239 -12 279 33 l 363 132 b 387 150 370 141 376 150 b 543 -4 445 150 467 -4 b 631 42 567 -4 586 0 l 668 78 b 685 89 674 84 680 89 b 696 75 688 89 690 86 b 809 -9 717 29 753 -9 b 946 66 854 -9 894 13 b 988 107 971 92 981 107 b 1002 89 994 107 996 99 b 1152 -4 1030 36 1077 -4 b 1329 248 1238 -4 1329 82 b 792 717 1329 556 1047 665 b 766 720 785 719 775 720 b 747 703 752 720 747 711 b 780 680 747 693 756 685 b 1223 222 1028 621 1223 504 b 1152 39 1223 122 1205 39 b 1073 229 1104 39 1073 132 b 1132 423 1073 314 1086 377 b 1142 442 1140 432 1142 436 b 1126 458 1142 451 1136 458 b 1093 446 1119 458 1109 455 b 975 216 1022 408 975 337 l 975 190 b 943 121 975 160 972 150 b 852 69 899 76 877 69 b 776 148 816 69 786 117 b 773 163 775 154 773 158 b 786 177 773 167 776 170 l 801 187 b 937 366 867 235 937 284 b 844 454 937 422 900 454 b 665 217 711 454 665 331 b 671 153 665 197 667 176 l 671 147 b 662 134 671 143 670 140 b 605 111 639 118 625 111 b 521 160 572 111 546 135 b 451 203 497 184 474 197 b 426 212 435 207 426 206 b 436 230 426 216 429 220 b 510 389 464 269 510 340 b 429 521 510 435 480 462 b 369 629 387 570 369 599 b 402 720 369 648 384 691 b 462 763 425 759 446 763 b 611 624 540 763 611 704 b 564 575 611 592 590 575 b 501 602 540 575 520 582 b 474 622 492 611 487 622 b 459 603 465 622 459 615 b 603 471 459 570 510 471 b 711 588 670 471 711 524 b 422 799 711 742 554 799 z m 815 403 b 848 343 838 403 848 383 b 780 226 848 295 824 261 b 765 217 773 220 768 217 b 759 228 762 217 759 220 b 756 282 757 245 756 262 b 815 403 756 346 772 403 z m 1405 124 b 1344 62 1369 124 1344 98 b 1405 0 1344 26 1369 0 b 1467 62 1441 0 1467 26 b 1405 124 1467 98 1441 124 z',\n        },\n        keyboardPedalUp: {\n            x_min: 0,\n            x_max: 450,\n            y_min: 0,\n            y_max: 450,\n            ha: 450,\n            o: 'm 582 396 b 516 367 554 396 533 384 b 465 340 495 347 487 340 l 458 340 b 412 377 432 340 412 348 b 432 409 412 387 419 396 l 438 415 b 490 429 451 428 464 429 b 575 501 534 429 575 452 b 501 575 575 541 541 575 b 429 490 452 575 429 534 b 415 438 429 464 428 451 l 409 432 b 377 412 396 419 387 412 b 340 458 348 412 340 432 l 340 465 b 367 516 340 487 347 495 b 396 582 384 533 396 554 b 324 648 396 625 363 648 b 252 582 285 648 252 625 b 281 516 252 554 264 533 b 308 465 301 495 308 487 l 308 458 b 271 412 308 432 300 412 b 239 432 261 412 252 419 l 233 438 b 219 490 220 451 219 464 b 147 575 219 534 196 575 b 73 501 107 575 73 541 b 158 429 73 452 114 429 b 210 415 184 429 197 428 l 216 409 b 236 377 229 396 236 387 b 190 340 236 348 216 340 l 183 340 b 132 367 161 340 153 347 b 66 396 115 384 94 396 b 0 324 23 396 0 363 b 66 252 0 285 23 252 b 132 281 94 252 115 264 b 183 308 153 301 161 308 l 190 308 b 236 271 216 308 236 300 b 216 239 236 261 229 252 l 210 233 b 158 219 197 220 184 219 b 73 147 114 219 73 196 b 147 73 73 107 107 73 b 219 158 196 73 219 114 b 233 210 219 184 220 197 l 239 216 b 271 236 252 229 261 236 b 308 190 300 236 308 216 l 308 183 b 281 132 308 161 301 153 b 252 66 264 115 252 94 b 324 0 252 23 285 0 b 396 66 363 0 396 23 b 367 132 396 94 384 115 b 340 183 347 153 340 161 l 340 190 b 377 236 340 216 348 236 b 409 216 387 236 396 229 l 415 210 b 429 158 428 197 429 184 b 501 73 429 114 452 73 b 575 147 541 73 575 107 b 490 219 575 196 534 219 b 438 233 464 219 451 220 l 432 239 b 412 271 419 252 412 261 b 458 308 412 300 432 308 l 465 308 b 516 281 487 308 495 301 b 582 252 533 264 554 252 b 648 324 625 252 648 285 b 582 396 648 363 625 396 z m 324 271 b 271 324 291 271 271 291 b 324 377 271 357 291 377 b 377 324 357 377 377 357 b 324 271 377 291 357 271 z',\n        },\n        pictChokeCymbal: {\n            x_min: 1,\n            x_max: 152,\n            y_min: 2,\n            y_max: 251,\n            ha: 249,\n            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',\n        },\n        wiggleArpeggiatoUp: {\n            x_min: -33,\n            x_max: 292,\n            y_min: 0,\n            y_max: 119,\n            ha: 119,\n            o: 'm 130 171 b -39 68 16 171 -14 91 b -48 53 -45 62 -48 58 b -29 42 -48 46 -39 42 b -10 46 -23 42 -16 43 b 56 63 12 56 29 63 b 248 0 121 63 135 0 b 419 127 361 0 410 104 b 420 132 420 130 420 131 b 412 140 420 137 416 140 b 386 130 403 140 392 134 b 334 107 367 117 353 107 b 318 108 330 107 324 107 b 240 138 289 112 265 128 b 130 171 209 153 168 171 z',\n        },\n        arrowheadBlackUp: {\n            x_min: 0,\n            x_max: 228,\n            y_min: 0,\n            y_max: 299,\n            ha: 299,\n            o: 'm 166 431 b 0 20 111 274 0 30 b 16 0 0 12 6 0 l 17 1 b 166 50 43 16 160 50 b 310 1 171 50 289 13 l 311 0 b 328 20 321 0 328 12 b 166 431 328 30 220 274 z',\n        },\n        arrowheadBlackDown: {\n            x_min: 0,\n            x_max: 228,\n            y_min: 0,\n            y_max: 299,\n            ha: 299,\n            o: 'm 166 0 b 328 410 220 157 328 400 b 311 431 328 419 321 431 l 310 429 b 166 380 289 418 171 380 b 17 429 160 380 43 415 l 16 431 b 0 410 6 431 0 419 b 166 0 0 400 111 157 z',\n        },\n        arpeggiatoUp: {\n            x_min: 1,\n            x_max: 229,\n            y_min: 7,\n            y_max: 1511,\n            ha: 1504,\n            o: 'm 219 1848 l 330 1848 l 164 2176 l 1 1848 l 121 1848 b 92 1778 115 1822 101 1800 l 89 1773 b 59 1668 75 1741 59 1702 b 96 1555 59 1614 76 1580 b 99 1551 98 1554 99 1551 l 102 1547 b 124 1496 115 1531 124 1515 b 122 1482 124 1492 124 1488 b 92 1404 118 1453 102 1428 b 59 1293 78 1372 59 1332 b 105 1172 59 1234 81 1198 b 124 1120 118 1155 124 1143 l 122 1113 b 122 1110 122 1113 122 1112 b 92 1032 118 1081 102 1057 b 59 922 78 1001 59 960 b 115 792 59 855 86 816 b 124 760 121 782 124 773 b 122 744 124 756 124 750 b 92 667 118 716 102 693 b 59 556 78 635 59 595 b 108 433 59 495 82 458 b 124 389 117 420 124 408 b 122 374 124 384 124 379 b 92 298 118 346 102 323 l 89 292 b 59 186 75 261 59 222 b 163 19 59 73 140 42 b 177 10 168 13 173 10 b 189 29 184 10 189 19 b 184 48 189 35 187 42 b 167 114 174 69 167 85 b 230 305 167 179 229 193 b 181 423 230 357 209 396 b 167 484 173 442 167 458 b 230 675 167 547 229 563 b 179 796 230 729 206 769 b 167 850 171 812 167 827 b 230 1040 167 913 229 929 b 183 1158 230 1092 209 1130 b 167 1220 173 1178 167 1194 b 230 1411 167 1284 229 1300 b 186 1526 230 1462 210 1499 b 167 1594 176 1529 167 1584 b 230 1786 167 1659 229 1673 b 219 1848 230 1809 226 1829 z',\n        },\n        arpeggiatoDown: {\n            x_min: 1,\n            x_max: 229,\n            y_min: -4,\n            y_max: 1500,\n            ha: 1504,\n            o: 'm 219 323 b 230 384 226 341 230 361 b 167 576 229 497 167 511 b 186 644 167 586 176 641 b 230 759 210 671 230 708 b 167 950 229 870 167 886 b 183 1012 167 976 173 992 b 230 1130 209 1040 230 1079 b 167 1320 229 1241 167 1257 b 179 1374 167 1344 171 1358 b 230 1495 206 1401 230 1441 b 167 1686 229 1607 167 1623 b 181 1747 167 1712 173 1728 b 230 1865 209 1774 230 1813 b 167 2056 229 1977 167 1992 b 184 2123 167 2085 174 2101 b 189 2141 187 2128 189 2136 b 177 2160 189 2151 184 2160 b 163 2151 173 2160 168 2157 b 59 1984 140 2128 59 2097 b 89 1878 59 1948 75 1909 l 92 1872 b 122 1796 102 1848 118 1824 b 124 1781 124 1791 124 1786 b 108 1737 124 1763 117 1750 b 59 1614 82 1712 59 1675 b 92 1503 59 1575 78 1535 b 122 1426 102 1477 118 1454 b 124 1410 124 1420 124 1414 b 115 1378 124 1397 121 1388 b 59 1248 86 1354 59 1315 b 92 1138 59 1210 78 1169 b 122 1060 102 1113 118 1089 b 122 1057 122 1058 122 1058 l 124 1050 b 105 998 124 1027 118 1015 b 59 877 81 972 59 936 b 92 766 59 838 78 798 b 122 688 102 742 118 717 b 124 674 124 683 124 678 b 102 624 124 655 115 639 l 99 619 b 96 615 99 619 98 616 b 59 503 76 590 59 556 b 89 397 59 468 75 429 l 92 392 b 121 323 101 370 115 348 l 1 323 l 164 -6 l 330 323 z',\n        },\n        repeat1Bar: {\n            x_min: 0,\n            x_max: 532,\n            y_min: -250,\n            y_max: 279,\n            ha: 529,\n            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 675 -71 b 586 -161 626 -71 586 -111 b 675 -251 586 -210 626 -251 b 766 -161 726 -251 766 -210 b 675 -71 766 -111 726 -71 z',\n        },\n        repeat2Bars: {\n            x_min: 0,\n            x_max: 762,\n            y_min: -250,\n            y_max: 279,\n            ha: 529,\n            o: 'm 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1007 -71 b 917 -161 958 -71 917 -111 b 1007 -251 917 -210 958 -251 b 1097 -161 1057 -251 1097 -210 b 1007 -71 1097 -111 1057 -71 z',\n        },\n        repeat4Bars: {\n            x_min: 0,\n            x_max: 1232,\n            y_min: -250,\n            y_max: 279,\n            ha: 529,\n            o: 'm 1767 380 b 1774 395 1771 386 1774 390 b 1765 402 1774 399 1771 402 l 1613 402 b 1587 380 1604 402 1597 393 l 1012 -340 b 1008 -350 1009 -343 1008 -347 b 1020 -360 1008 -356 1012 -360 l 1162 -360 b 1192 -340 1175 -360 1185 -348 z m 1436 380 b 1443 395 1440 386 1443 390 b 1434 402 1443 399 1440 402 l 1282 402 b 1256 380 1273 402 1266 393 l 681 -340 b 677 -350 678 -343 677 -347 b 688 -360 677 -356 681 -360 l 831 -360 b 861 -340 844 -360 854 -348 z m 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1683 -71 b 1594 -161 1634 -71 1594 -111 b 1683 -251 1594 -210 1634 -251 b 1774 -161 1734 -251 1774 -210 b 1683 -71 1774 -111 1734 -71 z',\n        },\n        repeatBarSlash: {\n            x_min: 0,\n            x_max: 532,\n            y_min: -250,\n            y_max: 279,\n            ha: 529,\n            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z',\n        },\n        csymDiminished: {\n            x_min: 0,\n            x_max: 473,\n            y_min: 0,\n            y_max: 473,\n            ha: 473,\n            o: 'm 341 681 b 0 341 153 681 0 530 b 341 0 0 153 153 0 b 681 341 530 0 681 153 b 341 681 681 530 530 681 z m 341 618 b 618 341 495 618 618 495 b 341 63 618 189 494 63 b 63 341 187 63 63 187 b 341 618 63 494 189 618 z',\n        },\n        csymHalfDiminished: {\n            x_min: -16,\n            x_max: 488,\n            y_min: -15,\n            y_max: 489,\n            ha: 504,\n            o: 'm 703 660 l 658 704 l 557 603 b 340 681 498 652 422 681 b -1 341 151 681 -1 530 b 78 124 -1 259 29 183 l -23 23 l 22 -22 l 122 79 b 340 0 181 30 258 0 b 680 341 528 0 680 153 b 602 559 680 423 651 500 z m 62 341 b 340 618 62 494 187 618 b 513 559 403 618 464 598 l 122 168 b 62 341 84 217 62 278 z m 616 341 b 340 63 616 189 492 63 b 167 124 276 63 216 85 l 557 514 b 616 341 596 465 616 405 z',\n        },\n        csymAugmented: {\n            x_min: 0,\n            x_max: 395,\n            y_min: 1,\n            y_max: 396,\n            ha: 395,\n            o: 'm 569 318 l 317 318 l 317 570 l 253 570 l 253 318 l 0 318 l 0 255 l 253 255 l 253 1 l 317 1 l 317 255 l 569 255 z',\n        },\n        csymMajorSeventh: {\n            x_min: 0,\n            x_max: 558,\n            y_min: 1,\n            y_max: 477,\n            ha: 476,\n            o: 'm 402 687 l 0 1 l 804 1 z m 402 562 l 693 65 l 111 65 z',\n        },\n        csymMinor: {\n            x_min: 0,\n            x_max: 325,\n            y_min: 216,\n            y_max: 260,\n            ha: 44,\n            o: 'm 468 374 l 0 374 l 0 311 l 468 311 z',\n        },\n        csymParensLeftTall: {\n            x_min: 1,\n            x_max: 185,\n            y_min: 0,\n            y_max: 997,\n            ha: 997,\n            o: 'm 266 48 b 261 65 266 55 264 62 b 92 719 157 212 92 400 b 262 1371 92 1037 154 1228 b 266 1394 266 1378 266 1394 l 266 1424 b 264 1436 266 1431 266 1436 b 259 1434 262 1436 259 1434 b 1 719 84 1261 1 1011 b 259 1 1 429 79 177 b 264 0 261 0 262 0 b 266 9 265 0 266 6 z',\n        },\n        csymParensRightTall: {\n            x_min: -20,\n            x_max: 164,\n            y_min: 0,\n            y_max: 997,\n            ha: 997,\n            o: 'm -29 9 b -26 0 -29 6 -27 0 b -22 1 -24 0 -23 0 b 236 719 158 177 236 429 b -22 1434 236 1011 154 1261 b -26 1436 -22 1434 -24 1436 b -29 1424 -29 1436 -29 1431 l -29 1394 b -24 1371 -29 1394 -29 1378 b 145 719 84 1228 145 1037 b -23 65 145 400 81 212 b -29 48 -26 62 -29 55 z',\n        },\n        csymBracketLeftTall: {\n            x_min: 0,\n            x_max: 155,\n            y_min: 0,\n            y_max: 1000,\n            ha: 1000,\n            o: 'm 217 0 b 223 9 220 0 223 4 l 223 37 b 217 46 223 42 220 46 l 92 46 l 92 1394 l 217 1394 b 223 1403 220 1394 223 1398 l 223 1431 b 217 1440 223 1436 220 1440 l 6 1440 b 0 1436 3 1440 0 1439 l 0 4 b 6 0 0 1 3 0 z',\n        },\n        csymBracketRightTall: {\n            x_min: 1,\n            x_max: 156,\n            y_min: 0,\n            y_max: 1000,\n            ha: 1000,\n            o: 'm 219 0 b 225 4 222 0 225 1 l 225 1436 b 219 1440 225 1439 222 1440 l 7 1440 b 1 1431 4 1440 1 1436 l 1 1403 b 7 1394 1 1398 4 1394 l 132 1394 l 132 46 l 7 46 b 1 37 4 46 1 42 l 1 9 b 7 0 1 4 4 0 z',\n        },\n        csymParensLeftVeryTall: {\n            x_min: 0,\n            x_max: 122,\n            y_min: 0,\n            y_max: 993,\n            ha: 993,\n            o: 'm 176 32 b 171 49 176 39 174 46 b 60 716 104 194 60 399 b 173 1382 60 1032 101 1241 b 176 1405 176 1390 176 1405 l 176 1427 b 173 1430 176 1428 174 1430 b 0 716 40 1297 0 978 b 170 3 0 428 50 179 b 171 0 170 1 170 0 b 176 6 173 0 176 4 z',\n        },\n        csymParensRightVeryTall: {\n            x_min: -15,\n            x_max: 107,\n            y_min: 0,\n            y_max: 993,\n            ha: 993,\n            o: 'm -22 6 b -17 0 -22 4 -19 0 b -16 3 -16 0 -16 1 b 154 716 104 179 154 428 b -19 1430 154 978 114 1297 b -22 1427 -20 1430 -22 1428 l -22 1405 b -19 1382 -22 1405 -22 1390 b 94 716 53 1241 94 1032 b -17 49 94 399 50 194 b -22 32 -20 46 -22 39 z',\n        },\n        csymDiagonalArrangementSlash: {\n            x_min: 0,\n            x_max: 999,\n            y_min: 0,\n            y_max: 1000,\n            ha: 1000,\n            o: 'm 1439 1380 l 1377 1440 l 0 60 l 62 0 z',\n        },\n        accSagittal5v7KleismaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -35 b 135 -112 68 -86 99 -112 b 225 68 194 -112 225 -53 l 180 68 b 144 -4 180 20 168 -4 b 122 0 138 -4 131 -3 b 23 248 86 14 52 96 l 0 248 z',\n        },\n        accSagittal5v7KleismaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 b 122 0 52 -96 86 -14 b 144 4 131 3 138 4 b 180 -68 168 4 180 -20 l 225 -68 b 135 112 225 53 194 112 b 45 35 99 112 68 86 l 45 517 l 0 517 z',\n        },\n        accSagittal5CommaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 225 -517 l 225 248 l 203 248 l 0 -112 l 0 -284 l 180 33 l 180 -517 z',\n        },\n        accSagittal5CommaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 180 517 l 180 -33 l 0 284 l 0 112 l 203 -248 l 225 -248 l 225 517 z',\n        },\n        accSagittal7CommaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 248 l 0 -517 l 45 -517 l 45 112 l 89 112 b 180 -68 150 112 180 53 l 180 -248 l 225 -248 l 225 68 b 135 248 225 187 194 248 z',\n        },\n        accSagittal7CommaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 135 -248 b 225 -68 194 -248 225 -187 l 225 248 l 180 248 l 180 68 b 89 -112 180 -53 150 -112 l 45 -112 l 45 517 l 0 517 l 0 -248 z',\n        },\n        accSagittal25SmallDiesisUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -157 l 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 68 l 0 -33 l 315 135 l 315 10 z',\n        },\n        accSagittal25SmallDiesisDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 315 -10 l 315 -135 l 0 33 l 0 -68 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 l 0 157 z',\n        },\n        accSagittal35MediumDiesisUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 l 0 -112 z',\n        },\n        accSagittal35MediumDiesisDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 203 -248 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 -33 l 0 284 z',\n        },\n        accSagittal11MediumDiesisUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 l 0 -89 l 0 -248 z',\n        },\n        accSagittal11MediumDiesisDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 248 l 0 89 l 248 -248 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 z',\n        },\n        accSagittal11LargeDiesisUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 112 l 315 112 b 449 -68 405 112 449 53 l 449 -248 l 495 -248 l 495 68 b 360 248 495 187 449 248 l 135 248 b 0 68 45 248 0 187 z',\n        },\n        accSagittal11LargeDiesisDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 360 -248 b 495 -68 449 -248 495 -187 l 495 248 l 449 248 l 449 68 b 315 -112 449 -53 405 -112 l 271 -112 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittal35LargeDiesisUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 271 -58 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittal35LargeDiesisDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 269 -58 l 269 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp25SDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 112 -112 0 -53 36 -112 l 135 -112 l 135 -517 l 180 -517 l 180 -89 b 248 26 206 -65 229 -27 b 315 -89 264 -27 287 -65 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 122 0 216 96 176 14 b 94 -4 112 -3 102 -4 b 45 68 60 -4 45 20 z',\n        },\n        accSagittalFlat25SUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 94 4 45 -20 60 4 b 122 0 102 4 112 3 b 248 -248 176 -14 216 -96 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 248 -26 287 65 264 27 b 180 89 229 27 206 65 l 180 517 l 135 517 l 135 112 l 112 112 b 0 -68 36 112 0 53 z',\n        },\n        accSagittalSharp7CDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 112 l 89 112 b 180 104 124 112 154 109 l 180 -517 l 225 -517 l 225 89 b 315 -68 285 60 315 9 l 315 -248 l 360 -248 l 360 68 b 135 248 360 187 285 248 l 0 248 z',\n        },\n        accSagittalFlat7CUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 135 -248 b 360 -68 285 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -89 315 -9 285 -60 l 225 517 l 180 517 l 180 -104 b 89 -112 154 -109 124 -112 l 45 -112 l 45 517 l 0 517 z',\n        },\n        accSagittalSharp5CDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -517 l 45 71 l 180 -56 l 180 -517 l 225 -517 l 225 -98 l 405 -268 l 405 -112 l 23 248 l 0 248 l 0 -517 z',\n        },\n        accSagittalFlat5CUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 517 l 0 -248 l 23 -248 l 405 112 l 405 268 l 225 98 l 225 517 l 180 517 l 180 56 l 45 -71 l 45 517 z',\n        },\n        accSagittalSharp5v7kDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -276 l 135 -82 l 135 -517 l 180 -517 l 180 -17 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 z',\n        },\n        accSagittalFlat5v7kUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 248 -248 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 l 180 17 l 180 517 l 135 517 l 135 82 l 0 276 l 0 112 z',\n        },\n        accSagittalSharp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 180 -53 l 180 -517 l 225 -517 l 225 0 l 292 85 l 360 0 l 360 -517 l 405 -517 l 405 -53 l 585 -274 l 585 -112 l 292 248 l 0 -112 l 0 -274 z',\n        },\n        accSagittalFlat: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 274 l 0 112 l 292 -248 l 585 112 l 585 274 l 405 53 l 405 517 l 360 517 l 360 0 l 292 -85 l 225 0 l 225 517 l 180 517 l 180 53 z',\n        },\n        accSagittalSharp5v7kUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -361,\n            y_max: 172,\n            ha: 533,\n            o: 'm 45 -517 l 45 -10 b 135 -92 68 -48 98 -75 l 135 -520 l 180 -520 l 180 -108 b 248 -115 203 -112 225 -115 b 271 -112 256 -115 264 -115 l 271 -517 l 315 -517 l 315 -107 b 449 68 405 -89 449 -30 l 405 68 b 297 -4 405 19 369 -4 b 23 248 131 -4 56 85 l 0 248 l 0 -517 z',\n        },\n        accSagittalFlat5v7kDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 361,\n            ha: 533,\n            o: 'm 0 517 l 0 -248 l 23 -248 b 297 4 56 -85 131 4 b 405 -68 369 4 405 -19 l 449 -68 b 315 107 449 30 405 89 l 315 517 l 271 517 l 271 112 b 248 115 264 115 256 115 b 180 108 225 115 203 112 l 180 520 l 135 520 l 135 92 b 45 10 98 75 68 48 l 45 517 z',\n        },\n        accSagittalSharp5CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 -112 z',\n        },\n        accSagittalFlat5CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 z',\n        },\n        accSagittalSharp7CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 112 l 135 112 l 135 -517 l 180 -517 l 180 108 b 271 89 213 105 243 99 l 271 -517 l 315 -517 l 315 73 b 405 -68 374 45 405 -3 l 405 -248 l 449 -248 l 449 68 b 135 248 449 187 346 248 l 0 248 z',\n        },\n        accSagittalFlat7CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 135 -248 b 449 -68 346 -248 449 -187 l 449 248 l 405 248 l 405 68 b 315 -73 405 3 374 -45 l 315 517 l 271 517 l 271 -89 b 180 -108 243 -99 213 -105 l 180 517 l 135 517 l 135 -112 l 45 -112 l 45 517 l 0 517 z',\n        },\n        accSagittalSharp25SUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -30 l 495 143 l 495 14 l 0 -157 l 0 -255 l 225 -177 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 l 0 68 z',\n        },\n        accSagittalFlat25SDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 l 517 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 177 l 0 255 l 0 157 l 495 -14 l 495 -143 l 0 30 z',\n        },\n        accSagittalSharp35MUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -274 l 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 z',\n        },\n        accSagittalFlat35MDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 l 0 274 l 0 112 z',\n        },\n        accSagittalSharp11MUp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 z',\n        },\n        accSagittalFlat11MDown: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 337 -248 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 l 0 112 z',\n        },\n        accSagittalSharp11LUp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 104 b 631 -68 585 82 631 26 l 631 -248 l 675 -248 l 675 68 b 449 248 675 187 600 248 l 225 248 b 0 68 75 248 0 187 z',\n        },\n        accSagittalFlat11LDown: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 449 -248 b 675 -68 600 -248 675 -187 l 675 248 l 631 248 l 631 68 b 495 -104 631 -26 585 -82 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp35LUp: {\n            x_min: 0,\n            x_max: 500,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 71 l 452 -17 l 452 -517 l 495 -517 l 495 -56 l 720 -268 l 720 -112 l 337 248 l 225 248 b 0 68 75 248 0 187 z',\n        },\n        accSagittalFlat35LDown: {\n            x_min: 0,\n            x_max: 500,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 l 720 112 l 720 268 l 495 56 l 495 517 l 452 517 l 452 17 l 360 -71 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\n        },\n        accSagittalDoubleSharp25SDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 135 -112 0 -53 45 -112 b 243 -62 180 -112 215 -95 l 89 -503 l 143 -517 l 292 -82 l 445 -517 l 495 -503 l 343 -62 b 449 -112 372 -95 408 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 z',\n        },\n        accSagittalDoubleFlat25SUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 343 62 408 112 372 95 l 495 503 l 445 517 l 292 82 l 143 517 l 89 503 l 243 62 b 135 112 215 95 180 112 b 0 -68 45 112 0 53 z',\n        },\n        accSagittalDoubleSharp7CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -503 l 52 -517 l 203 -82 l 354 -517 l 405 -503 l 230 0 l 271 108 b 495 -68 420 92 495 35 l 495 -248 l 540 -248 l 540 68 b 225 248 540 187 435 248 l 89 248 l 89 112 l 135 112 l 174 0 z m 213 112 l 203 82 l 192 112 z',\n        },\n        accSagittalDoubleFlat7CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 174 0 l 135 -112 l 89 -112 l 89 -248 l 225 -248 b 540 -68 435 -248 540 -187 l 540 248 l 495 248 l 495 68 b 271 -108 495 -35 420 -92 l 230 0 l 405 503 l 354 517 l 203 82 l 52 517 l 0 503 z m 192 -112 l 203 -82 l 213 -112 z',\n        },\n        accSagittalDoubleSharp5CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 405 -503 l 230 0 l 232 4 l 585 -264 l 585 -112 l 112 248 l 89 248 l 89 112 l 151 68 l 174 0 l 0 -503 l 52 -517 l 203 -82 l 354 -517 z',\n        },\n        accSagittalDoubleFlat5CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 354 517 l 203 82 l 52 517 l 0 503 l 174 0 l 151 -68 l 89 -112 l 89 -248 l 112 -248 l 585 112 l 585 264 l 232 -4 l 230 0 l 405 503 z',\n        },\n        accSagittalDoubleSharp5v7kDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -274 l 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 l 0 -112 z',\n        },\n        accSagittalDoubleFlat5v7kUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 l 0 274 z',\n        },\n        accSagittalDoubleSharp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 540 -503 l 366 0 l 380 45 l 675 -271 l 675 -112 l 337 248 l 0 -112 l 0 -271 l 295 45 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 z',\n        },\n        accSagittalDoubleFlat: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 295 -45 l 0 271 l 0 112 l 337 -248 l 675 112 l 675 271 l 380 -45 l 366 0 l 540 503 z',\n        },\n        accSagittal7v11KleismaUp: {\n            x_min: 0,\n            x_max: 219,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -45 b 248 -112 200 -89 225 -112 b 315 68 292 -112 315 -53 l 271 68 b 248 -4 271 20 264 -4 b 236 0 245 -4 240 -3 b 157 248 213 14 187 96 b 78 0 127 96 101 14 b 65 -4 73 -3 68 -4 b 45 68 50 -4 45 20 l 0 68 b 68 -112 0 -53 23 -112 z',\n        },\n        accSagittal7v11KleismaDown: {\n            x_min: 0,\n            x_max: 219,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 68 112 b 0 -68 23 112 0 53 l 45 -68 b 65 4 45 -20 50 4 b 78 0 68 4 73 3 b 157 -248 101 -14 127 -96 b 236 0 187 -96 213 -14 b 248 4 240 3 245 4 b 271 -68 264 4 271 -20 l 315 -68 b 248 112 315 53 292 112 b 180 45 225 112 200 89 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',\n        },\n        accSagittal17CommaUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 -40 b 315 -118 248 -92 279 -118 b 405 62 374 -118 405 -59 l 360 62 b 324 -10 360 14 348 -10 b 302 -6 318 -10 311 -9 b 206 217 268 9 235 84 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\n        },\n        accSagittal17CommaDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 206 -217 b 302 6 235 -84 268 -9 b 324 10 311 9 318 10 b 360 -62 348 10 360 -14 l 405 -62 b 315 118 405 59 374 118 b 225 40 279 118 248 92 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\n        },\n        accSagittal55CommaUp: {\n            x_min: 0,\n            x_max: 219,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 248 l 0 -517 l 45 -517 l 45 58 l 315 -274 l 315 -112 l 23 248 z',\n        },\n        accSagittal55CommaDown: {\n            x_min: 0,\n            x_max: 219,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 23 -248 l 315 112 l 315 274 l 45 -58 l 45 517 l 0 517 l 0 -248 z',\n        },\n        accSagittal7v11CommaUp: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 248 l 135 248 b 0 68 45 248 0 187 z',\n        },\n        accSagittal7v11CommaDown: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 271 -248 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittal5v11SmallDiesisUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 73 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -40 b 360 -118 295 -92 325 -118 b 449 62 420 -118 449 -59 l 405 62 b 369 -10 405 14 393 -10 b 348 -6 363 -10 356 -9 b 251 217 312 9 279 84 l 248 248 l 135 248 b 0 73 45 248 0 189 z',\n        },\n        accSagittal5v11SmallDiesisDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -73 b 135 -248 0 -189 45 -248 l 248 -248 l 251 -217 b 348 6 279 -84 312 -9 b 369 10 356 9 363 10 b 405 -62 393 10 405 -14 l 449 -62 b 360 118 449 59 420 118 b 271 40 325 118 295 92 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp5v11SDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 242 37 203 -23 225 -3 b 315 -89 262 -23 285 -63 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\n        },\n        accSagittalFlat5v11SUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 242 -37 285 63 262 23 b 180 23 225 3 203 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\n        },\n        accSagittalSharp7v11CDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 89 -112 l 89 -517 l 135 -517 l 135 -95 b 206 37 163 -73 187 -30 b 271 -23 225 -3 248 -23 l 271 -517 l 315 -517 l 315 -23 l 383 -23 b 449 -203 428 -23 449 -84 l 495 -203 b 405 68 495 -23 465 68 l 292 68 b 203 248 258 68 228 127 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 l 0 68 b 89 -112 0 -52 30 -112 z',\n        },\n        accSagittalFlat7v11CUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 112 b 0 -68 30 112 0 52 l 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 b 292 -68 228 -127 258 -68 l 405 -68 b 495 203 465 -68 495 23 l 449 203 b 383 23 449 84 428 23 l 315 23 l 315 517 l 271 517 l 271 23 b 206 -37 248 23 225 3 b 135 95 187 30 163 73 l 135 517 l 89 517 z',\n        },\n        accSagittalSharp55CDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 -112 z',\n        },\n        accSagittalFlat55CUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 z',\n        },\n        accSagittalSharp17CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -89 292 13 321 -55 l 360 -517 l 405 -517 l 405 -112 l 428 -112 b 540 68 504 -112 540 -53 l 495 68 b 445 -4 495 20 480 -4 b 292 248 343 -4 307 171 l 180 248 b 0 68 60 248 0 187 l 0 -248 z',\n        },\n        accSagittalFlat17CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 248 l 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 445 4 307 -171 343 4 b 495 -68 480 4 495 -20 l 540 -68 b 428 112 540 53 504 112 l 405 112 l 405 517 l 360 517 l 360 89 b 271 -112 321 55 292 -13 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 z',\n        },\n        accSagittalSharp7v11kDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -32 l 405 138 l 405 13 l 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 68 z',\n        },\n        accSagittalFlat7v11kUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 l 405 -13 l 405 -138 l 0 32 z',\n        },\n        accSagittalSharp7v11kUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 135 -112 l 135 -517 l 180 -517 l 180 -105 b 271 -23 217 -94 248 -65 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 l 0 68 b 135 -112 0 -53 45 -112 z',\n        },\n        accSagittalFlat7v11kDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 135 112 b 0 -68 45 112 0 53 l 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 23 b 180 105 248 65 217 94 l 180 517 l 135 517 z',\n        },\n        accSagittalSharp17CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalFlat17CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalSharp55CUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -517 l 45 78 l 135 10 l 135 -517 l 180 -517 l 180 -23 l 271 -92 l 271 -517 l 315 -517 l 315 -127 l 495 -264 l 495 -112 l 23 248 l 0 248 l 0 -517 z',\n        },\n        accSagittalFlat55CDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 517 l 0 -248 l 23 -248 l 495 112 l 495 264 l 315 127 l 315 517 l 271 517 l 271 92 l 180 23 l 180 517 l 135 517 l 135 -10 l 45 -78 l 45 517 z',\n        },\n        accSagittalSharp7v11CUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 86 45 6 89 58 l 180 -517 l 225 -517 l 225 98 b 315 109 252 104 282 108 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 248 l 360 248 b 0 68 121 248 0 189 z',\n        },\n        accSagittalFlat7v11CDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 360 -248 0 -189 121 -248 l 495 -248 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -109 b 225 -98 282 -108 252 -104 l 225 517 l 180 517 l 180 -86 b 45 68 89 -58 45 -6 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp5v11SUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 -23 b 449 -105 383 -65 415 -94 l 449 -517 l 495 -517 l 495 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 z',\n        },\n        accSagittalFlat5v11SDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 l 495 517 l 449 517 l 449 105 b 360 23 415 94 383 65 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\n        },\n        accSagittalDoubleSharp5v11SDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 341 -60 b 449 -112 370 -95 405 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalDoubleFlat5v11SUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 341 60 405 112 370 95 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalDoubleSharp7v11CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 112 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -503 l 275 0 l 278 4 b 337 -23 295 -13 315 -23 l 405 -23 b 495 -203 465 -23 495 -84 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 127 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 112 -112 0 -52 36 -112 z',\n        },\n        accSagittalDoubleFlat7v11CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 112 112 b 0 -68 36 112 0 52 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -127 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 84 465 23 l 337 23 b 278 -4 315 23 295 13 l 275 0 l 449 503 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 z',\n        },\n        accSagittalDoubleSharp55CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 428 248 l 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 z',\n        },\n        accSagittalDoubleFlat55CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 l 428 -248 z',\n        },\n        accSagittalDoubleSharp17CDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 387 -62 b 495 -112 416 -95 452 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 l 0 -248 z',\n        },\n        accSagittalDoubleFlat17CUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 248 l 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 b 387 62 452 112 416 95 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 z',\n        },\n        accSagittalDoubleSharp7v11kDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -30 l 366 96 l 399 0 l 392 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 276 -517 l 428 -82 l 579 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 z m 416 115 l 442 124 l 428 82 z',\n        },\n        accSagittalDoubleFlat7v11kUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 517 -248 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 579 517 l 428 82 l 276 517 l 225 503 l 353 135 l 0 255 l 0 157 l 392 23 l 399 0 l 366 -96 l 0 30 l 0 -68 z m 428 -82 l 442 -124 l 416 -115 z',\n        },\n        accSagittal23CommaUp: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -4 b 68 -23 53 -17 60 -23 l 180 -23 b 225 -203 210 -23 225 -82 l 271 -203 b 206 68 271 -23 248 68 l 89 68 b 23 248 71 68 48 127 l 0 248 z',\n        },\n        accSagittal23CommaDown: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 b 89 -68 48 -127 71 -68 l 206 -68 b 271 203 248 -68 271 23 l 225 203 b 180 23 225 82 210 23 l 68 23 b 45 4 60 23 53 17 l 45 517 l 0 517 z',\n        },\n        accSagittal5v19CommaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 248 l 203 248 b 86 112 151 157 112 112 b 45 157 59 112 45 127 l 0 157 b 76 23 0 72 26 27 l 0 -112 z',\n        },\n        accSagittal5v19CommaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 76 -23 b 0 -157 26 -27 0 -72 l 45 -157 b 86 -112 45 -127 59 -112 b 203 -248 112 -112 151 -157 l 225 -248 l 225 517 l 180 517 l 180 -33 l 0 284 z',\n        },\n        accSagittal5v23SmallDiesisUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 -4 b 248 -23 233 -17 240 -23 l 360 -23 b 405 -203 390 -23 405 -82 l 449 -203 b 386 68 449 -23 428 68 l 271 68 b 203 248 251 68 228 127 l 0 -112 z',\n        },\n        accSagittal5v23SmallDiesisDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 203 -248 b 271 -68 228 -127 251 -68 l 386 -68 b 449 203 428 -68 449 23 l 405 203 b 360 23 405 82 390 23 l 248 23 b 225 4 240 23 233 17 l 225 517 l 180 517 l 180 -33 l 0 284 z',\n        },\n        accSagittalSharp5v23SDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 6 b 89 -23 59 -13 73 -23 l 180 -23 l 180 -517 l 225 -517 l 225 -23 l 292 -23 b 360 -203 337 -23 360 -84 l 405 -203 b 315 68 405 -23 374 68 l 112 68 b 23 248 78 68 48 127 l 0 248 z',\n        },\n        accSagittalFlat5v23SUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 b 112 -68 48 -127 78 -68 l 315 -68 b 405 203 374 -68 405 23 l 360 203 b 292 23 360 84 337 23 l 225 23 l 225 517 l 180 517 l 180 23 l 89 23 b 45 -6 73 23 59 13 l 45 517 l 0 517 z',\n        },\n        accSagittalSharp5v19CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 89 -112 0 -52 30 -112 l 89 -517 l 135 -517 l 135 -95 b 225 112 173 -65 203 4 l 271 112 l 271 -517 l 315 -517 l 315 107 b 405 -68 374 89 405 30 l 405 -248 l 449 -248 l 449 68 b 315 248 449 189 405 248 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 23 z',\n        },\n        accSagittalFlat5v19CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 81 3 45 -23 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 315 -248 b 449 -68 405 -248 449 -189 l 449 248 l 405 248 l 405 68 b 315 -107 405 -30 374 -89 l 315 517 l 271 517 l 271 -112 l 225 -112 b 135 95 203 -4 173 65 l 135 517 l 89 517 l 89 112 b 0 -68 30 112 0 52 z',\n        },\n        accSagittalSharp23CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 135 -82 l 135 -517 l 180 -517 l 180 -17 l 239 68 b 315 -23 261 7 287 -23 l 315 -517 l 360 -517 l 360 -23 l 428 -23 b 495 -203 472 -23 495 -84 l 540 -203 b 449 68 540 -23 510 68 l 337 68 b 248 248 302 68 271 127 l 0 -112 l 0 -276 z',\n        },\n        accSagittalFlat23CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 276 l 0 112 l 248 -248 b 337 -68 271 -127 302 -68 l 449 -68 b 540 203 510 -68 540 23 l 495 203 b 428 23 495 84 472 23 l 360 23 l 360 517 l 315 517 l 315 23 b 239 -68 287 23 261 -7 l 180 17 l 180 517 l 135 517 l 135 82 z',\n        },\n        accSagittalSharp23CUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 14 b 112 -23 63 -10 86 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 360 -23 b 449 -203 420 -23 449 -84 l 495 -203 b 383 68 495 -23 458 68 l 135 68 b 23 248 85 68 48 127 l 0 248 z',\n        },\n        accSagittalFlat23CDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 b 135 -68 48 -127 85 -68 l 383 -68 b 495 203 458 -68 495 23 l 449 203 b 360 23 449 84 420 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 -14 86 23 63 10 l 45 517 l 0 517 z',\n        },\n        accSagittalSharp5v19CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',\n        },\n        accSagittalFlat5v19CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 l 0 112 z',\n        },\n        accSagittalSharp5v23SUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 14 b 383 -23 334 -10 357 -23 l 405 -23 l 405 -517 l 449 -517 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',\n        },\n        accSagittalFlat5v23SDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 449 517 l 405 517 l 405 23 l 383 23 b 315 -14 357 23 334 10 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 z',\n        },\n        accSagittalDoubleSharp5v23SDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 52 -517 l 203 -81 l 354 -517 l 405 -503 l 239 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 225 68 b 112 248 176 68 138 127 l 89 248 l 89 112 b 170 -14 109 45 135 0 l 0 -501 z',\n        },\n        accSagittalDoubleFlat5v23SUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 501 l 170 14 b 89 -112 135 0 109 -45 l 89 -248 l 112 -248 b 225 -68 138 -127 176 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 239 23 l 405 503 l 354 517 l 203 81 l 52 517 z',\n        },\n        accSagittalDoubleSharp5v19CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 112 -112 0 -52 36 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -501 l 275 0 l 315 112 b 495 -68 435 112 495 53 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 z',\n        },\n        accSagittalDoubleFlat5v19CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 315 -112 495 -53 435 -112 l 275 0 l 449 501 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 b 0 -68 36 112 0 52 z',\n        },\n        accSagittalDoubleSharp23CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 323 4 b 383 -23 340 -13 360 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',\n        },\n        accSagittalDoubleFlat23CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 383 23 b 323 -4 360 23 340 13 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 z',\n        },\n        accSagittal19SchismaUp: {\n            x_min: 0,\n            x_max: 125,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 l 0 68 b 68 -112 0 -52 23 -112 z',\n        },\n        accSagittal19SchismaDown: {\n            x_min: 0,\n            x_max: 125,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 68 112 b 0 -68 23 112 0 52 l 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 180 -248 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',\n        },\n        accSagittal17KleismaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\n        },\n        accSagittal17KleismaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\n        },\n        accSagittal143CommaUp: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 105 68 b 45 157 65 68 45 98 l 0 157 b 23 20 0 95 7 50 b 0 -203 7 -23 0 -98 z',\n        },\n        accSagittal143CommaDown: {\n            x_min: 0,\n            x_max: 156,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 23 -20 0 98 7 23 b 0 -157 7 -50 0 -95 l 45 -157 b 105 -68 45 -98 65 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\n        },\n        accSagittal11v49CommaUp: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -292 b 89 -157 45 -203 60 -157 l 203 -157 b 225 -143 210 -157 217 -153 l 225 -517 l 271 -517 l 271 248 l 248 248 b 180 157 233 187 210 157 l 68 157 b 0 -68 23 157 0 82 l 45 -68 b 89 68 45 23 60 68 l 203 68 b 225 84 209 68 216 72 l 225 -36 b 180 -68 213 -58 199 -68 l 68 -68 b 0 -292 23 -68 0 -143 z',\n        },\n        accSagittal11v49CommaDown: {\n            x_min: 0,\n            x_max: 188,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 292 b 68 68 0 143 23 68 l 180 68 b 225 36 199 68 213 58 l 225 -84 b 203 -68 216 -72 209 -68 l 89 -68 b 45 68 60 -68 45 -23 l 0 68 b 68 -157 0 -82 23 -157 l 180 -157 b 248 -248 210 -157 233 -187 l 271 -248 l 271 517 l 225 517 l 225 143 b 203 157 217 153 210 157 l 89 157 b 45 292 60 157 45 203 z',\n        },\n        accSagittal19CommaUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -4 b 203 -23 187 -17 196 -23 l 315 -23 b 360 -203 346 -23 360 -82 l 405 -203 b 341 68 405 -23 383 68 l 225 68 b 157 248 206 68 183 127 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',\n        },\n        accSagittal19CommaDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 b 225 -68 183 -127 206 -68 l 341 -68 b 405 203 383 -68 405 23 l 360 203 b 315 23 360 82 346 23 l 203 23 b 180 4 196 23 187 17 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',\n        },\n        accSagittal7v19CommaUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 112 l 225 112 b 315 -68 285 112 315 53 l 315 -248 l 360 -248 l 360 68 b 271 248 360 187 330 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',\n        },\n        accSagittal7v19CommaDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 271 -248 b 360 -68 330 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -112 315 -53 285 -112 l 180 -112 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',\n        },\n        accSagittal49SmallDiesisUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\n        },\n        accSagittal49SmallDiesisDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\n        },\n        accSagittal23SmallDiesisUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 58 l 495 -274 l 495 -112 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\n        },\n        accSagittal23SmallDiesisDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 495 112 l 495 274 l 225 -58 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\n        },\n        accSagittal5v13MediumDiesisUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 b 128 180 253 203 184 180 b 45 248 73 180 45 203 l 0 248 b 52 95 0 170 17 120 l 0 68 l 0 -33 l 315 135 l 315 10 l 0 -157 z',\n        },\n        accSagittal5v13MediumDiesisDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 157 l 315 -10 l 315 -135 l 0 33 l 0 -68 l 52 -95 b 0 -248 17 -120 0 -170 l 45 -248 b 128 -180 45 -203 73 -180 b 337 -248 184 -180 253 -203 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 z',\n        },\n        accSagittal11v19MediumDiesisUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -4 b 292 -23 278 -17 285 -23 l 405 -23 b 449 -203 435 -23 449 -82 l 495 -203 b 431 68 495 -23 472 68 l 315 68 b 248 248 295 68 271 127 l 135 248 b 0 68 45 248 0 187 l 0 -248 z',\n        },\n        accSagittal11v19MediumDiesisDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 248 l 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 b 315 -68 271 -127 295 -68 l 431 -68 b 495 203 472 -68 495 23 l 449 203 b 405 23 449 82 435 23 l 292 23 b 271 4 285 23 278 17 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 z',\n        },\n        accSagittal49MediumDiesisUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -68 l 0 -248 l 45 -248 l 315 -94 l 315 -517 l 360 -517 l 360 248 l 225 248 b 0 -68 75 248 0 143 z m 45 -68 b 225 112 45 53 105 112 l 315 112 l 315 10 l 45 -145 z',\n        },\n        accSagittal49MediumDiesisDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 68 b 225 -248 0 -143 75 -248 l 360 -248 l 360 517 l 315 517 l 315 94 l 45 248 l 0 248 z m 45 145 l 315 -10 l 315 -112 l 225 -112 b 45 68 105 -112 45 -53 z',\n        },\n        accSagittal5v49MediumDiesisUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -89 l 0 -248 l 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 b 89 89 170 143 118 89 b 45 157 60 89 45 112 l 0 157 b 68 3 0 68 23 16 z',\n        },\n        accSagittal5v49MediumDiesisDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 68 -3 b 0 -157 23 -16 0 -68 l 45 -157 b 89 -89 45 -112 60 -89 b 248 -248 118 -89 170 -143 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 l 0 248 l 0 89 z',\n        },\n        accSagittal49LargeDiesisUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -89 l 360 -248 l 405 -248 l 405 -68 b 180 248 405 143 330 248 l 0 248 z m 45 12 l 45 112 l 180 112 b 360 -68 300 112 360 53 l 360 -147 z',\n        },\n        accSagittal49LargeDiesisDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 180 -248 b 405 68 330 -248 405 -143 l 405 248 l 360 248 l 45 89 l 45 517 l 0 517 z m 360 147 l 360 68 b 180 -112 360 -53 300 -112 l 45 -112 l 45 -12 z',\n        },\n        accSagittal11v19LargeDiesisUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -86 l 449 -256 l 449 -157 l 45 13 l 45 138 l 449 -30 l 449 68 l 23 248 l 0 248 z',\n        },\n        accSagittal11v19LargeDiesisDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 l 449 -68 l 449 30 l 45 -138 l 45 -13 l 449 157 l 449 256 l 45 86 l 45 517 l 0 517 z',\n        },\n        accSagittal5v13LargeDiesisUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 b 89 -112 0 -52 30 -112 b 180 -35 125 -112 157 -86 l 180 -517 l 225 -517 l 225 -86 l 631 -256 l 631 -157 l 225 13 l 225 138 l 631 -30 l 631 68 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 z',\n        },\n        accSagittal5v13LargeDiesisDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 631 -68 l 631 30 l 225 -138 l 225 -13 l 631 157 l 631 256 l 225 86 l 225 517 l 180 517 l 180 35 b 89 112 157 86 125 112 b 0 -68 30 112 0 52 z',\n        },\n        accSagittalSharp23SDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -203 l 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 b 315 6 287 -23 301 -13 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 68 312 127 282 68 l 194 68 b 89 157 125 68 89 98 l 45 157 b 60 59 45 118 50 85 b 0 -203 20 30 0 -56 z',\n        },\n        accSagittalFlat23SUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 60 -59 0 56 20 -30 b 45 -157 50 -85 45 -118 l 89 -157 b 194 -68 89 -98 125 -68 l 248 -68 b 337 -248 282 -68 312 -127 l 360 -248 l 360 517 l 315 517 l 315 -6 b 271 23 301 13 287 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\n        },\n        accSagittalSharp49SDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 135 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 b 315 -135 285 -157 300 -150 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 157 323 187 292 157 l 89 157 b 0 -68 30 157 0 82 l 45 -68 b 112 68 45 23 68 68 l 271 68 b 315 89 284 68 300 75 l 315 -32 b 248 -68 298 -56 275 -68 l 89 -68 b 0 -292 29 -68 0 -143 z',\n        },\n        accSagittalFlat49SUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 292 b 89 68 0 143 29 68 l 248 68 b 315 32 275 68 298 56 l 315 -89 b 271 -68 300 -75 284 -68 l 112 -68 b 45 68 68 -68 45 -23 l 0 68 b 89 -157 0 -82 30 -157 l 248 -157 b 337 -248 292 -157 323 -187 l 360 -248 l 360 517 l 315 517 l 315 135 b 271 157 300 150 285 157 l 180 157 l 180 517 l 135 517 l 135 157 l 112 157 b 45 292 68 157 45 203 z',\n        },\n        accSagittalSharp7v19CDown: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 89 -20 0 53 29 -6 z',\n        },\n        accSagittalFlat7v19CUp: {\n            x_min: 0,\n            x_max: 250,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 20 b 0 -157 29 6 0 -53 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 l 0 112 z',\n        },\n        accSagittalSharp19CDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 96 45 17 89 72 l 180 -517 l 225 -517 l 225 107 b 315 112 252 112 282 112 l 360 112 l 360 -517 l 405 -517 l 405 248 l 271 248 b 0 68 89 248 0 187 z',\n        },\n        accSagittalFlat19CUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 271 -248 0 -187 89 -248 l 405 -248 l 405 517 l 360 517 l 360 -112 l 315 -112 b 225 -107 282 -112 252 -112 l 225 517 l 180 517 l 180 -96 b 45 68 89 -72 45 -17 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp11v49CDown: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 112 -23 45 -82 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 271 112 215 -23 245 23 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 b 157 68 222 128 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\n        },\n        accSagittalFlat11v49CUp: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -128 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 b 180 23 245 -23 215 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 82 z',\n        },\n        accSagittalSharp143CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 259 76 210 -23 236 10 l 315 17 l 315 -517 l 360 -517 l 360 -30 l 585 -271 l 585 -112 l 248 248 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\n        },\n        accSagittalFlat143CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 l 585 112 l 585 271 l 360 30 l 360 517 l 315 517 l 315 -17 l 259 -76 b 180 23 236 -10 210 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\n        },\n        accSagittalSharp17kDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 b 145 171 305 196 210 171 b 45 248 78 171 45 196 l 0 248 b 79 101 0 170 26 121 l 0 68 l 0 -32 l 405 138 l 405 13 z',\n        },\n        accSagittalFlat17kUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 405 -13 l 405 -138 l 0 32 l 0 -68 l 79 -101 b 0 -248 26 -121 0 -170 l 45 -248 b 145 -171 45 -196 78 -171 b 428 -248 210 -171 305 -196 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 z',\n        },\n        accSagittalSharp19sDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -23 295 23 325 -23 l 360 -517 l 405 -517 l 405 -23 l 472 -23 b 540 -203 517 -23 540 -84 l 585 -203 b 495 68 585 -23 554 68 l 383 68 b 292 248 348 68 318 127 l 180 248 b 0 68 60 248 0 187 z',\n        },\n        accSagittalFlat19sUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 383 -68 318 -127 348 -68 l 495 -68 b 585 203 554 -68 585 23 l 540 203 b 472 23 540 84 517 23 l 405 23 l 405 517 l 360 517 l 360 23 b 271 -112 325 23 295 -23 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp19sUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 89 -96 l 89 -517 l 135 -517 l 135 -108 b 180 -112 148 -112 163 -112 b 225 -108 196 -112 210 -112 l 225 -517 l 271 -517 l 271 -94 b 360 -12 305 -78 337 -50 l 360 -517 l 405 -517 l 405 248 l 383 248 b 190 0 353 98 288 16 b 138 -3 171 0 153 -3 b 45 68 75 -3 45 20 l 0 68 b 89 -96 0 -17 30 -72 z',\n        },\n        accSagittalFlat19sDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 96 b 0 -68 30 72 0 17 l 45 -68 b 138 3 45 -20 75 3 b 190 0 153 3 171 0 b 383 -248 288 -16 353 -98 l 405 -248 l 405 517 l 360 517 l 360 12 b 271 94 337 50 305 78 l 271 517 l 225 517 l 225 108 b 180 112 210 112 196 112 b 135 108 163 112 148 112 l 135 517 l 89 517 z',\n        },\n        accSagittalSharp17kUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalFlat17kDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalSharp143CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',\n        },\n        accSagittalFlat143CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalSharp11v49CUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -68 b 135 68 45 23 76 68 l 337 68 b 405 95 363 68 386 76 l 405 -27 b 315 -68 386 -55 356 -68 l 112 -68 b 0 -292 37 -68 0 -143 l 45 -292 b 135 -157 45 -203 75 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 l 271 -517 l 315 -517 l 315 -157 l 337 -157 b 405 -130 360 -157 383 -148 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 37 157 0 82 z',\n        },\n        accSagittalFlat11v49CDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 68 b 112 -157 0 -82 37 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 517 l 405 517 l 405 130 b 337 157 383 148 360 157 l 315 157 l 315 517 l 271 517 l 271 157 l 180 157 l 180 517 l 135 517 l 135 157 b 45 292 75 157 45 203 l 0 292 b 112 68 0 143 37 68 l 315 68 b 405 27 356 68 386 55 l 405 -95 b 337 -68 386 -76 363 -68 l 135 -68 b 45 68 76 -68 45 -23 z',\n        },\n        accSagittalSharp19CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 14 b 337 -23 289 -10 311 -23 l 360 -23 l 360 -517 l 405 -517 l 405 -23 b 495 -203 465 -23 495 -82 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 128 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\n        },\n        accSagittalFlat19CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -128 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 82 465 23 l 405 517 l 360 517 l 360 23 l 337 23 b 271 -14 311 23 289 10 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\n        },\n        accSagittalSharp7v19CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 112 l 315 112 b 360 109 331 112 346 112 l 360 -517 l 405 -517 l 405 98 b 495 -68 465 73 495 19 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\n        },\n        accSagittalFlat7v19CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 405 -98 495 -19 465 -73 l 405 517 l 360 517 l 360 -109 b 315 -112 346 -112 331 -112 l 271 -112 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\n        },\n        accSagittalSharp49SUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalFlat49SDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalSharp23SUp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 71 l 405 -14 l 405 -517 l 449 -517 l 449 -56 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalFlat23SDown: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 449 56 l 449 517 l 405 517 l 405 14 l 315 -71 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalSharp5v13MUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 495 141 l 495 14 l 0 -157 l 0 -256 l 225 -180 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 l 0 248 b 95 99 0 170 30 120 l 0 68 l 0 -30 z',\n        },\n        accSagittalFlat5v13MDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 30 l 0 -68 l 95 -99 b 0 -248 30 -120 0 -170 l 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 180 l 0 256 l 0 157 l 495 -14 l 495 -141 z',\n        },\n        accSagittalSharp11v19MUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 14 b 428 -23 379 -10 402 -23 l 449 -23 l 449 -517 l 495 -517 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',\n        },\n        accSagittalFlat11v19MDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 495 517 l 449 517 l 449 23 l 428 23 b 360 -14 402 23 379 10 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\n        },\n        accSagittalSharp49MUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 225 -180 l 225 -517 l 271 -517 l 271 -166 l 360 -132 l 360 -517 l 405 -517 l 405 -117 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 360 248 b 0 -68 120 248 0 143 z m 45 -145 l 45 -68 b 360 112 45 53 150 112 l 495 112 l 495 14 z',\n        },\n        accSagittalFlat49MDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 68 b 360 -248 0 -143 120 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 117 l 405 517 l 360 517 l 360 132 l 271 166 l 271 517 l 225 517 l 225 180 l 45 248 l 0 248 z m 495 -14 l 495 -112 l 360 -112 b 45 68 150 -112 45 -53 l 45 145 z',\n        },\n        accSagittalSharp5v49MUp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 107 0 0 62 36 10 l 0 -112 z',\n        },\n        accSagittalFlat5v49MDown: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 112 l 107 0 b 0 -157 36 -10 0 -62 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 z',\n        },\n        accSagittalSharp49LUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -82 l 135 -112 l 135 -517 l 180 -517 l 180 -127 l 271 -157 l 271 -517 l 315 -517 l 315 -173 l 540 -248 l 585 -248 l 585 -68 b 180 248 585 143 449 248 l 0 248 z m 45 112 l 180 112 b 540 -68 420 112 540 53 l 540 -145 l 45 16 z',\n        },\n        accSagittalFlat49LDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 180 -248 b 585 68 449 -248 585 -143 l 585 248 l 540 248 l 315 173 l 315 517 l 271 517 l 271 157 l 180 127 l 180 517 l 135 517 l 135 112 l 45 82 l 45 517 l 0 517 z m 45 -16 l 540 145 l 540 68 b 180 -112 540 -53 420 -112 l 45 -112 z',\n        },\n        accSagittalSharp11v19LUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -517 l 45 -517 l 45 -81 l 135 -108 l 135 -517 l 180 -517 l 180 -121 l 271 -148 l 271 -517 l 315 -517 l 315 -161 l 631 -255 l 631 -157 l 45 16 l 45 144 l 631 -30 l 631 68 l 23 248 l 0 248 z',\n        },\n        accSagittalFlat11v19LDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -248 l 23 -248 l 631 -68 l 631 30 l 45 -144 l 45 -16 l 631 157 l 631 255 l 315 161 l 315 517 l 271 517 l 271 148 l 180 121 l 180 517 l 135 517 l 135 108 l 45 81 l 45 517 l 0 517 z',\n        },\n        accSagittalSharp5v13LUp: {\n            x_min: 0,\n            x_max: 500,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 -85 l 360 -120 l 360 -517 l 405 -517 l 405 -135 l 720 -256 l 720 -157 l 271 14 l 271 141 l 720 -30 l 720 68 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\n        },\n        accSagittalFlat5v13LDown: {\n            x_min: 0,\n            x_max: 500,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 720 -68 l 720 30 l 271 -141 l 271 -14 l 720 157 l 720 256 l 405 135 l 405 517 l 360 517 l 360 120 l 271 85 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\n        },\n        accSagittalDoubleSharp23SDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -203 l 45 -203 b 135 -23 45 -82 76 -23 l 301 -23 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 370 -14 b 449 112 423 10 449 53 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',\n        },\n        accSagittalDoubleFlat23SUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 -112 b 370 14 449 -53 423 -10 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 301 23 l 135 23 b 45 203 76 23 45 82 z',\n        },\n        accSagittalDoubleSharp49SDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 256 -157 l 135 -503 l 187 -517 l 337 -82 l 490 -517 l 540 -503 l 366 0 l 396 89 b 449 157 416 102 435 125 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 39 157 0 82 l 45 -68 b 135 68 45 23 76 68 l 287 68 l 311 0 l 288 -68 l 89 -68 b 0 -292 32 -68 0 -144 z',\n        },\n        accSagittalDoubleFlat49SUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 292 b 89 68 0 144 32 68 l 288 68 l 311 0 l 287 -68 l 135 -68 b 45 68 76 -68 45 -23 l 0 68 b 112 -157 0 -82 39 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 -157 b 396 -89 435 -125 416 -102 l 366 0 l 540 503 l 490 517 l 337 82 l 187 517 l 135 503 l 256 157 l 112 157 b 45 292 68 157 45 203 z',\n        },\n        accSagittalDoubleSharp7v19CDown: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',\n        },\n        accSagittalDoubleFlat7v19CUp: {\n            x_min: 0,\n            x_max: 375,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 z',\n        },\n        accSagittalDoubleSharp19CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 315 109 45 36 135 95 l 354 0 l 180 -503 l 232 -517 l 383 -82 l 534 -517 l 585 -503 l 410 0 l 449 112 l 495 112 l 495 248 l 360 248 b 0 68 120 248 0 187 z m 372 112 l 393 112 l 383 82 z',\n        },\n        accSagittalDoubleFlat19CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 360 -248 0 -187 120 -248 l 495 -248 l 495 -112 l 449 -112 l 410 0 l 585 503 l 534 517 l 383 82 l 232 517 l 180 503 l 354 0 l 315 -109 b 45 68 135 -95 45 -36 l 45 248 l 0 248 z m 383 -82 l 393 -112 l 372 -112 z',\n        },\n        accSagittalDoubleSharp11v49CDown: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalDoubleFlat11v49CUp: {\n            x_min: 0,\n            x_max: 406,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalDoubleSharp143CDown: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 337 49 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\n        },\n        accSagittalDoubleFlat143CUp: {\n            x_min: 0,\n            x_max: 469,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 337 -49 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\n        },\n        accSagittalDoubleSharp17kDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 248 b 95 101 0 170 30 121 l 0 68 l 0 -30 l 364 96 l 399 0 l 390 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 275 -517 l 428 -82 l 577 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 z m 416 115 l 442 124 l 428 82 z',\n        },\n        accSagittalDoubleFlat17kUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 577 517 l 428 82 l 275 517 l 225 503 l 353 135 l 0 255 l 0 157 l 390 23 l 399 0 l 364 -96 l 0 30 l 0 -68 l 95 -101 b 0 -248 30 -121 0 -170 z m 428 -82 l 442 -124 l 416 -115 z',\n        },\n        accSagittalDoubleSharp19sDown: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 367 4 b 428 -23 386 -13 405 -23 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',\n        },\n        accSagittalDoubleFlat19sUp: {\n            x_min: 0,\n            x_max: 438,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 428 23 b 367 -4 405 23 386 13 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 l 0 248 z',\n        },\n        accSagittalShaftUp: {\n            x_min: 0,\n            x_max: 31,\n            y_min: -359,\n            y_max: 172,\n            ha: 531,\n            o: 'm 0 112 l 0 -517 l 45 -517 l 45 112 l 23 248 z',\n        },\n        accSagittalShaftDown: {\n            x_min: 0,\n            x_max: 31,\n            y_min: -172,\n            y_max: 359,\n            ha: 531,\n            o: 'm 23 -248 l 45 -112 l 45 517 l 0 517 l 0 -112 z',\n        },\n        accSagittalAcute: {\n            x_min: 0,\n            x_max: 125,\n            y_min: -62,\n            y_max: 125,\n            ha: 187,\n            o: 'm 0 0 l 0 -89 l 180 89 l 180 180 z',\n        },\n        accSagittalGrave: {\n            x_min: 0,\n            x_max: 125,\n            y_min: -125,\n            y_max: 62,\n            ha: 187,\n            o: 'm 180 -180 l 180 -89 l 0 89 l 0 0 z',\n        },\n        accSagittal1MinaUp: {\n            x_min: -7,\n            x_max: 124,\n            y_min: 16,\n            y_max: 106.31676725154982,\n            ha: 90.31676725154982,\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\n        },\n        accSagittal1MinaDown: {\n            x_min: -7,\n            x_max: 124,\n            y_min: -106.31676725154983,\n            y_max: -16,\n            ha: 90.31676725154983,\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\n        },\n        accSagittal2MinasUp: {\n            x_min: -7,\n            x_max: 218,\n            y_min: 16,\n            y_max: 106.31676725154982,\n            ha: 90.31676725154982,\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\n        },\n        accSagittal2MinasDown: {\n            x_min: -7,\n            x_max: 218,\n            y_min: -106.31676725154983,\n            y_max: -16,\n            ha: 90.31676725154983,\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\n        },\n        accSagittal1TinaUp: {\n            x_min: 0,\n            x_max: 93,\n            y_min: 16,\n            y_max: 107,\n            ha: 91,\n            o: 'm 134 154 l 91 154 b 81 76 91 101 91 86 b 0 68 73 69 48 68 l 0 23 b 134 154 122 23 134 36 z',\n        },\n        accSagittal1TinaDown: {\n            x_min: 0,\n            x_max: 93,\n            y_min: -107,\n            y_max: -16,\n            ha: 91,\n            o: 'm 134 -154 b 0 -23 134 -36 122 -23 l 0 -68 b 81 -76 48 -68 73 -69 b 91 -154 91 -86 91 -101 z',\n        },\n        accSagittal2TinasUp: {\n            x_min: 0,\n            x_max: 94,\n            y_min: 16,\n            y_max: 107,\n            ha: 91,\n            o: 'm 135 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\n        },\n        accSagittal2TinasDown: {\n            x_min: 0,\n            x_max: 94,\n            y_min: -107,\n            y_max: -16,\n            ha: 91,\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 z',\n        },\n        accSagittal3TinasUp: {\n            x_min: -7,\n            x_max: 124,\n            y_min: 16,\n            y_max: 106.31676725154982,\n            ha: 90.31676725154982,\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\n        },\n        accSagittal3TinasDown: {\n            x_min: -7,\n            x_max: 124,\n            y_min: -106.31676725154983,\n            y_max: -16,\n            ha: 90.31676725154983,\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\n        },\n        accSagittal4TinasUp: {\n            x_min: 0,\n            x_max: 187,\n            y_min: 16,\n            y_max: 106.69999999999997,\n            ha: 90.69999999999997,\n            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 225 150 269 112 253 135 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',\n        },\n        accSagittal4TinasDown: {\n            x_min: 0,\n            x_max: 187,\n            y_min: -106.69999999999999,\n            y_max: -16,\n            ha: 90.69999999999999,\n            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 269 -23 253 -135 269 -112 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',\n        },\n        accSagittal5TinasUp: {\n            x_min: 0,\n            x_max: 218,\n            y_min: 16,\n            y_max: 107,\n            ha: 91,\n            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 269 150 314 112 298 135 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\n        },\n        accSagittal5TinasDown: {\n            x_min: 0,\n            x_max: 218,\n            y_min: -107,\n            y_max: -16,\n            ha: 91,\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',\n        },\n        accSagittal6TinasUp: {\n            x_min: -7,\n            x_max: 218,\n            y_min: 16,\n            y_max: 106.31676725154982,\n            ha: 90.31676725154982,\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\n        },\n        accSagittal6TinasDown: {\n            x_min: -7,\n            x_max: 218,\n            y_min: -106.31676725154983,\n            y_max: -16,\n            ha: 90.31676725154983,\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\n        },\n        accSagittal7TinasUp: {\n            x_min: 0,\n            x_max: 281,\n            y_min: 16,\n            y_max: 106.69999999999997,\n            ha: 90.69999999999997,\n            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 298 65 269 23 291 55 b 343 107 314 86 331 107 b 361 23 354 107 363 86 l 405 23 b 360 150 405 112 389 135 b 294 130 343 158 311 150 b 264 92 281 115 272 104 b 225 150 258 127 245 140 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',\n        },\n        accSagittal7TinasDown: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -106.69999999999999,\n            y_max: -16,\n            ha: 90.69999999999999,\n            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 264 -92 245 -140 258 -127 b 294 -130 272 -104 281 -115 b 360 -150 311 -150 343 -158 b 405 -23 389 -135 405 -112 l 361 -23 b 343 -107 363 -86 354 -107 b 298 -65 331 -107 314 -86 b 269 -23 291 -55 269 -23 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',\n        },\n        accSagittal8TinasUp: {\n            x_min: 0,\n            x_max: 312,\n            y_min: 16,\n            y_max: 107,\n            ha: 91,\n            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\n        },\n        accSagittal8TinasDown: {\n            x_min: 0,\n            x_max: 312,\n            y_min: -107,\n            y_max: -16,\n            ha: 91,\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',\n        },\n        accSagittal9TinasUp: {\n            x_min: -7,\n            x_max: 312,\n            y_min: 16,\n            y_max: 106.31676725154982,\n            ha: 90.31676725154982,\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\n        },\n        accSagittal9TinasDown: {\n            x_min: -7,\n            x_max: 312,\n            y_min: -106.31676725154983,\n            y_max: -16,\n            ha: 90.31676725154983,\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\n        },\n        accSagittalFractionalTinaUp: {\n            x_min: -3,\n            x_max: 35,\n            y_min: 73,\n            y_max: 111,\n            ha: 38,\n            o: 'm -4 132 b 23 105 -4 118 9 105 b 50 132 37 105 50 118 b 23 160 50 147 37 160 b -4 132 9 160 -4 147 z',\n        },\n        accSagittalFractionalTinaDown: {\n            x_min: -3,\n            x_max: 35,\n            y_min: -111,\n            y_max: -73,\n            ha: 38,\n            o: 'm -4 -132 b 23 -160 -4 -147 9 -160 b 50 -132 37 -160 50 -147 b 23 -105 50 -118 37 -105 b -4 -132 9 -105 -4 -118 z',\n        },\n        accidentalNarrowReversedFlat: {\n            x_min: 0,\n            x_max: 164,\n            y_min: -194,\n            y_max: 421,\n            ha: 615,\n            o: 'm 236 -279 l 236 606 l 192 606 l 192 179 b 85 243 150 222 114 243 b 0 84 23 243 0 134 b 112 -158 0 3 37 -78 z m 192 112 l 192 -163 l 135 -98 b 82 40 101 -50 82 -3 b 138 144 82 73 96 144 b 192 112 153 144 170 132 z',\n        },\n        accidentalNarrowReversedFlatAndFlat: {\n            x_min: 0,\n            x_max: 414,\n            y_min: -194,\n            y_max: 421,\n            ha: 615,\n            o: 'm 281 606 l 281 -268 l 438 -158 b 596 84 547 -82 596 3 b 475 243 596 154 556 243 b 325 179 435 243 384 222 l 325 606 z m 235 -279 l 235 606 l 190 606 l 190 179 b 85 243 148 222 114 243 b 12 158 52 243 27 215 b 0 84 3 134 0 108 b 112 -158 0 3 37 -78 z m 325 111 b 410 144 359 132 386 144 b 498 36 462 144 498 84 b 413 -107 498 -9 469 -58 l 325 -173 z m 192 112 l 192 -163 l 135 -98 b 81 40 99 -50 81 -3 b 91 94 81 59 84 76 b 137 144 102 127 118 144 b 192 112 153 144 170 132 z',\n        },\n        accidentalWilsonPlus: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -203,\n            y_max: 203,\n            ha: 406,\n            o: 'm 405 268 l 225 98 l 225 292 l 180 292 l 180 56 l 0 -112 l 0 -268 l 180 -98 l 180 -292 l 225 -292 l 225 -56 l 405 112 z',\n        },\n        accidentalWilsonMinus: {\n            x_min: 0,\n            x_max: 281,\n            y_min: -186,\n            y_max: 186,\n            ha: 372,\n            o: 'm 0 112 l 405 -268 l 405 -112 l 0 268 z',\n        },\n    },\n    fontFamily: 'Bravura',\n    resolution: 1000,\n    generatedOn: '2022-06-26T17:36:54.186Z',\n};\n", "export const BravuraMetrics = {\n    name: 'Bravura',\n    smufl: true,\n    stave: {\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    accidental: {\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    clef: {\n        default: {\n            point: 32,\n            width: 26,\n        },\n        small: {\n            point: 26,\n            width: 20,\n        },\n        annotations: {\n            '8va': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: -1.4,\n                        shiftX: 12,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: -0.2,\n                        shiftX: 8,\n                    },\n                },\n            },\n            '8vb': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: 6,\n                        shiftX: 10,\n                    },\n                    bass: {\n                        line: 3.5,\n                        shiftX: 1,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: 5.3,\n                        shiftX: 6,\n                    },\n                    bass: {\n                        line: 3.1,\n                        shiftX: 0.5,\n                    },\n                },\n            },\n        },\n        lineCount: {\n            '8': { point: 55, shiftY: 14 },\n            '7': { point: 47, shiftY: 8 },\n            '6': { point: 32, shiftY: 1 },\n            '5': { point: 30, shiftY: -6 },\n            '4': { point: 23, shiftY: -12 },\n        },\n    },\n    parenthesis: {\n        default: {\n            point: 39,\n            width: 7,\n        },\n        gracenote: {\n            point: (39 * 3) / 5,\n            width: 3,\n        },\n    },\n    pedalMarking: {\n        up: {\n            point: 40,\n        },\n        down: {\n            point: 34,\n        },\n    },\n    digits: {\n        shiftLine: -1,\n        point: 34,\n        tupletPoint: 22,\n        shiftY: -6,\n    },\n    articulation: {\n        articStaccatissimoAbove: {\n            padding: 2,\n        },\n        articStaccatissimoBelow: {\n            padding: 2,\n        },\n    },\n    tremolo: {\n        default: {\n            point: 25,\n            spacing: 5,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 11,\n            offsetXStemDown: 1,\n        },\n        grace: {\n            point: 18,\n            spacing: 4,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 7,\n            offsetXStemDown: 1,\n        },\n    },\n    staveRepetition: {\n        symbolText: {\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    stem: {\n        heightAdjustmentForFlag: -3,\n        noteHead: {\n            noteheadTriangleUpHalf: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpBlack: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpWhole: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXHalf: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXBlack: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXWhole: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadHalf: {\n                offsetYBaseStemUp: -2.55,\n                offsetYBaseStemDown: 2.65,\n            },\n            noteheadBlack: {\n                offsetYBaseStemUp: -2,\n                offsetYBaseStemDown: 2,\n            },\n            noteheadSquareWhite: {\n                offsetYBaseStemDown: -5,\n                offsetYBaseStemUp: 5,\n            },\n        },\n    },\n    glyphs: {\n        coda: {\n            point: 20,\n            shiftX: -7,\n            shiftY: 8,\n        },\n        segno: {\n            shiftX: -7,\n        },\n        flag: {\n            shiftX: -0.75,\n            staveTempo: {\n                shiftX: -1,\n            },\n        },\n        clef: {\n            gClef: {\n                default: { scale: 1.1, shiftY: 1 },\n                small: { shiftY: 1.5 },\n            },\n            fClef: {\n                default: { shiftY: -0.5 },\n            },\n        },\n        ornament: {\n            ornamentTurn: {\n                scale: 1.2,\n            },\n            ornamentTurnSlash: {\n                scale: 1.2,\n            },\n        },\n        stringNumber: {\n            verticalPadding: 8,\n            stemPadding: 2,\n            leftPadding: 5,\n            rightPadding: 6,\n        },\n        stroke: {\n            arrowheadBlackDown: {\n                straight: {\n                    shiftX: -4.5,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n            arrowheadBlackUp: {\n                straight: {\n                    shiftX: -0.85,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n        },\n        textNote: {\n            point: 34,\n            breathMarkTick: {\n                point: 36,\n                shiftY: 9,\n            },\n            breathMarkComma: {\n                point: 36,\n            },\n            segno: {\n                point: 30,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            coda: {\n                point: 20,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            ornamentTrill: {\n                shiftX: -8,\n                shiftY: 8,\n            },\n            ornamentTurn: {\n                point: 42,\n            },\n            ornamentTurnSlash: {\n                point: 42,\n            },\n            ornamentMordent: {\n                shiftX: -8,\n            },\n            ornamentShortTrill: {\n                shiftX: -8,\n            },\n        },\n        noteHead: {\n            minPadding: 2,\n            standard: {\n                restQuarterStemUp: {\n                    point: 35,\n                },\n                restQuarterStemDown: {\n                    point: 35,\n                },\n            },\n        },\n        chordSymbol: {\n            global: {\n                superscriptOffset: -400,\n                subscriptOffset: 300,\n                kerningOffset: -250,\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n                upperKerningText: ['A', 'L'],\n                spacing: 100,\n                superSubRatio: 0.66,\n            },\n            csymDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymHalfDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymAugmented: {\n                scale: 1,\n                leftSideBearing: 0,\n                advanceWidth: 530,\n                yOffset: 0,\n            },\n            csymParensLeftTall: {\n                scale: 0.8,\n                leftSideBearing: -20,\n                advanceWidth: 184,\n                yOffset: 250,\n            },\n            csymParensRightTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 189,\n                yOffset: 250,\n            },\n            csymBracketLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 328,\n                yOffset: 0,\n            },\n            csymBracketRightTall: {\n                scale: 0.8,\n                leftSideBearing: 1,\n                advanceWidth: 600,\n                yOffset: 0,\n            },\n            csymParensLeftVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 50,\n                advanceWidth: 121,\n                yOffset: 350,\n            },\n            csymParensRightVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 0,\n                advanceWidth: 111,\n                yOffset: 350,\n            },\n            csymDiagonalArrangementSlash: {\n                scale: 0.6,\n                leftSideBearing: -1,\n                advanceWidth: 990,\n                yOffset: 0,\n            },\n            csymMinor: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 482,\n                yOffset: 0,\n            },\n            csymMajorSeventh: {\n                scale: 0.9,\n                leftSideBearing: 200,\n                yOffset: 0,\n                advanceWidth: 600,\n            },\n            accidentalSharp: {\n                scale: 0.75,\n                leftSideBearing: 20,\n                advanceWidth: 250,\n                yOffset: -302,\n            },\n            accidentalFlat: {\n                scale: 0.9,\n                leftSideBearing: -20,\n                advanceWidth: 226,\n                yOffset: -184,\n            },\n        },\n        jazzOrnaments: {\n            brassScoop: {\n                scale: 1.0,\n                xOffset: -12,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 20,\n            },\n            brassDoitMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 22,\n            },\n            brassFallLipShort: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassLiftMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 5,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassFallRoughMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 28,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassBend: {\n                scale: 1.0,\n                xOffset: 2,\n                yOffset: -8,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassMuteClosed: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -8,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassMuteOpen: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -7,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassFlip: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: 0,\n                stemUpYOffset: 7,\n                reportedWidth: 10,\n            },\n            brassJazzTurn: {\n                scale: 1.0,\n                xOffset: 0,\n                yOffset: 0,\n                stemUpYOffset: 8,\n                reportedWidth: 31,\n            },\n            brassSmear: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: 0,\n                stemUpYOffset: 8,\n                reportedWidth: 5,\n            },\n        },\n        tuplet: {\n            noteHeadOffset: 20,\n            stemOffset: 10,\n            bottomLine: 4,\n            topModifierOffset: 15,\n        },\n    },\n};\n", "import { Font } from '../font.js';\nimport { BravuraFont } from './bravura_glyphs.js';\nimport { BravuraMetrics } from './bravura_metrics.js';\nexport function loadBravura() {\n    Font.load('Bravura', BravuraFont, BravuraMetrics);\n}\n", "export const CustomFont = {\n    resolution: 1000,\n    fontFamily: 'VexFlowCustom',\n    glyphs: {\n        noteheadSquareWhite: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 386,\n            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 ',\n        },\n        noteheadSquareBlack: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 386,\n            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 ',\n        },\n        accidentalBuyukMucennebFlat: {\n            x_min: -171.5,\n            x_max: 251.8125,\n            ha: 257,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\n        },\n        accidentalBakiyeFlat: {\n            x_min: -176.9375,\n            x_max: 251.8125,\n            ha: 257,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\n        },\n        accidentalKucukMucennebSharp: {\n            x_min: -1.359375,\n            x_max: 255.890625,\n            ha: 261,\n            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',\n        },\n        accidentalKoron: {\n            x_min: -20,\n            x_max: 320,\n            ha: 257,\n            o: 'm -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 ',\n        },\n        accidentalSori: {\n            x_min: -10.890625,\n            x_max: 299.4375,\n            ha: 294,\n            o: 'm 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 ',\n        },\n        vexAccidentalMicrotonal2: {\n            x_min: -1.359375,\n            x_max: 386.5625,\n            ha: 394,\n            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',\n        },\n        vexAccidentalMicrotonal3: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 360,\n            o: 'm -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z ',\n        },\n        vexAccidentalMicrotonal4: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 360,\n            o: 'm 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z ',\n        },\n        vexNoteHeadRectBlack: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 360,\n            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 ',\n        },\n        vexNoteHeadRectWhite: {\n            x_min: 0,\n            x_max: 430.75,\n            ha: 360,\n            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100',\n        },\n    },\n};\n", "export const CustomMetrics = {\n    name: 'VexFlowCustom',\n    smufl: false,\n    glyphs: {},\n};\n", "import { Font } from '../font.js';\nimport { CustomFont } from './custom_glyphs.js';\nimport { CustomMetrics } from './custom_metrics.js';\nexport function loadCustom() {\n    Font.load('Custom', CustomFont, CustomMetrics);\n}\n", "export const GonvilleFont = {\n    glyphs: {\n        bracketTop: {\n            x_min: 0,\n            x_max: 559.421875,\n            ha: 571,\n            o: 'm 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 ',\n        },\n        bracketBottom: {\n            x_min: 0,\n            x_max: 559.421875,\n            ha: 571,\n            o: 'm 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 ',\n        },\n        barlineTick: {\n            x_min: -80.3125,\n            x_max: 78.9375,\n            ha: 81,\n            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',\n        },\n        breathMarkTick: {\n            x_min: -80.3125,\n            x_max: 78.9375,\n            ha: 81,\n            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',\n        },\n        segno: {\n            x_min: -330.75,\n            x_max: 329.390625,\n            ha: 336,\n            o: 'm -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 ',\n        },\n        coda: {\n            x_min: -311.6875,\n            x_max: 310.328125,\n            ha: 317,\n            o: 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 ',\n        },\n        gClef: {\n            x_min: -1.359375,\n            x_max: 847.96875,\n            ha: 865,\n            o: 'm 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 ',\n        },\n        cClef: {\n            x_min: 0,\n            x_max: 873.828125,\n            ha: 892,\n            o: 'm 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 ',\n        },\n        fClef: {\n            x_min: -1.359375,\n            x_max: 899.703125,\n            ha: 918,\n            o: 'm 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 ',\n        },\n        unpitchedPercussionClef1: {\n            x_min: 0,\n            x_max: 464.140625,\n            ha: 474,\n            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',\n        },\n        '6stringTabClef': {\n            x_min: -1.359375,\n            x_max: 680.5625,\n            ha: 694,\n            o: 'm 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 ',\n        },\n        timeSig0: {\n            x_min: 0,\n            x_max: 514.5,\n            ha: 525,\n            o: 'm 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 ',\n        },\n        timeSig1: {\n            x_min: -1.359375,\n            x_max: 344.359375,\n            ha: 351,\n            o: 'm 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 ',\n        },\n        timeSig2: {\n            x_min: -1.359375,\n            x_max: 458.6875,\n            ha: 468,\n            o: 'm 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 ',\n        },\n        timeSig3: {\n            x_min: -1.359375,\n            x_max: 409.6875,\n            ha: 418,\n            o: 'm 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',\n        },\n        timeSig4: {\n            x_min: 0,\n            x_max: 468.21875,\n            ha: 478,\n            o: 'm 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 ',\n        },\n        timeSig5: {\n            x_min: 0,\n            x_max: 409.6875,\n            ha: 418,\n            o: 'm 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',\n        },\n        timeSig6: {\n            x_min: 0,\n            x_max: 475.03125,\n            ha: 485,\n            o: 'm 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',\n        },\n        timeSig7: {\n            x_min: 0,\n            x_max: 442.359375,\n            ha: 451,\n            o: 'm 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 ',\n        },\n        timeSig8: {\n            x_min: 0,\n            x_max: 488.640625,\n            ha: 499,\n            o: 'm 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 ',\n        },\n        timeSig9: {\n            x_min: 0,\n            x_max: 475.03125,\n            ha: 485,\n            o: 'm 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',\n        },\n        timeSigCommon: {\n            x_min: -1.359375,\n            x_max: 556.6875,\n            ha: 568,\n            o: 'm 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 ',\n        },\n        timeSigCutCommon: {\n            x_min: 0,\n            x_max: 556.6875,\n            ha: 568,\n            o: 'm 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 ',\n        },\n        timeSigPlus: {\n            x_min: 0,\n            x_max: 319.859375,\n            ha: 326,\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\n        },\n        timeSigPlusSmall: {\n            x_min: 0,\n            x_max: 319.859375,\n            ha: 326,\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\n        },\n        timeSigMinus: {\n            x_min: 0,\n            x_max: 318.5,\n            ha: 325,\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\n        },\n        timeSigParensRight: {\n            x_min: 25.859375,\n            x_max: 164.6875,\n            ha: 168,\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\n        },\n        timeSigParensRightSmall: {\n            x_min: 25.859375,\n            x_max: 164.6875,\n            ha: 168,\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\n        },\n        timeSigParensLeft: {\n            x_min: -166.0625,\n            x_max: -25.859375,\n            ha: 0,\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\n        },\n        timeSigParensLeftSmall: {\n            x_min: -166.0625,\n            x_max: -25.859375,\n            ha: 0,\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\n        },\n        noteheadDoubleWhole: {\n            x_min: 0,\n            x_max: 902.421875,\n            ha: 921,\n            o: 'm 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 ',\n        },\n        noteheadWhole: {\n            x_min: 0,\n            x_max: 619.3125,\n            ha: 632,\n            o: 'm 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 ',\n        },\n        noteheadHalf: {\n            x_min: 0,\n            x_max: 428.75,\n            ha: 438,\n            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 ',\n        },\n        noteheadBlack: {\n            x_min: 0,\n            x_max: 428.75,\n            ha: 438,\n            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 ',\n        },\n        noteheadXWhole: {\n            x_min: 0,\n            x_max: 598.890625,\n            ha: 611,\n            o: 'm 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 ',\n        },\n        noteheadXHalf: {\n            x_min: 0,\n            x_max: 406.96875,\n            ha: 415,\n            o: 'm 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 ',\n        },\n        noteheadXBlack: {\n            x_min: 0,\n            x_max: 406.96875,\n            ha: 415,\n            o: 'm 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 ',\n        },\n        noteheadCircleX: {\n            x_min: 0,\n            x_max: 484.5625,\n            ha: 494,\n            o: 'm 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 ',\n        },\n        noteheadTriangleUpWhole: {\n            x_min: 0,\n            x_max: 630.203125,\n            ha: 643,\n            o: 'm 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 ',\n        },\n        noteheadTriangleUpHalf: {\n            x_min: 0,\n            x_max: 438.28125,\n            ha: 447,\n            o: 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 ',\n        },\n        noteheadTriangleUpBlack: {\n            x_min: -1.359375,\n            x_max: 436.921875,\n            ha: 446,\n            o: 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 ',\n        },\n        noteheadDiamondWhole: {\n            x_min: 0,\n            x_max: 432.828125,\n            ha: 442,\n            o: 'm 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 ',\n        },\n        noteheadDiamondHalf: {\n            x_min: 0,\n            x_max: 438.28125,\n            ha: 447,\n            o: 'm 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 ',\n        },\n        noteheadDiamondBlack: {\n            x_min: 0,\n            x_max: 432.828125,\n            ha: 442,\n            o: 'm 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 ',\n        },\n        augmentationDot: {\n            x_min: 0,\n            x_max: 133.390625,\n            ha: 136,\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\n        },\n        tremolo1: {\n            x_min: -206.890625,\n            x_max: 428.75,\n            ha: 438,\n            o: 'm 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 ',\n        },\n        flag8thUp: {\n            x_min: -24.5,\n            x_max: 317.140625,\n            ha: 324,\n            o: 'm -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 ',\n        },\n        flag8thDown: {\n            x_min: -21.78125,\n            x_max: 367.5,\n            ha: 375,\n            o: 'm 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 ',\n        },\n        flag16thUp: {\n            x_min: -24.5,\n            x_max: 317.140625,\n            ha: 324,\n            o: 'm -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 ',\n        },\n        flag16thDown: {\n            x_min: -21.78125,\n            x_max: 362.0625,\n            ha: 369,\n            o: 'm 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 ',\n        },\n        flag32ndUp: {\n            x_min: -24.5,\n            x_max: 315.78125,\n            ha: 322,\n            o: 'm -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 ',\n        },\n        flag32ndDown: {\n            x_min: -21.78125,\n            x_max: 366.140625,\n            ha: 374,\n            o: 'm 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 ',\n        },\n        flag64thUp: {\n            x_min: -24.5,\n            x_max: 314.421875,\n            ha: 321,\n            o: 'm -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 ',\n        },\n        flag64thDown: {\n            x_min: -21.78125,\n            x_max: 367.5,\n            ha: 375,\n            o: 'm 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 ',\n        },\n        flag128thUp: {\n            x_min: -24.5,\n            x_max: 313.0625,\n            ha: 319,\n            o: 'm -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 ',\n        },\n        flag128thDown: {\n            x_min: -21.78125,\n            x_max: 367.5,\n            ha: 375,\n            o: 'm 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 ',\n        },\n        accidentalFlat: {\n            x_min: -21.78125,\n            x_max: 251.8125,\n            ha: 257,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\n        },\n        accidentalNatural: {\n            x_min: 0,\n            x_max: 239.5625,\n            ha: 244,\n            o: 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ',\n        },\n        accidentalSharp: {\n            x_min: 0,\n            x_max: 323.9375,\n            ha: 331,\n            o: 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ',\n        },\n        accidentalDoubleSharp: {\n            x_min: 0,\n            x_max: 367.5,\n            ha: 375,\n            o: 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 ',\n        },\n        accidentalDoubleFlat: {\n            x_min: -21.78125,\n            x_max: 483.1875,\n            ha: 493,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',\n        },\n        accidentalParensLeft: {\n            x_min: -166.0625,\n            x_max: -25.859375,\n            ha: 0,\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\n        },\n        accidentalParensRight: {\n            x_min: 25.859375,\n            x_max: 164.6875,\n            ha: 168,\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\n        },\n        accidentalQuarterToneFlatStein: {\n            x_min: 0,\n            x_max: 272.21875,\n            ha: 278,\n            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ',\n        },\n        accidentalThreeQuarterTonesFlatZimmermann: {\n            x_min: 0,\n            x_max: 607.0625,\n            ha: 619,\n            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 ',\n        },\n        accidentalQuarterToneSharpStein: {\n            x_min: 0,\n            x_max: 193.28125,\n            ha: 197,\n            o: 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 ',\n        },\n        accidentalThreeQuarterTonesSharpStein: {\n            x_min: -1.359375,\n            x_max: 455.96875,\n            ha: 465,\n            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',\n        },\n        accidentalBuyukMucennebFlat: {\n            x_min: -171.5,\n            x_max: 251.8125,\n            ha: 257,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\n        },\n        accidentalBakiyeFlat: {\n            x_min: -176.9375,\n            x_max: 251.8125,\n            ha: 257,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\n        },\n        accidentalKomaSharp: {\n            x_min: -1.359375,\n            x_max: 455.96875,\n            ha: 465,\n            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',\n        },\n        accidentalKucukMucennebSharp: {\n            x_min: -1.359375,\n            x_max: 255.890625,\n            ha: 261,\n            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',\n        },\n        articAccentAbove: {\n            x_min: -348.4375,\n            x_max: 24.5,\n            ha: 25,\n            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',\n        },\n        articAccentBelow: {\n            x_min: -348.4375,\n            x_max: 24.5,\n            ha: 25,\n            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',\n        },\n        articTenutoAbove: {\n            x_min: 0,\n            x_max: 318.5,\n            ha: 325,\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\n        },\n        articTenutoBelow: {\n            x_min: 0,\n            x_max: 318.5,\n            ha: 325,\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\n        },\n        articStaccatoAbove: {\n            x_min: 0,\n            x_max: 133.390625,\n            ha: 136,\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\n        },\n        articStaccatoBelow: {\n            x_min: 0,\n            x_max: 133.390625,\n            ha: 136,\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\n        },\n        articStaccatissimoAbove: {\n            x_min: -73.5,\n            x_max: 72.140625,\n            ha: 74,\n            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',\n        },\n        articStaccatissimoBelow: {\n            x_min: -73.5,\n            x_max: 72.140625,\n            ha: 74,\n            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',\n        },\n        articMarcatoAbove: {\n            x_min: -149.71875,\n            x_max: 148.359375,\n            ha: 151,\n            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',\n        },\n        articMarcatoBelow: {\n            x_min: -149.71875,\n            x_max: 148.359375,\n            ha: 151,\n            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',\n        },\n        fermataAbove: {\n            x_min: -442.359375,\n            x_max: 441,\n            ha: 450,\n            o: 'm -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 ',\n        },\n        fermataBelow: {\n            x_min: -441,\n            x_max: 439.640625,\n            ha: 449,\n            o: 'm -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\n        },\n        fermataLongAbove: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',\n        },\n        fermataLongBelow: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\n        },\n        fermataVeryLongAbove: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',\n        },\n        fermataVeryLongBelow: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\n        },\n        fermataShortAbove: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 ',\n        },\n        fermataShortBelow: {\n            x_min: -390.640625,\n            x_max: 389.28125,\n            ha: 397,\n            o: 'm -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\n        },\n        breathMarkComma: {\n            x_min: -1.359375,\n            x_max: 193.28125,\n            ha: 197,\n            o: 'm 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 ',\n        },\n        breathMarkUpbow: {\n            x_min: -170.140625,\n            x_max: 168.78125,\n            ha: 172,\n            o: 'm -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 ',\n        },\n        caesura: {\n            x_min: 0,\n            x_max: 622.03125,\n            ha: 635,\n            o: 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 ',\n        },\n        caesuraCurved: {\n            x_min: 0,\n            x_max: 503.609375,\n            ha: 514,\n            o: 'm 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 ',\n        },\n        restMaxima: {\n            x_min: 0,\n            x_max: 464.140625,\n            ha: 474,\n            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',\n        },\n        restDoubleWhole: {\n            x_min: 0,\n            x_max: 386.5625,\n            ha: 394,\n            o: 'm 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 ',\n        },\n        restWhole: {\n            x_min: 0,\n            x_max: 447.8125,\n            ha: 457,\n            o: 'm 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 ',\n        },\n        restWholeLegerLine: {\n            x_min: 0,\n            x_max: 737.71875,\n            ha: 753,\n            o: 'm 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 ',\n        },\n        restHalf: {\n            x_min: 0,\n            x_max: 447.8125,\n            ha: 457,\n            o: 'm 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 ',\n        },\n        restHalfLegerLine: {\n            x_min: 0,\n            x_max: 737.71875,\n            ha: 753,\n            o: 'm 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 ',\n        },\n        restQuarter: {\n            x_min: 0,\n            x_max: 300.8125,\n            ha: 307,\n            o: 'm 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 ',\n        },\n        rest8th: {\n            x_min: 0,\n            x_max: 349.8125,\n            ha: 357,\n            o: 'm 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 ',\n        },\n        rest16th: {\n            x_min: 0,\n            x_max: 450.53125,\n            ha: 460,\n            o: 'm 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 ',\n        },\n        rest32nd: {\n            x_min: 0,\n            x_max: 551.25,\n            ha: 563,\n            o: 'm 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 ',\n        },\n        rest64th: {\n            x_min: -1.359375,\n            x_max: 651.96875,\n            ha: 665,\n            o: 'm 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 ',\n        },\n        rest128th: {\n            x_min: -1.359375,\n            x_max: 752.703125,\n            ha: 768,\n            o: 'm 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 ',\n        },\n        dynamicPiano: {\n            x_min: -53.078125,\n            x_max: 513.140625,\n            ha: 485,\n            o: 'm 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 ',\n        },\n        dynamicMezzo: {\n            x_min: 46.28125,\n            x_max: 669.671875,\n            ha: 563,\n            o: 'm 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 ',\n        },\n        dynamicForte: {\n            x_min: -118.421875,\n            x_max: 597.53125,\n            ha: 381,\n            o: 'm 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 ',\n        },\n        dynamicRinforzando: {\n            x_min: 78.9375,\n            x_max: 485.921875,\n            ha: 417,\n            o: 'm 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 ',\n        },\n        dynamicSforzando: {\n            x_min: 70.78125,\n            x_max: 378.390625,\n            ha: 315,\n            o: 'm 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 ',\n        },\n        dynamicZ: {\n            x_min: 29.9375,\n            x_max: 420.578125,\n            ha: 371,\n            o: 'm 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 ',\n        },\n        ornamentTrill: {\n            x_min: -340.28125,\n            x_max: 338.921875,\n            ha: 346,\n            o: 'm -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 ',\n        },\n        ornamentTurn: {\n            x_min: -423.3125,\n            x_max: 421.9375,\n            ha: 431,\n            o: 'm -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 ',\n        },\n        ornamentTurnSlash: {\n            x_min: -423.3125,\n            x_max: 421.9375,\n            ha: 431,\n            o: 'm -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 ',\n        },\n        ornamentMordent: {\n            x_min: -402.890625,\n            x_max: 401.53125,\n            ha: 410,\n            o: 'm -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 ',\n        },\n        ornamentShortTrill: {\n            x_min: -402.890625,\n            x_max: 401.53125,\n            ha: 410,\n            o: 'm -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 ',\n        },\n        ornamentTremblement: {\n            x_min: -571.671875,\n            x_max: 570.3125,\n            ha: 582,\n            o: 'm -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 ',\n        },\n        ornamentPrecompAppoggTrill: {\n            x_min: -571.671875,\n            x_max: 570.3125,\n            ha: 582,\n            o: 'm -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 ',\n        },\n        ornamentPrecompSlideTrillDAnglebert: {\n            x_min: -590.71875,\n            x_max: 589.359375,\n            ha: 601,\n            o: 'm -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 ',\n        },\n        ornamentPrecompSlideTrillBach: {\n            x_min: -590.71875,\n            x_max: 589.359375,\n            ha: 601,\n            o: 'm 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 ',\n        },\n        ornamentPrecompTrillSuffixDandrieu: {\n            x_min: -590.71875,\n            x_max: 589.359375,\n            ha: 601,\n            o: 'm 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 ',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefix: {\n            x_min: -597.53125,\n            x_max: 596.171875,\n            ha: 608,\n            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\n            x_min: -597.53125,\n            x_max: 596.171875,\n            ha: 608,\n            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',\n        },\n        ornamentPrecompTrillLowerSuffix: {\n            x_min: -597.53125,\n            x_max: 596.171875,\n            ha: 608,\n            o: 'm -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 ',\n        },\n        stringsDownBow: {\n            x_min: -228.671875,\n            x_max: 227.3125,\n            ha: 232,\n            o: 'm -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 ',\n        },\n        stringsUpBow: {\n            x_min: -149.71875,\n            x_max: 148.359375,\n            ha: 151,\n            o: 'm -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 ',\n        },\n        stringsHarmonic: {\n            x_min: -122.5,\n            x_max: 121.140625,\n            ha: 124,\n            o: 'm -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 ',\n        },\n        pluckedSnapPizzicatoAbove: {\n            x_min: -149.71875,\n            x_max: 148.359375,\n            ha: 151,\n            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',\n        },\n        pluckedSnapPizzicatoBelow: {\n            x_min: -149.71875,\n            x_max: 148.359375,\n            ha: 151,\n            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',\n        },\n        pluckedLeftHandPizzicato: {\n            x_min: 0,\n            x_max: 319.859375,\n            ha: 326,\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\n        },\n        keyboardPedalPed: {\n            x_min: -1.359375,\n            x_max: 1064.390625,\n            ha: 1086,\n            o: 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 ',\n        },\n        keyboardPedalUp: {\n            x_min: -1.359375,\n            x_max: 592.078125,\n            ha: 604,\n            o: 'm 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 ',\n        },\n        pictChokeCymbal: {\n            x_min: 0,\n            x_max: 227.3125,\n            ha: 232,\n            o: 'm 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 ',\n        },\n        wiggleArpeggiatoUp: {\n            x_min: 58.53125,\n            x_max: 228.671875,\n            ha: 294,\n            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',\n        },\n        arrowheadBlackUp: {\n            x_min: -10.890625,\n            x_max: 299.4375,\n            ha: 294,\n            o: 'm 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 ',\n        },\n        arrowheadBlackDown: {\n            x_min: -10.890625,\n            x_max: 298.078125,\n            ha: 294,\n            o: 'm 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 ',\n        },\n        vexAccidentalMicrotonal1: {\n            x_min: -171.5,\n            x_max: 483.1875,\n            ha: 493,\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',\n        },\n        vexAccidentalMicrotonal2: {\n            x_min: -1.359375,\n            x_max: 386.5625,\n            ha: 394,\n            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',\n        },\n        vexWiggleArpeggioUp: {\n            x_min: 58.53125,\n            x_max: 228.671875,\n            ha: 294,\n            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',\n        },\n        vexNoteHeadMutedBreve: {\n            x_min: 0,\n            x_max: 370.21875,\n            ha: 378,\n            o: 'm 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 ',\n        },\n    },\n    cssFontWeight: 'normal',\n    ascender: 1903,\n    underlinePosition: -125,\n    cssFontStyle: 'normal',\n    boundingBox: {\n        yMin: -2065.375,\n        xMin: -695.53125,\n        yMax: 1901.578125,\n        xMax: 1159.671875,\n    },\n    resolution: 1000,\n    original_font_information: {\n        postscript_name: 'Gonville-18',\n        version_string: 'Version 0.1.8904 ',\n        vendor_url: '',\n        full_font_name: 'Gonville-18',\n        font_family_name: 'Gonville-18',\n        copyright: 'No copyright is claimed on this font file.',\n        description: '',\n        trademark: '',\n        designer: '',\n        designer_url: '',\n        unique_font_identifier: 'FontForge 2.0 : Gonville-18 : 17-3-2010',\n        license_url: '',\n        license_description: '',\n        manufacturer_name: '',\n        font_sub_family_name: '18',\n    },\n    descender: -2066,\n    fontFamily: 'Gonville-18',\n    lineHeight: 4093,\n    underlineThickness: 50,\n};\n", "export const GonvilleMetrics = {\n    name: 'Gonville',\n    smufl: false,\n    stave: {\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    accidental: {\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    clef: {\n        default: {\n            point: 40,\n            width: 26,\n        },\n        small: {\n            point: 32,\n            width: 20,\n        },\n        annotations: {\n            '8va': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 20,\n                    treble: {\n                        line: -1.2,\n                        shiftX: 11,\n                    },\n                },\n                small: {\n                    point: 18,\n                    treble: {\n                        line: -0.4,\n                        shiftX: 8,\n                    },\n                },\n            },\n            '8vb': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 20,\n                    treble: {\n                        line: 6.3,\n                        shiftX: 10,\n                    },\n                    bass: {\n                        line: 4,\n                        shiftX: 1,\n                    },\n                },\n                small: {\n                    point: 18,\n                    treble: {\n                        line: 5.8,\n                        shiftX: 6,\n                    },\n                    bass: {\n                        line: 3.5,\n                        shiftX: 0.5,\n                    },\n                },\n            },\n        },\n        lineCount: {\n            '8': { point: 55, shiftY: 14 },\n            '7': { point: 47, shiftY: 8 },\n            '6': { point: 40, shiftY: 1 },\n            '5': { point: 30, shiftY: -6 },\n            '4': { point: 23, shiftY: -12 },\n        },\n    },\n    parenthesis: {\n        default: {\n            point: 39,\n            width: 7,\n        },\n        gracenote: {\n            point: (39 * 3) / 5,\n            width: 3,\n        },\n    },\n    pedalMarking: {\n        up: {\n            point: 40,\n        },\n        down: {\n            point: 40,\n        },\n    },\n    digits: {\n        point: 40,\n        tupletPoint: 28,\n    },\n    tremolo: {\n        default: {\n            point: 25,\n            spacing: 4,\n            offsetYStemUp: -7,\n            offsetYStemDown: 7,\n            offsetXStemUp: 9,\n            offsetXStemDown: -0.5,\n        },\n        grace: {\n            point: 15,\n            spacing: 4,\n            offsetYStemUp: -7,\n            offsetYStemDown: 7,\n            offsetXStemUp: 6.5,\n            offsetXStemDown: -0.5,\n        },\n    },\n    staveRepetition: {\n        symbolText: {\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 0,\n        },\n    },\n    stem: {\n        heightAdjustmentForFlag: -3,\n        noteHead: {\n            noteheadTriangleUpHalf: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpBlack: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpWhole: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXHalf: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXBlack: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXWhole: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadHalf: {\n                offsetYBaseStemUp: -1.5,\n                offsetYBaseStemDown: 1.5,\n            },\n            noteheadBlack: {\n                offsetYBaseStemUp: -1.5,\n                offsetYBaseStemDown: 1.5,\n            },\n            noteheadSquareWhite: {\n                offsetYBaseStemDown: -5,\n                offsetYBaseStemUp: 5,\n            },\n        },\n    },\n    glyphs: {\n        flag: {\n            shiftX: -0.08,\n            flag8thDown: {\n                shiftX: -0.16,\n            },\n            flag16thDown: {\n                shiftX: -0.16,\n            },\n            flag32ndDown: {\n                shiftX: -0.16,\n                shiftY: 9,\n            },\n            flag64thDown: {\n                shiftX: -0.16,\n                shiftY: 13,\n            },\n            flag128thDown: {\n                shiftX: -0.16,\n                shiftY: 22,\n            },\n            flag32ndUp: {\n                shiftY: -9,\n            },\n            flag64thUp: {\n                shiftY: -13,\n            },\n            flag128thUp: {\n                shiftY: -22,\n            },\n        },\n        stringNumber: {\n            verticalPadding: 8,\n            stemPadding: 2,\n            leftPadding: 5,\n            rightPadding: 6,\n        },\n        textNote: {\n            point: 40,\n            default: {},\n            ornamentTrill: {\n                shiftX: -5,\n                shiftY: 4,\n            },\n        },\n        noteHead: {\n            minPadding: 2,\n        },\n        chordSymbol: {\n            global: {\n                superscriptOffset: -400,\n                subscriptOffset: 300,\n                kerningOffset: -250,\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n                upperKerningText: ['A', 'L'],\n                spacing: 100,\n                superSubRatio: 0.66,\n            },\n            csymDiminished: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymHalfDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymAugmented: {\n                scale: 1,\n                leftSideBearing: 0,\n                advanceWidth: 530,\n                yOffset: 0,\n            },\n            csymParensLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 155,\n                yOffset: 250,\n            },\n            csymParensRightTall: {\n                scale: 0.8,\n                leftSideBearing: -40,\n                advanceWidth: 189,\n                yOffset: 250,\n            },\n            csymBracketLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 328,\n                yOffset: 0,\n            },\n            csymBracketRightTall: {\n                scale: 0.8,\n                leftSideBearing: 1,\n                advanceWidth: 600,\n                yOffset: 0,\n            },\n            csymParensLeftVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 0,\n                advanceWidth: 121,\n                yOffset: 350,\n            },\n            csymParensRightVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 50,\n                advanceWidth: 111,\n                yOffset: 350,\n            },\n            csymDiagonalArrangementSlash: {\n                scale: 0.6,\n                leftSideBearing: -1,\n                advanceWidth: 990,\n                yOffset: 0,\n            },\n            csymMinor: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 482,\n                yOffset: 0,\n            },\n            csymMajorSeventh: {\n                scale: 0.9,\n                leftSideBearing: 200,\n                yOffset: 0,\n                advanceWidth: 600,\n            },\n            accidentalSharp: {\n                scale: 0.75,\n                leftSideBearing: 40,\n                advanceWidth: 250,\n                yOffset: -402,\n            },\n            accidentalFlat: {\n                scale: 0.95,\n                leftSideBearing: -50,\n                advanceWidth: 208,\n                yOffset: -184,\n            },\n        },\n        jazzOrnaments: {\n            brassScoop: {\n                scale: 1.0,\n                xOffset: -12,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassDoitMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 22,\n            },\n            brassFallLipShort: {\n                scale: 1.0,\n                xOffset: 17,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassLiftMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 5,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassFallRoughMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 28,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassBend: {\n                scale: 1.0,\n                xOffset: 2,\n                yOffset: -8,\n                stemUpYOffset: 24,\n                reportedWidth: 5,\n            },\n            brassMuteClosed: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -9,\n                stemUpYOffset: 24,\n                reportedWidth: 5,\n            },\n            brassMuteOpen: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -7,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassFlip: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: -4,\n                stemUpYOffset: 7,\n                reportedWidth: 5,\n            },\n            brassJazzTurn: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -4,\n                stemUpYOffset: 10,\n                reportedWidth: 28,\n            },\n            brassSmear: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: -4,\n                stemUpYOffset: 9,\n                reportedWidth: 5,\n            },\n        },\n        tremolo: {\n            default: {\n                shiftY: -10,\n            },\n            grace: {\n                shiftY: -5,\n            },\n        },\n        tuplet: {\n            noteHeadOffset: 20,\n            stemOffset: 10,\n            bottomLine: 4,\n            topModifierOffset: 15,\n        },\n    },\n};\n", "import { Font } from '../font.js';\nimport { GonvilleFont } from './gonville_glyphs.js';\nimport { GonvilleMetrics } from './gonville_metrics.js';\nexport function loadGonville() {\n    Font.load('Gonville', GonvilleFont, GonvilleMetrics);\n}\n", "export const LelandFont = {\n    glyphs: {\n        bracketTop: {\n            x_min: 0,\n            x_max: 491,\n            y_min: 0,\n            y_max: 279,\n            ha: 279,\n            o: 'm 697 399 b 687 402 694 400 690 402 b 671 395 681 402 674 400 b 249 168 668 390 524 168 l 20 168 b 0 150 9 168 0 161 l 0 20 l 0 0 l 176 0 b 706 374 619 0 704 370 b 707 382 706 376 707 379 b 697 399 707 389 703 395 z',\n        },\n        bracketBottom: {\n            x_min: 0,\n            x_max: 491,\n            y_min: -279,\n            y_max: 0,\n            ha: 279,\n            o: 'm 697 -399 b 707 -382 703 -395 707 -389 b 706 -374 707 -379 706 -376 b 176 0 704 -370 619 0 l 0 0 l 0 -20 l 0 -150 b 20 -168 0 -161 9 -168 l 249 -168 b 671 -395 524 -168 668 -390 b 687 -402 674 -400 681 -402 b 697 -399 690 -402 694 -400 z',\n        },\n        segno: {\n            x_min: 0,\n            x_max: 654,\n            y_min: 0,\n            y_max: 869,\n            ha: 869,\n            o: 'm 546 690 l 838 1207 b 841 1215 840 1210 841 1212 b 832 1233 841 1221 837 1230 l 809 1248 b 798 1251 806 1250 801 1251 b 780 1241 792 1251 783 1247 l 487 721 l 217 860 b 99 995 147 897 99 924 b 236 1165 99 1120 179 1165 b 343 1073 288 1165 325 1130 b 454 988 357 1022 405 988 b 477 991 461 988 469 989 b 541 1076 526 1002 541 1045 b 540 1089 541 1080 541 1084 b 294 1225 534 1116 514 1225 b 0 939 72 1225 0 1053 b 125 706 0 825 42 753 l 397 563 l 104 45 b 102 35 102 42 102 37 b 111 19 102 29 107 22 l 132 3 b 144 0 135 1 141 0 b 148 0 145 0 147 0 b 161 10 153 1 158 6 l 456 531 l 704 403 b 842 256 780 361 842 318 b 706 86 842 131 763 86 b 599 177 654 86 616 120 b 488 262 585 228 537 262 b 465 259 481 262 472 261 b 402 177 418 248 402 206 b 403 163 402 171 402 167 b 649 26 409 135 429 26 b 942 312 871 26 942 199 b 821 549 942 426 901 507 z m 52 444 b 118 416 69 426 95 416 b 183 444 141 416 166 426 b 210 508 200 461 210 485 b 183 573 210 531 200 556 b 118 600 166 590 141 600 b 52 573 95 600 69 590 b 24 508 35 556 24 531 b 52 444 24 485 35 461 z m 760 730 b 825 703 778 713 802 703 b 890 730 848 703 873 713 b 917 795 907 747 917 772 b 890 861 917 818 907 844 b 825 888 873 878 848 888 b 760 861 802 888 778 878 b 733 795 743 844 733 818 b 760 730 733 772 743 747 z',\n        },\n        coda: {\n            x_min: 0,\n            x_max: 745,\n            y_min: -113,\n            y_max: 735,\n            ha: 848,\n            o: 'm 924 467 b 560 896 916 697 757 881 l 560 1038 b 540 1058 560 1050 552 1058 l 524 1058 b 505 1038 513 1058 505 1050 l 505 896 b 150 467 311 877 158 693 l 20 467 b 0 446 9 467 0 458 l 0 432 b 20 412 0 420 9 412 l 150 412 b 505 0 166 193 317 17 l 505 -143 b 524 -163 505 -154 513 -163 l 540 -163 b 560 -143 552 -163 560 -154 l 560 0 b 923 412 753 13 907 190 l 1054 412 b 1073 432 1066 412 1073 420 l 1073 446 b 1054 467 1073 458 1066 467 z m 560 467 l 560 852 b 773 467 716 837 773 671 z m 505 467 l 301 467 b 505 851 301 668 357 831 z m 505 412 l 505 45 b 301 412 366 65 301 219 z m 560 412 l 772 412 b 560 45 772 215 706 60 z',\n        },\n        gClef: {\n            x_min: 0,\n            x_max: 640,\n            y_min: -666,\n            y_max: 1112,\n            ha: 1778,\n            o: 'm 809 -30 b 665 -279 809 -132 768 -238 b 586 186 635 -107 596 122 b 809 -30 716 186 809 98 z m 605 -297 b 521 -305 576 -302 549 -305 b 140 56 315 -305 140 -161 b 390 498 140 232 264 389 b 459 562 415 520 438 540 b 492 357 472 484 482 416 b 272 45 361 318 272 180 b 467 -194 272 -56 351 -194 b 491 -176 478 -194 491 -189 b 459 -144 491 -163 477 -156 b 372 -1 403 -109 372 -72 b 521 177 372 86 436 157 z m 478 1184 b 632 1392 491 1241 557 1392 b 688 1223 654 1392 688 1322 b 478 863 688 1073 577 960 b 462 1037 469 920 462 976 b 478 1184 462 1090 467 1139 z m 176 -739 b 444 -959 176 -834 249 -959 b 622 -910 511 -959 570 -942 b 720 -670 700 -855 720 -760 b 697 -467 720 -613 711 -549 b 675 -338 693 -438 684 -395 b 922 3 816 -292 922 -145 b 557 367 922 220 768 367 b 516 619 543 454 528 539 b 773 1188 668 779 773 959 b 710 1477 773 1319 733 1426 b 608 1601 675 1551 634 1601 b 505 1528 598 1601 553 1584 b 387 1113 413 1418 387 1234 b 419 804 387 1035 395 965 b 312 701 418 802 343 726 b 0 117 181 579 0 405 b 503 -364 0 -153 235 -364 b 616 -354 544 -364 583 -360 b 660 -670 644 -492 660 -593 b 438 -899 660 -819 583 -899 b 370 -891 403 -899 373 -891 b 366 -887 369 -890 366 -888 b 373 -881 366 -884 369 -883 b 508 -721 441 -871 508 -814 b 341 -562 508 -644 449 -562 b 176 -739 240 -562 176 -644 z',\n        },\n        cClef: {\n            x_min: 0,\n            x_max: 627,\n            y_min: -480,\n            y_max: 482,\n            ha: 962,\n            o: 'm 19 675 b 0 657 9 675 0 667 l 0 -654 b 19 -672 0 -664 9 -672 l 122 -672 b 141 -654 132 -672 141 -664 l 141 657 b 122 675 141 667 132 675 z m 903 -376 b 619 -58 903 -197 808 -58 b 505 -95 586 -58 562 -60 b 426 1 503 -89 474 -32 b 505 98 474 35 503 92 b 641 60 560 65 579 60 b 903 379 816 60 903 223 b 580 694 903 580 755 694 b 318 517 472 694 318 649 b 438 400 318 446 367 400 b 546 510 501 400 546 446 b 425 615 546 589 494 615 b 547 651 458 638 503 651 b 723 400 698 651 723 530 b 593 128 723 289 720 128 b 438 279 467 128 441 265 b 418 300 438 281 438 300 b 396 279 397 300 396 281 b 264 29 383 200 344 62 l 264 657 b 246 675 264 667 256 675 b 228 657 236 675 228 667 l 228 -654 b 246 -672 228 -664 236 -672 b 264 -654 256 -672 264 -664 l 264 -26 b 396 -278 348 -60 380 -197 b 418 -297 396 -279 397 -297 b 438 -278 438 -297 438 -279 b 593 -125 441 -262 467 -125 b 723 -397 720 -125 723 -287 b 547 -648 723 -527 698 -648 b 425 -612 503 -648 458 -635 b 441 -613 426 -612 432 -613 b 546 -507 504 -613 546 -569 b 438 -397 546 -444 501 -397 b 318 -514 367 -397 318 -444 b 580 -691 318 -647 472 -691 b 903 -376 755 -691 903 -577 z',\n        },\n        fClef: {\n            x_min: 0,\n            x_max: 664,\n            y_min: -617,\n            y_max: 251,\n            ha: 868,\n            o: 'm 366 361 b 167 298 256 361 168 298 b 37 112 84 236 50 163 b 27 36 30 86 27 60 b 46 -58 27 1 33 -30 b 140 -138 63 -96 96 -124 b 194 -147 157 -144 176 -147 b 287 -122 226 -147 259 -138 b 359 10 331 -98 359 -46 b 289 134 359 60 333 107 b 206 160 259 154 230 160 b 160 153 189 160 173 157 b 109 122 145 147 121 132 b 147 215 114 150 131 192 b 219 279 163 238 194 266 b 351 308 255 300 301 308 b 570 -52 498 308 570 190 b 477 -399 570 -186 520 -314 b 310 -635 429 -494 366 -585 b 17 -837 160 -772 19 -837 b 0 -864 17 -837 0 -847 b 1 -871 0 -867 1 -868 b 27 -888 6 -886 19 -888 b 35 -887 29 -888 33 -887 b 331 -717 36 -887 200 -819 b 528 -544 405 -664 471 -606 b 661 -367 580 -488 625 -428 b 760 -50 724 -259 760 -147 b 670 239 760 69 729 168 b 366 361 602 320 500 361 z m 818 179 b 887 107 818 138 850 107 b 956 179 924 107 956 138 b 887 252 956 219 924 252 b 818 179 850 252 818 219 z m 818 -177 b 887 -251 818 -217 850 -251 b 956 -177 924 -251 956 -217 b 887 -104 956 -137 924 -104 b 818 -177 850 -104 818 -137 z',\n        },\n        unpitchedPercussionClef1: {\n            x_min: 0,\n            x_max: 352,\n            y_min: -252,\n            y_max: 252,\n            ha: 504,\n            o: 'm 19 363 b 0 344 9 363 0 354 l 0 -344 b 19 -363 0 -354 9 -363 l 177 -363 b 196 -344 187 -363 196 -354 l 196 344 b 177 363 196 354 187 363 z m 330 363 b 311 344 320 363 311 354 l 311 -344 b 330 -363 311 -354 320 -363 l 488 -363 b 507 -344 498 -363 507 -354 l 507 344 b 488 363 507 354 498 363 z',\n        },\n        '6stringTabClef': {\n            x_min: 0,\n            x_max: 439,\n            y_min: -743,\n            y_max: 746,\n            ha: 1489,\n            o: 'm 52 1074 l 52 958 l 249 958 l 249 419 l 387 419 l 387 958 l 583 958 l 583 1074 z m 0 -333 l 145 -333 l 192 -196 l 436 -196 l 481 -333 l 632 -333 l 396 334 l 238 334 z m 315 181 l 400 -81 l 229 -81 z m 566 -474 b 393 -402 531 -428 475 -403 l 71 -402 l 71 -1070 l 372 -1070 b 374 -1070 373 -1070 373 -1070 b 465 -1061 405 -1070 435 -1067 b 541 -1027 494 -1056 520 -1043 b 588 -975 560 -1012 575 -995 b 618 -868 608 -943 618 -907 b 592 -770 618 -829 609 -798 b 514 -711 575 -743 549 -724 b 566 -674 537 -700 554 -688 b 596 -576 586 -649 596 -616 b 566 -474 596 -536 586 -503 z m 348 -518 b 428 -528 380 -518 408 -521 b 464 -590 452 -539 464 -559 b 436 -649 464 -619 455 -638 b 366 -665 418 -661 395 -665 l 203 -665 l 203 -518 z m 367 -776 b 435 -788 396 -776 419 -780 b 477 -858 464 -801 477 -824 b 433 -942 477 -900 462 -927 b 366 -953 418 -949 395 -953 l 203 -953 l 203 -776 z',\n        },\n        timeSig0: {\n            x_min: 15,\n            x_max: 389,\n            y_min: -254,\n            y_max: 255,\n            ha: 509,\n            o: 'm 291 367 b 22 0 138 367 22 209 b 291 -366 22 -209 138 -366 b 560 0 444 -366 560 -209 b 291 367 560 209 444 367 z m 376 -200 b 291 -308 376 -252 353 -308 b 206 -200 229 -308 206 -252 l 206 200 b 291 308 206 252 229 308 b 376 200 353 308 376 252 z',\n        },\n        timeSig1: {\n            x_min: 15,\n            x_max: 336,\n            y_min: -243,\n            y_max: 245,\n            ha: 488,\n            o: 'm 359 -284 l 359 336 b 341 353 359 346 351 353 l 199 353 b 190 350 196 353 193 351 b 184 344 189 348 186 346 l 23 65 b 22 56 22 62 22 59 b 30 42 22 50 26 45 l 58 26 b 66 23 60 24 63 23 b 81 32 72 23 78 27 l 183 207 l 183 -284 l 73 -284 b 56 -301 63 -284 56 -291 l 56 -333 b 73 -350 56 -343 63 -350 l 468 -350 b 484 -333 478 -350 484 -343 l 484 -301 b 468 -284 484 -291 478 -284 z',\n        },\n        timeSig2: {\n            x_min: 15,\n            x_max: 377,\n            y_min: -243,\n            y_max: 245,\n            ha: 488,\n            o: 'm 492 -56 b 382 -192 481 -88 452 -192 b 190 -134 288 -192 268 -134 b 153 -138 179 -134 167 -135 b 341 -36 153 -138 189 -84 b 533 173 494 12 533 86 b 288 353 533 233 505 353 b 30 156 71 353 30 222 b 138 49 30 96 79 49 b 245 156 197 49 245 96 b 179 255 245 196 216 240 b 168 271 174 256 168 264 b 202 297 168 279 176 289 b 251 304 209 300 229 304 b 311 288 271 304 294 300 b 348 180 338 271 348 245 b 65 -150 348 12 148 -24 b 22 -278 65 -150 22 -210 b 73 -350 22 -346 56 -350 b 121 -305 96 -350 121 -331 b 117 -287 121 -300 120 -294 b 105 -239 108 -266 105 -251 b 107 -226 105 -235 105 -230 b 154 -203 108 -217 120 -203 b 238 -289 196 -203 212 -252 b 350 -350 264 -327 304 -350 b 484 -264 396 -350 458 -317 b 543 -63 510 -210 543 -102 b 518 -36 543 -45 531 -36 b 492 -56 508 -36 498 -42 z',\n        },\n        timeSig3: {\n            x_min: 14.984905204685425,\n            x_max: 364,\n            y_min: -244,\n            y_max: 244,\n            ha: 488,\n            o: 'm 392 23 b 514 168 507 68 514 143 b 514 176 514 171 514 174 b 262 351 514 189 510 351 b 22 176 14 351 22 176 l 23 176 l 22 173 b 115 81 22 121 63 81 b 207 173 167 81 207 121 b 135 264 207 215 176 255 b 140 268 137 265 138 266 b 215 289 160 282 187 289 b 340 176 275 289 340 253 b 255 69 340 85 272 72 b 140 60 238 66 157 60 b 121 40 122 60 121 40 l 121 12 b 140 -6 121 12 124 -4 b 243 -14 164 -7 197 -7 b 340 -167 307 -23 340 -66 b 215 -289 340 -264 275 -289 b 121 -266 174 -289 137 -278 b 207 -174 168 -264 207 -222 b 115 -81 207 -122 167 -81 b 22 -174 63 -81 22 -122 b 22 -180 22 -174 22 -177 b 78 -298 22 -199 26 -251 b 236 -351 134 -350 204 -351 b 524 -147 374 -351 524 -304 b 389 23 524 -42 452 3 z',\n        },\n        timeSig4: {\n            x_min: 14,\n            x_max: 442,\n            y_min: -248,\n            y_max: 249,\n            ha: 497,\n            o: 'm 300 -183 l 300 -289 l 180 -289 b 160 -310 170 -289 160 -298 l 160 -337 b 180 -357 160 -348 170 -357 l 616 -357 b 636 -337 628 -357 636 -348 l 636 -310 b 616 -289 636 -298 628 -289 l 487 -289 l 487 -183 l 616 -183 b 636 -161 628 -183 636 -173 l 636 -134 b 616 -114 636 -124 628 -114 l 487 -114 l 487 115 b 477 134 487 124 482 131 l 459 143 b 452 144 456 144 455 144 b 449 144 451 144 451 144 b 436 140 445 144 439 143 l 305 20 b 300 4 301 16 300 10 l 300 -114 l 132 -114 b 464 287 132 -114 294 59 b 471 307 469 294 471 301 b 467 321 471 314 468 320 l 435 353 b 420 359 431 356 426 359 b 206 359 412 359 217 359 b 187 341 196 359 189 350 b 143 118 187 341 180 235 b 24 -124 105 1 62 -71 b 20 -140 24 -124 20 -131 b 22 -148 20 -143 20 -145 b 36 -174 26 -158 36 -174 b 52 -183 36 -174 39 -183 z',\n        },\n        timeSig5: {\n            x_min: 15,\n            x_max: 362,\n            y_min: -244,\n            y_max: 246,\n            ha: 490,\n            o: 'm 39 314 b 46 170 39 314 46 245 b 46 151 46 164 46 157 b 39 -24 45 71 39 -24 b 39 -29 39 -24 39 -26 b 49 -48 39 -35 40 -46 b 99 -59 62 -50 92 -58 b 107 -59 102 -59 104 -59 b 121 -49 112 -59 118 -58 b 235 45 128 -30 144 45 b 356 -112 337 45 356 -43 b 238 -292 356 -184 333 -288 b 226 -292 233 -292 230 -292 b 166 -282 193 -292 174 -288 b 158 -274 161 -281 158 -276 b 164 -264 158 -269 160 -266 b 222 -168 177 -255 222 -239 b 117 -71 222 -98 173 -71 b 22 -171 60 -71 22 -122 b 111 -318 22 -220 36 -275 b 252 -351 147 -338 199 -351 b 456 -275 325 -351 405 -328 b 521 -109 503 -228 521 -167 b 433 79 521 -32 487 43 b 271 124 397 104 336 124 b 131 84 223 124 173 112 b 125 82 130 82 127 82 b 115 92 120 82 115 86 l 115 183 b 131 199 115 192 122 199 l 132 199 b 252 192 154 197 202 192 b 372 209 295 192 340 196 b 474 320 439 236 462 289 b 477 334 475 324 477 330 b 451 354 477 346 469 354 b 431 351 445 354 439 353 b 252 328 360 334 305 328 b 88 343 200 328 150 334 b 71 344 88 343 81 344 b 39 320 56 344 39 340 b 39 314 39 317 39 315 z',\n        },\n        timeSig6: {\n            x_min: 15,\n            x_max: 387,\n            y_min: -244,\n            y_max: 245,\n            ha: 489,\n            o: 'm 356 69 b 216 22 268 69 236 43 b 209 98 212 52 209 75 b 216 167 209 121 212 141 b 338 287 225 220 261 287 b 410 259 374 287 396 275 b 356 174 380 246 356 207 b 448 82 356 122 396 82 b 541 174 500 82 541 122 l 541 177 b 541 179 541 177 541 177 b 533 225 541 192 539 213 b 310 353 514 276 454 353 b 58 163 180 353 86 229 b 22 -23 43 128 22 58 b 131 -285 22 -111 46 -210 b 318 -351 215 -348 268 -351 b 557 -125 369 -351 557 -292 b 356 69 557 16 446 69 z m 302 -291 b 216 -145 255 -291 216 -226 b 302 1 216 -65 255 1 b 390 -145 350 1 390 -65 b 302 -291 390 -226 350 -291 z',\n        },\n        timeSig7: {\n            x_min: 15,\n            x_max: 366,\n            y_min: -250,\n            y_max: 251,\n            ha: 501,\n            o: 'm 233 -177 b 160 -336 202 -225 160 -282 b 180 -360 160 -351 164 -360 b 264 -351 203 -360 217 -354 b 278 -350 268 -351 274 -350 b 369 -360 320 -350 359 -360 b 405 -331 382 -360 406 -344 b 405 -327 405 -330 405 -328 b 396 -226 405 -324 396 -279 b 408 -130 396 -196 399 -161 b 503 151 425 -62 471 60 b 527 308 518 196 527 275 b 526 341 527 321 527 327 b 510 361 524 356 518 361 b 484 361 503 361 491 361 b 467 341 477 361 467 356 b 406 228 467 327 464 228 b 235 351 346 228 328 351 b 86 252 145 351 91 261 l 86 321 b 71 337 86 330 79 337 l 37 337 b 22 321 29 337 22 330 l 22 55 b 37 39 22 46 29 39 l 71 39 b 86 55 79 39 86 46 l 86 101 b 158 179 86 134 108 179 b 328 124 209 179 213 124 b 425 143 357 124 410 128 b 233 -177 413 120 266 -130 z',\n        },\n        timeSig8: {\n            x_min: 15,\n            x_max: 393,\n            y_min: -248,\n            y_max: 246,\n            ha: 494,\n            o: 'm 467 26 b 547 166 514 62 547 108 b 294 354 547 269 433 354 b 40 166 154 354 40 269 b 122 13 40 108 55 56 b 22 -147 58 -24 22 -78 b 294 -357 22 -264 144 -357 b 566 -147 444 -357 566 -264 b 467 26 566 -78 541 -13 z m 294 -276 b 122 -145 202 -276 122 -226 b 197 -26 122 -49 197 -26 b 435 -187 295 -59 435 -108 b 294 -276 435 -226 384 -276 z m 386 65 b 180 209 288 96 180 144 b 294 288 180 265 232 288 b 444 180 383 288 444 246 b 386 65 444 111 412 78 z',\n        },\n        timeSig9: {\n            x_min: 15,\n            x_max: 387,\n            y_min: -244,\n            y_max: 245,\n            ha: 489,\n            o: 'm 223 -68 b 363 -20 311 -68 343 -42 b 370 -96 367 -50 370 -73 b 363 -166 370 -120 367 -140 b 240 -285 354 -219 318 -285 b 168 -258 204 -285 183 -274 b 223 -173 199 -245 223 -206 b 131 -81 223 -121 183 -81 b 37 -173 79 -81 37 -121 l 37 -176 b 37 -177 37 -176 37 -176 b 46 -223 37 -190 40 -212 b 269 -351 65 -275 125 -351 b 521 -161 399 -351 492 -228 b 557 24 536 -127 557 -56 b 448 287 557 112 533 212 b 261 353 364 350 311 353 b 22 127 210 353 22 294 b 223 -68 22 -14 132 -68 z m 276 294 b 363 147 324 294 363 228 b 276 1 363 66 324 1 b 189 147 229 1 189 66 b 276 294 189 228 229 294 z',\n        },\n        timeSigCommon: {\n            x_min: 0,\n            x_max: 463,\n            y_min: -256,\n            y_max: 258,\n            ha: 514,\n            o: 'm 468 258 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 521 17 415 71 462 24 b 537 17 526 17 533 17 b 667 147 609 17 667 75 b 667 156 667 147 667 151 b 664 177 667 161 665 171 b 350 372 651 239 595 372 b 0 17 36 372 0 111 b 382 -369 0 -154 22 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 196 -128 256 -323 196 -255 l 196 147 b 356 320 196 228 228 320 b 469 271 423 320 454 295 b 471 264 471 268 471 266 b 468 258 471 262 471 259 z',\n        },\n        timeSigCutCommon: {\n            x_min: 0,\n            x_max: 463,\n            y_min: -376,\n            y_max: 388,\n            ha: 764,\n            o: 'm 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 369 -323 377 -323 373 -323 l 369 320 b 469 269 428 317 455 292 b 471 264 471 266 471 265 b 468 258 471 261 471 259 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 523 17 415 71 464 24 b 537 17 527 17 533 17 b 667 147 609 17 667 75 b 667 156 667 147 667 151 b 664 177 667 161 665 171 b 369 370 651 236 598 364 l 369 543 b 353 559 369 552 361 559 l 314 559 b 298 543 305 559 298 552 l 298 369 b 0 17 32 341 0 105 b 298 -364 0 -140 17 -334 l 298 -526 b 314 -541 298 -534 305 -541 l 353 -541 b 369 -526 361 -541 369 -534 l 369 -369 b 382 -369 373 -369 377 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 z m 196 147 b 298 312 196 215 216 289 l 298 -310 b 196 -128 229 -285 196 -223 z',\n        },\n        timeSigPlus: {\n            x_min: 0,\n            x_max: 408,\n            y_min: -204,\n            y_max: 204,\n            ha: 408,\n            o: 'm 327 33 l 327 275 b 308 294 327 285 318 294 l 279 294 b 261 275 269 294 261 285 l 261 33 l 19 33 b 0 14 9 33 0 24 l 0 -13 b 19 -33 0 -23 9 -33 l 261 -33 l 261 -274 b 279 -294 261 -284 269 -294 l 308 -294 b 327 -274 318 -294 327 -284 l 327 -33 l 567 -33 b 588 -13 577 -33 588 -23 l 588 14 b 567 33 588 24 577 33 z',\n        },\n        noteheadDoubleWhole: {\n            x_min: 0,\n            x_max: 538,\n            y_min: -178,\n            y_max: 179,\n            ha: 357,\n            o: 'm 33 258 b 20 258 27 258 26 258 b 0 238 9 258 0 249 b 0 -236 0 226 0 -226 b 20 -256 0 -246 9 -256 b 33 -256 26 -256 27 -256 b 53 -236 43 -256 53 -245 b 53 238 53 -228 53 226 b 33 258 53 249 45 258 z m 649 258 b 636 258 644 258 642 258 b 616 238 625 258 616 249 b 616 125 616 235 616 187 b 389 196 573 167 500 196 b 160 125 276 196 203 167 b 160 238 160 187 160 235 b 140 258 160 249 151 258 b 127 258 134 258 132 258 b 107 238 115 258 107 249 b 107 -236 107 226 107 -226 b 127 -256 107 -246 115 -256 b 140 -256 132 -256 134 -256 b 160 -236 150 -256 160 -245 b 160 -122 160 -233 160 -186 b 389 -194 203 -166 276 -194 b 616 -122 500 -194 573 -166 b 616 -236 616 -186 616 -233 b 636 -256 616 -246 625 -256 b 649 -256 642 -256 644 -256 b 670 -236 660 -256 670 -245 b 670 238 670 -228 670 226 b 649 258 670 249 661 258 z m 462 -140 b 400 -148 445 -144 422 -148 b 314 -101 360 -148 333 -135 b 268 68 295 -65 269 29 b 268 76 268 71 268 73 b 314 141 268 109 282 130 b 377 150 331 145 354 150 b 462 102 416 150 442 140 b 510 -66 482 63 510 -29 b 462 -140 510 -104 497 -128 z m 755 258 b 742 258 749 258 747 258 b 721 238 730 258 721 249 b 721 -236 721 226 721 -226 b 742 -256 721 -246 730 -256 b 755 -256 747 -256 749 -256 b 775 -236 765 -256 775 -245 b 775 238 775 -228 775 226 b 755 258 775 249 766 258 z',\n        },\n        noteheadWhole: {\n            x_min: 0,\n            x_max: 373,\n            y_min: -134,\n            y_max: 136,\n            ha: 270,\n            o: 'm 269 196 b 0 1 71 196 0 95 b 269 -193 0 -92 71 -193 b 537 1 468 -193 537 -92 b 269 196 537 95 468 196 z m 343 -138 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 148 68 176 -63 150 29 b 194 141 145 107 160 130 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 389 -65 363 63 389 -29 b 343 -138 389 -102 377 -128 z',\n        },\n        noteheadHalf: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -133,\n            y_max: 132,\n            ha: 265,\n            o: 'm 307 190 b 0 -60 167 190 0 73 b 161 -192 0 -122 45 -192 b 468 58 311 -192 468 -69 b 307 190 468 143 396 190 z m 268 -63 b 108 -124 264 -66 158 -124 b 50 -72 60 -124 50 -85 b 200 62 50 -12 194 59 b 360 122 206 65 308 122 b 418 71 395 122 418 102 b 268 -63 418 9 272 -60 z',\n        },\n        noteheadBlack: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -133,\n            y_max: 132,\n            ha: 265,\n            o: 'm 0 -60 b 161 -192 0 -122 45 -192 b 468 58 311 -192 468 -69 b 307 190 468 143 396 190 b 0 -60 167 190 0 72 z',\n        },\n        noteheadXBlack: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -132,\n            y_max: 132,\n            ha: 264,\n            o: 'm 461 138 b 468 153 465 141 468 147 l 468 154 b 462 167 468 160 465 164 l 445 184 b 431 190 441 187 436 190 b 418 186 426 190 420 189 l 235 40 l 50 186 b 37 190 48 189 42 190 b 24 184 32 190 29 187 l 6 167 b 0 153 3 164 0 158 b 7 138 0 147 3 141 l 183 0 l 7 -138 b 0 -153 3 -141 0 -147 b 6 -166 0 -157 3 -163 l 23 -184 b 37 -190 26 -189 32 -190 b 50 -186 42 -190 48 -189 l 235 -40 l 418 -186 b 431 -190 420 -189 426 -190 b 445 -184 436 -190 442 -189 l 462 -166 b 468 -153 465 -163 468 -157 b 461 -138 468 -147 465 -141 l 285 0 z',\n        },\n        noteheadCircleX: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -162,\n            y_max: 163,\n            ha: 325,\n            o: 'm 265 0 l 395 105 b 426 0 415 75 426 39 b 387 -115 426 -43 412 -84 z m 233 -27 l 360 -145 b 235 -192 327 -174 282 -192 b 99 -137 183 -192 134 -171 z m 202 1 l 73 -105 b 42 0 53 -75 42 -39 b 81 115 42 43 56 84 z m 235 29 l 108 145 b 233 193 141 174 186 193 b 369 138 285 193 334 173 z m 233 235 b 0 0 104 235 0 130 b 233 -233 0 -130 104 -233 b 468 0 363 -233 468 -130 b 233 235 468 130 363 235 z',\n        },\n        noteheadDoubleWholeSquare: {\n            x_min: 0,\n            x_max: 432,\n            y_min: -179,\n            y_max: 177,\n            ha: 356,\n            o: 'm 590 255 b 570 235 579 255 570 246 l 570 203 l 53 203 l 53 235 b 33 255 53 246 45 255 l 20 255 b 0 235 9 255 0 246 l 0 -230 b 20 -251 0 -242 9 -251 l 33 -251 b 53 -230 45 -251 53 -242 l 53 -200 l 570 -200 l 570 -238 b 590 -258 570 -249 579 -258 l 603 -258 b 622 -238 615 -258 622 -249 l 622 235 b 603 255 622 246 615 255 z m 570 -101 l 53 -101 l 53 105 l 570 105 z',\n        },\n        noteheadSquareWhite: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 395 128 l 395 -128 l 52 -128 l 52 128 z m 446 180 l 0 180 l 0 -180 l 446 -180 z',\n        },\n        noteheadSquareBlack: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 446 180 l 0 180 l 0 -180 l 446 -180 z',\n        },\n        noteheadTriangleUpBlack: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -136,\n            y_max: 122,\n            ha: 258,\n            o: 'm 223 176 l 0 -196 l 446 -196 z',\n        },\n        noteheadSlashedDoubleWhole1: {\n            x_min: -66,\n            x_max: 456,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 652 298 b 638 305 649 304 644 305 b 626 301 634 305 629 304 l 560 248 b 543 256 557 253 550 256 b 530 256 537 256 536 256 b 510 236 518 256 510 248 b 510 204 510 235 510 223 l 455 161 b 281 194 413 181 356 194 b 53 124 168 194 96 166 b 53 236 53 186 53 233 b 29 256 53 253 42 256 b 20 256 26 256 23 256 b 0 236 9 256 0 248 b 0 -204 0 228 0 -98 l -88 -272 b -95 -288 -92 -276 -95 -282 b -91 -300 -95 -291 -94 -295 b -76 -307 -86 -304 -82 -307 b -65 -302 -72 -307 -68 -305 l 3 -248 b 20 -258 6 -253 12 -258 b 53 -238 33 -258 52 -255 b 53 -206 53 -236 53 -225 l 107 -161 b 281 -196 148 -183 206 -196 b 510 -124 393 -196 465 -166 b 510 -238 510 -187 510 -235 b 530 -258 510 -248 518 -258 b 563 -238 543 -258 563 -255 b 563 204 563 -229 563 98 l 649 272 b 657 288 655 276 657 282 b 652 298 657 291 655 295 z m 160 75 b 269 148 160 138 219 148 b 356 101 310 148 334 140 b 363 85 357 96 360 91 l 189 -56 b 160 66 174 -14 161 40 b 160 75 160 69 160 72 z m 53 -163 b 53 -124 53 -151 53 -138 b 76 -144 60 -131 68 -138 z m 402 -68 b 292 -148 402 -138 351 -148 b 207 -101 252 -150 226 -137 b 199 -84 204 -96 202 -91 l 373 56 b 402 -68 389 13 402 -40 z m 510 124 b 485 144 503 131 494 137 l 510 163 b 510 124 510 151 510 137 z',\n        },\n        noteheadSlashedWhole1: {\n            x_min: -75,\n            x_max: 448,\n            y_min: -211,\n            y_max: 214,\n            ha: 425,\n            o: 'm 641 301 b 625 308 636 305 631 308 b 613 304 621 307 618 307 l 439 160 b 269 196 399 181 343 196 b 0 1 71 196 0 95 b 69 -138 0 -49 20 -101 l -101 -271 b -108 -287 -105 -275 -108 -281 b -104 -298 -107 -291 -107 -294 b -88 -304 -99 -302 -94 -304 b -76 -301 -85 -304 -81 -304 l 98 -157 b 269 -193 138 -179 194 -193 b 537 1 468 -193 537 -92 b 468 141 537 52 517 104 l 638 274 b 645 289 642 278 645 284 b 641 301 644 292 644 297 z m 148 68 b 148 78 148 72 148 75 b 194 141 148 111 163 131 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 350 86 346 98 348 92 l 177 -55 b 148 68 163 -12 150 42 z m 389 -65 b 343 -138 389 -102 377 -128 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 187 -82 192 -95 190 -89 l 279 -6 l 361 58 b 389 -65 376 16 389 -39 z',\n        },\n        noteheadSlashedHalf1: {\n            x_min: -98,\n            x_max: 424,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 606 298 b 592 305 602 302 598 305 b 580 301 588 305 583 304 l 412 163 b 307 190 383 180 347 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 32 -143 20 -128 26 -135 l -134 -274 b -141 -288 -138 -276 -141 -282 b -137 -300 -141 -292 -140 -297 b -122 -307 -134 -304 -128 -307 b -111 -302 -118 -307 -114 -305 l 56 -164 b 161 -192 85 -181 121 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 b 436 141 449 125 444 134 l 603 272 b 611 287 608 275 611 281 b 606 298 611 291 609 295 z m 56 -98 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 199 60 99 1 147 32 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 361 121 360 121 360 121 l 225 9 l 69 -114 b 56 -98 65 -109 60 -104 z m 410 94 b 416 69 415 86 416 78 b 392 19 416 53 408 36 b 266 -65 367 -6 318 -36 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 104 -125 107 -125 105 -125 l 245 -9 l 396 111 b 410 94 402 107 408 101 z',\n        },\n        noteheadSlashedBlack1: {\n            x_min: -98,\n            x_max: 424,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 606 298 b 592 305 602 302 598 305 b 580 301 588 305 583 304 l 412 161 b 307 190 383 180 347 190 b 0 -60 167 190 0 72 b 32 -144 0 -89 10 -120 l -134 -274 b -141 -288 -138 -278 -141 -284 b -137 -301 -141 -292 -140 -297 b -122 -307 -134 -305 -128 -307 b -111 -304 -118 -307 -114 -307 l 56 -164 b 161 -192 82 -181 117 -192 b 468 58 311 -192 468 -71 b 436 141 468 91 456 120 l 603 271 b 611 285 608 275 611 281 b 606 298 611 289 609 294 z',\n        },\n        noteheadSlashedDoubleWhole2: {\n            x_min: -66,\n            x_max: 456,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 563 -204 b 563 236 563 -98 563 228 b 543 256 563 249 554 256 b 530 256 537 256 536 256 b 510 236 518 256 510 248 b 510 124 510 233 510 187 b 281 194 467 166 393 194 b 107 161 207 194 150 181 l 53 204 b 53 236 53 223 53 235 b 33 256 53 249 45 256 b 20 256 27 256 26 256 b 3 246 12 256 6 253 l -63 301 b -76 305 -68 304 -72 305 b -91 298 -81 305 -86 304 b -95 287 -94 295 -95 291 b -88 272 -95 281 -92 276 l 0 204 b 0 -238 0 98 0 -229 b 20 -258 0 -248 9 -258 b 33 -258 26 -258 27 -258 b 53 -238 43 -258 53 -246 b 53 -124 53 -235 53 -187 b 281 -196 96 -166 170 -196 b 456 -161 356 -196 413 -183 l 510 -206 b 510 -238 510 -225 510 -236 b 530 -258 510 -248 518 -258 b 543 -258 536 -258 537 -258 b 560 -246 549 -258 556 -252 l 626 -302 b 638 -307 631 -305 634 -307 b 654 -300 645 -307 649 -304 b 657 -288 655 -295 657 -292 b 651 -272 657 -282 655 -276 z m 207 140 b 269 148 225 144 248 148 b 356 101 310 148 336 140 b 402 -68 376 62 402 -30 b 402 -78 402 -71 402 -75 l 292 9 l 168 109 b 207 140 176 124 189 134 z m 78 144 b 53 124 69 137 60 131 b 53 163 53 137 53 150 z m 356 -141 b 294 -148 338 -145 315 -148 b 207 -101 253 -148 226 -137 b 161 66 189 -66 163 27 b 160 72 161 69 160 71 b 161 78 160 75 160 76 l 271 -9 l 395 -109 b 356 -141 387 -124 374 -134 z m 485 -144 b 510 -124 494 -138 503 -131 b 510 -163 510 -138 510 -151 z',\n        },\n        noteheadSlashedWhole2: {\n            x_min: -75,\n            x_max: 448,\n            y_min: -212,\n            y_max: 214,\n            ha: 426,\n            o: 'm 468 -138 b 537 1 517 -101 537 -49 b 269 196 537 95 468 196 b 98 160 196 196 140 181 l -76 304 b -88 308 -81 307 -84 307 b -104 301 -94 308 -99 305 b -108 289 -107 297 -107 292 b -101 274 -108 284 -105 278 l 69 141 b 0 1 20 104 0 52 b 269 -193 0 -92 71 -193 b 441 -157 343 -193 399 -179 l 613 -301 b 625 -305 618 -304 622 -305 b 641 -298 631 -305 636 -302 b 645 -287 644 -294 644 -291 b 638 -271 645 -281 642 -275 z m 194 141 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 389 -65 363 63 389 -29 b 389 -76 389 -69 389 -73 l 279 10 l 156 112 b 194 141 163 125 176 135 z m 343 -138 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 148 68 176 -63 150 29 b 148 76 148 71 148 73 b 148 81 148 78 148 79 l 258 -6 l 382 -108 b 343 -138 374 -122 361 -132 z',\n        },\n        noteheadSlashedHalf2: {\n            x_min: -98,\n            x_max: 424,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 386 -102 b 468 58 438 -55 468 4 b 454 117 468 78 464 98 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 108 120 137 140 122 130 l -111 301 b -122 305 -114 304 -118 305 b -137 298 -128 305 -134 302 b -141 287 -140 295 -141 291 b -134 272 -141 281 -138 275 l 85 101 b 0 -60 32 53 0 -7 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 361 -122 333 -143 347 -132 l 580 -302 b 592 -307 583 -305 588 -307 b 606 -300 598 -307 602 -304 b 611 -288 609 -297 611 -292 b 603 -274 611 -282 608 -276 z m 199 60 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 410 94 382 121 400 112 b 416 69 415 86 416 78 b 392 19 416 53 408 36 b 308 -42 374 0 343 -20 l 245 7 l 189 55 b 199 60 192 56 196 58 z m 266 -65 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 56 -98 84 -125 66 -117 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 163 39 94 -4 125 17 l 225 -9 l 282 -56 b 266 -65 276 -59 272 -62 z',\n        },\n        noteheadSlashedBlack2: {\n            x_min: -98.44444444444443,\n            x_max: 424,\n            y_min: -213,\n            y_max: 212,\n            ha: 425,\n            o: 'm 384 -102 b 468 58 435 -58 468 0 b 307 190 468 143 396 190 b 108 121 239 190 167 163 l -111 301 b -124 305 -115 304 -120 305 b -138 298 -128 305 -134 302 b -141 289 -140 295 -141 292 b -141 287 -141 288 -143 288 b -135 272 -141 281 -140 275 l 84 101 b 0 -60 35 56 0 0 b 161 -192 0 -122 45 -192 b 361 -122 232 -192 304 -164 l 579 -302 b 590 -307 583 -305 588 -307 b 606 -300 596 -307 602 -304 b 611 -288 609 -297 611 -292 b 603 -274 609 -282 608 -276 z',\n        },\n        noteheadDiamondDoubleWhole: {\n            x_min: 0,\n            x_max: 373,\n            y_min: -178,\n            y_max: 179,\n            ha: 357,\n            o: 'm 504 258 b 484 238 494 258 484 248 l 484 46 b 282 187 415 95 285 186 b 268 192 279 190 275 192 b 255 187 262 192 258 190 l 52 45 l 52 238 b 33 258 52 248 43 258 l 20 258 b 0 238 9 258 0 248 l 0 -236 b 20 -256 0 -248 9 -256 l 33 -256 b 52 -236 43 -256 52 -248 l 52 -45 l 249 -181 b 268 -190 258 -189 264 -190 b 282 -186 274 -190 279 -189 b 484 -43 285 -184 413 -94 l 484 -236 b 504 -256 484 -248 494 -256 l 517 -256 b 537 -236 528 -256 537 -248 l 537 238 b 517 258 537 248 528 258 z m 220 -115 l 102 -33 l 317 117 l 435 35 z',\n        },\n        noteheadDiamondWhole: {\n            x_min: 0,\n            x_max: 373,\n            y_min: -133,\n            y_max: 132,\n            ha: 265,\n            o: 'm 282 -187 b 530 -13 285 -186 530 -13 b 537 0 534 -10 537 -6 b 530 13 537 4 534 10 b 282 186 530 13 287 183 b 268 190 279 189 275 190 b 255 186 262 190 258 189 l 7 12 b 0 -1 3 9 0 4 b 4 -13 0 -6 1 -10 l 249 -183 b 268 -192 258 -190 264 -192 b 282 -187 274 -192 279 -190 z m 220 -117 l 102 -35 l 317 115 l 435 33 z',\n        },\n        noteheadDiamondHalf: {\n            x_min: 0,\n            x_max: 335,\n            y_min: -132,\n            y_max: 133,\n            ha: 265,\n            o: 'm 475 -13 b 482 0 480 -10 482 -6 b 475 13 482 4 480 10 l 253 187 b 240 192 251 190 246 192 b 229 187 236 192 232 190 l 7 13 b 0 0 3 10 0 6 b 7 -13 0 -4 3 -10 l 229 -186 b 240 -190 232 -189 236 -190 b 253 -186 246 -190 251 -189 z m 284 -115 l 92 33 l 199 117 l 390 -33 z',\n        },\n        noteheadDiamondBlack: {\n            x_min: 0,\n            x_max: 335,\n            y_min: -132,\n            y_max: 133,\n            ha: 265,\n            o: 'm 475 -14 b 482 -1 480 -10 482 -6 b 475 13 482 4 480 10 l 253 187 b 240 192 251 190 246 192 b 229 187 236 192 232 190 l 7 13 b 0 0 3 10 0 4 b 7 -14 0 -6 3 -10 l 229 -186 b 240 -190 232 -189 236 -190 b 253 -186 246 -190 251 -189 z',\n        },\n        noteheadParenthesisRight: {\n            x_min: 0,\n            x_max: 75,\n            y_min: -209.4142135623731,\n            y_max: 212,\n            ha: 421.4142135623731,\n            o: 'm 10 305 b 4 302 7 304 6 304 b 0 295 1 301 0 298 b 1 289 0 294 0 292 b 68 -10 1 288 68 160 b 1 -288 68 -95 50 -192 b 0 -292 0 -289 0 -291 b 4 -300 0 -295 1 -298 b 12 -301 7 -301 9 -302 b 17 -298 14 -301 16 -300 b 108 0 22 -292 108 -174 b 17 301 108 174 22 295 b 10 305 16 304 13 305 z',\n        },\n        noteheadParenthesisLeft: {\n            x_min: 0,\n            x_max: 75,\n            y_min: -212,\n            y_max: 209.4142135623731,\n            ha: 421.4142135623731,\n            o: 'm 98 -305 b 104 -302 101 -304 102 -304 b 108 -295 107 -301 108 -298 b 107 -289 108 -294 108 -292 b 40 10 107 -288 40 -160 b 107 288 40 95 58 192 b 108 292 108 289 108 291 b 104 300 108 295 107 298 b 96 301 101 301 99 302 b 91 298 94 301 92 300 b 0 0 86 292 0 174 b 91 -301 0 -174 86 -295 b 98 -305 92 -304 95 -305 z',\n        },\n        noteheadMoonBlack: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 0 180 l 0 0 b 223 -180 0 -99 99 -180 b 446 0 347 -180 446 -99 l 446 180 z',\n        },\n        noteheadTriangleLeftBlack: {\n            x_min: 0,\n            x_max: 339,\n            y_min: -136,\n            y_max: 122,\n            ha: 258,\n            o: 'm 0 176 l 0 -196 l 488 -196 z',\n        },\n        noteheadTriangleRightBlack: {\n            x_min: 0,\n            x_max: 339,\n            y_min: -136,\n            y_max: 122,\n            ha: 258,\n            o: 'm 488 176 l 0 -196 l 488 -196 z',\n        },\n        noteheadTriangleRoundDownBlack: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -136,\n            y_max: 122,\n            ha: 258,\n            o: 'm 226 -196 l 446 63 b 226 176 446 63 384 176 b 0 63 68 176 0 63 z',\n        },\n        augmentationDot: {\n            x_min: 0,\n            x_max: 100,\n            y_min: -50,\n            y_max: 50,\n            ha: 100,\n            o: 'm 0 0 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 b 72 72 144 40 112 72 b 0 0 32 72 0 40 z',\n        },\n        tremolo1: {\n            x_min: 0,\n            x_max: 290,\n            y_min: -93,\n            y_max: 96,\n            ha: 189,\n            o: 'm 0 48 l 0 -134 l 418 -43 l 418 138 z',\n        },\n        flag8thUp: {\n            x_min: 0,\n            x_max: 289.04376776750354,\n            y_min: -817,\n            y_max: 12,\n            ha: 829,\n            o: 'm 0 -327 b 12 -343 0 -331 1 -338 b 291 -600 73 -363 197 -441 b 359 -827 317 -645 359 -707 b 294 -1140 359 -930 331 -1037 b 289 -1162 291 -1149 288 -1156 b 297 -1175 289 -1168 291 -1172 b 304 -1176 300 -1176 302 -1176 b 327 -1161 314 -1176 321 -1171 b 416 -798 395 -1041 418 -888 b 416 -780 416 -791 416 -786 b 302 -458 409 -595 302 -458 b 131 -220 307 -458 170 -281 b 50 -50 78 -138 53 -56 b 36 6 49 -46 36 6 b 19 17 35 12 27 17 b 0 -1 9 17 0 9 z',\n        },\n        flag8thDown: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -12,\n            y_max: 817,\n            ha: 829,\n            o: 'm 0 1 b 19 -17 0 -9 9 -17 b 36 -6 26 -17 35 -12 b 50 50 36 -4 49 46 b 117 196 52 56 65 111 b 331 458 173 289 259 357 b 445 780 402 559 445 654 b 338 1161 445 912 415 1021 b 317 1176 334 1171 325 1176 b 310 1175 314 1176 311 1176 b 300 1158 302 1172 300 1166 b 304 1140 300 1153 301 1146 b 384 827 361 1007 384 930 b 317 600 384 707 343 645 b 12 343 223 441 72 363 b 0 327 1 338 0 331 z',\n        },\n        flag16thUp: {\n            x_min: 0,\n            x_max: 279,\n            y_min: -820,\n            y_max: 12,\n            ha: 832,\n            o: 'm 301 -681 b 148 -514 262 -631 219 -585 b 56 -372 92 -458 66 -409 b 52 -343 55 -364 53 -354 b 271 -510 125 -343 219 -442 b 340 -696 327 -583 340 -641 b 337 -739 340 -710 338 -724 b 301 -681 325 -716 312 -697 z m 0 -549 b 22 -563 0 -553 12 -559 b 258 -776 59 -576 171 -648 b 318 -950 307 -850 318 -901 b 317 -975 318 -959 318 -966 b 285 -1140 317 -1009 307 -1083 b 279 -1164 284 -1148 279 -1156 b 289 -1179 279 -1169 282 -1175 b 297 -1181 292 -1181 294 -1181 b 318 -1161 307 -1181 312 -1169 b 382 -962 344 -1120 382 -1043 b 374 -855 382 -920 379 -886 b 402 -678 389 -802 402 -749 b 333 -471 402 -603 382 -536 b 137 -228 265 -382 192 -307 b 42 0 82 -148 42 0 b 22 17 39 10 37 17 b 0 0 4 17 0 10 z',\n        },\n        flag16thDown: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -26,\n            y_max: 803,\n            ha: 829,\n            o: 'm 53 346 b 56 363 55 353 56 359 b 163 517 66 399 78 452 b 384 732 246 582 346 662 b 317 503 382 621 354 552 b 53 346 229 395 122 364 z m 0 -14 b 22 -37 0 -26 10 -37 b 43 -14 33 -37 40 -26 b 167 232 65 134 109 177 b 445 683 243 305 445 416 b 432 837 445 730 441 783 b 441 919 438 855 441 881 b 327 1149 441 1032 374 1112 b 304 1156 321 1153 312 1156 b 287 1152 298 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1135 b 382 930 344 1076 382 1027 b 374 876 382 912 380 893 l 373 871 b 373 871 373 871 373 871 b 327 789 366 842 350 815 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z',\n        },\n        flag32ndUp: {\n            x_min: 0,\n            x_max: 279,\n            y_min: -821,\n            y_max: 186,\n            ha: 1007,\n            o: 'm 301 -683 b 148 -516 262 -632 219 -588 b 56 -373 92 -459 66 -410 b 50 -343 55 -366 53 -354 b 271 -500 125 -343 219 -432 b 340 -687 327 -575 340 -632 b 337 -739 340 -704 338 -721 b 301 -683 325 -716 312 -698 z m 271 -259 b 340 -446 327 -333 340 -392 b 338 -469 340 -455 338 -462 b 333 -461 337 -467 334 -464 b 91 -192 265 -372 145 -271 b 50 -92 69 -160 58 -124 b 271 -259 124 -92 219 -192 z m 0 -550 b 22 -564 0 -554 12 -560 b 258 -778 59 -577 171 -649 b 318 -952 307 -851 318 -903 b 317 -976 318 -960 318 -968 b 285 -1142 317 -1011 307 -1084 b 279 -1165 284 -1149 279 -1158 b 289 -1181 279 -1171 282 -1176 b 297 -1182 292 -1182 294 -1182 b 318 -1162 307 -1182 312 -1171 b 382 -963 344 -1122 382 -1044 b 374 -857 382 -922 379 -887 b 402 -668 389 -802 402 -740 b 386 -563 402 -632 396 -596 b 402 -441 395 -526 402 -487 b 402 -428 402 -436 402 -432 b 333 -220 402 -353 382 -285 b 137 23 265 -131 192 -56 b 42 251 82 102 42 251 b 22 268 39 261 37 268 b 0 251 4 268 0 261 z',\n        },\n        flag32ndDown: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -216,\n            y_max: 803,\n            ha: 1019,\n            o: 'm 50 73 b 91 171 58 105 71 141 b 347 402 145 251 272 317 b 384 454 361 418 374 435 b 324 239 384 347 361 287 b 50 73 235 130 122 94 z m 163 517 b 366 693 248 589 327 642 b 382 716 372 700 377 708 b 383 693 383 708 383 700 b 314 505 383 621 359 562 b 53 343 258 436 179 390 b 56 363 55 351 56 359 b 163 517 66 400 81 449 z m 0 -288 b 22 -311 0 -298 10 -311 b 43 -288 33 -311 40 -300 b 167 -40 65 -138 109 -95 b 445 409 243 32 445 143 b 431 577 445 462 439 520 b 441 651 435 602 439 626 b 441 675 441 658 441 667 b 441 687 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 305 1156 321 1153 314 1156 b 287 1152 300 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1136 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z',\n        },\n        flag64thUp: {\n            x_min: 0,\n            x_max: 279,\n            y_min: -822,\n            y_max: 373,\n            ha: 1195,\n            o: 'm 333 -461 b 91 -192 265 -372 145 -271 b 50 -92 69 -161 58 -125 b 271 -251 125 -92 219 -183 b 340 -438 327 -324 340 -383 b 338 -469 340 -448 338 -459 b 333 -461 337 -467 334 -464 z m 301 -683 b 148 -517 262 -632 219 -588 b 56 -374 92 -461 66 -410 b 50 -343 55 -366 53 -356 b 271 -501 125 -343 219 -433 b 340 -688 327 -575 340 -634 b 337 -739 340 -706 338 -721 b 301 -683 325 -717 312 -698 z m 271 10 b 340 -176 327 -63 340 -121 b 337 -217 340 -190 338 -204 b 333 -212 336 -216 334 -213 b 91 65 265 -122 145 -16 b 48 177 66 101 53 143 l 50 177 b 271 10 124 177 217 78 z m 0 -552 b 22 -564 0 -554 12 -562 b 258 -778 59 -579 171 -649 b 318 -952 307 -851 317 -903 b 317 -976 318 -960 318 -968 b 285 -1142 317 -1012 307 -1084 b 279 -1165 284 -1149 279 -1158 b 289 -1181 279 -1172 282 -1178 b 297 -1184 292 -1182 295 -1184 b 318 -1164 307 -1182 312 -1172 b 382 -963 344 -1122 382 -1044 b 374 -857 382 -923 379 -887 b 402 -668 389 -804 402 -740 b 386 -563 402 -632 396 -596 b 402 -432 395 -523 402 -480 b 402 -418 402 -428 402 -423 b 383 -304 402 -379 396 -341 b 402 -170 393 -264 402 -222 b 402 -158 402 -166 402 -163 b 333 49 402 -84 382 -16 b 137 292 265 138 192 213 b 42 520 82 372 42 520 b 22 537 39 530 37 537 b 0 520 4 537 0 530 z',\n        },\n        flag64thDown: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -403,\n            y_max: 804,\n            ha: 1207,\n            o: 'm 52 -196 b 91 -102 59 -166 71 -131 b 347 128 145 -23 272 45 b 384 180 361 145 374 163 b 324 -30 384 76 361 16 b 52 -196 235 -140 124 -176 z m 163 517 b 366 693 248 589 327 644 b 382 717 372 701 377 708 b 383 693 383 708 383 701 b 314 505 383 621 359 562 b 53 343 258 438 179 390 b 56 363 55 351 56 359 b 163 517 66 400 81 449 z m 314 232 b 50 69 258 163 179 117 b 91 171 56 102 69 140 b 347 402 145 251 272 318 b 382 449 360 416 372 432 b 383 420 383 439 383 429 b 314 232 383 348 359 288 z m 0 -557 b 22 -580 0 -567 10 -580 b 43 -557 33 -580 40 -567 b 167 -310 65 -408 109 -364 b 445 140 243 -238 445 -125 b 431 307 445 192 439 249 b 441 377 436 331 439 354 b 441 406 441 387 441 397 b 441 418 441 410 441 413 b 423 546 441 464 432 507 b 441 651 432 582 438 618 b 441 675 441 660 441 667 b 441 688 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 305 1158 321 1153 314 1156 b 287 1152 300 1158 292 1156 b 279 1145 281 1151 279 1148 b 294 1129 279 1140 288 1136 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 563 z',\n        },\n        flag128thUp: {\n            x_min: 0,\n            x_max: 279,\n            y_min: -821,\n            y_max: 573,\n            ha: 1394,\n            o: 'm 0 -550 b 22 -563 0 -553 12 -560 b 258 -776 59 -576 171 -648 b 318 -950 307 -850 318 -901 b 317 -975 318 -959 318 -966 b 285 -1140 317 -1011 307 -1083 b 279 -1164 284 -1148 279 -1156 b 289 -1179 279 -1171 282 -1176 b 297 -1182 292 -1181 294 -1181 b 318 -1162 307 -1182 312 -1169 b 382 -962 344 -1120 382 -1043 b 374 -857 382 -922 379 -887 b 402 -668 389 -802 402 -740 b 383 -554 402 -629 396 -590 b 402 -399 396 -503 402 -452 b 382 -284 402 -359 396 -321 b 402 -125 396 -230 402 -180 b 383 -14 402 -86 396 -49 b 402 130 396 35 402 81 b 333 348 402 204 382 284 b 137 592 265 438 192 513 b 42 808 82 671 46 793 b 22 825 39 818 37 825 b 0 808 4 825 0 818 z m 271 310 b 340 111 328 235 340 170 b 338 73 340 98 338 86 b 333 81 336 76 334 79 b 91 357 265 170 145 276 b 48 469 66 393 53 435 l 50 469 b 271 310 124 469 217 377 z m 301 -681 b 148 -523 262 -631 219 -593 b 56 -383 92 -465 66 -420 b 49 -343 55 -374 52 -359 l 50 -343 b 271 -500 124 -343 217 -432 b 340 -688 327 -575 340 -634 b 337 -737 340 -706 338 -721 b 301 -681 325 -716 312 -697 z m 333 -461 b 91 -192 265 -372 145 -271 b 48 -73 66 -154 53 -111 l 48 -73 l 50 -73 b 271 -232 124 -73 217 -163 b 340 -419 327 -305 340 -364 b 337 -468 340 -435 338 -452 b 333 -461 336 -465 334 -464 z m 333 -192 b 91 84 265 -102 145 4 b 48 200 65 121 53 164 l 48 200 l 50 200 b 271 42 124 200 217 109 b 340 -147 327 -32 340 -92 b 337 -197 340 -164 338 -181 b 333 -192 336 -196 334 -194 z',\n        },\n        flag128thDown: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -591,\n            y_max: 803,\n            ha: 1394,\n            o: 'm 0 -828 b 22 -851 0 -838 10 -851 b 43 -828 33 -851 40 -840 b 167 -580 65 -678 109 -635 b 445 -131 243 -508 445 -397 b 431 36 445 -79 439 -22 b 441 108 436 60 439 85 b 441 137 441 117 441 127 b 441 147 441 140 441 144 b 423 275 441 193 432 236 b 441 377 433 310 438 344 b 441 406 441 387 441 396 b 441 418 441 410 441 413 b 423 546 441 464 432 507 b 441 649 432 582 438 616 b 441 675 441 658 441 667 b 441 687 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 304 1156 321 1153 312 1156 b 287 1152 298 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1135 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z m 314 -37 b 50 -200 258 -107 179 -153 b 91 -102 58 -168 71 -132 b 347 128 145 -23 272 45 b 382 176 360 143 372 160 b 383 151 383 167 383 160 b 314 -37 383 79 359 19 z m 314 232 b 50 69 258 163 179 117 b 91 171 56 101 69 138 b 347 402 145 251 272 317 b 382 449 360 416 372 432 b 383 420 383 439 383 429 b 314 232 383 347 359 288 z m 163 517 b 366 693 248 589 327 642 b 382 716 372 700 377 708 b 383 693 383 708 383 700 b 314 505 382 621 359 560 b 53 343 258 436 179 390 b 56 363 55 350 56 357 b 163 517 66 399 81 449 z m 52 -467 b 91 -372 59 -435 71 -402 b 347 -141 145 -292 272 -225 b 384 -89 361 -125 374 -108 b 324 -301 382 -194 361 -255 b 52 -467 235 -410 122 -446 z',\n        },\n        accidentalFlat: {\n            x_min: 0,\n            x_max: 203,\n            y_min: -176,\n            y_max: 453,\n            ha: 629,\n            o: 'm 289 114 b 173 223 281 170 246 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -251 30 -253 36 -252 b 216 -114 45 -248 138 -202 b 292 78 271 -52 292 19 b 289 114 292 91 291 102 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 b 190 58 190 66 190 62 z',\n        },\n        accidentalNatural: {\n            x_min: 0,\n            x_max: 171,\n            y_min: -323,\n            y_max: 325,\n            ha: 648,\n            o: 'm 239 264 b 228 268 236 266 232 268 b 222 266 226 268 223 266 l 40 216 l 40 468 l 0 468 l 0 -245 b 20 -264 0 -256 9 -264 b 26 -264 22 -264 24 -264 l 207 -213 l 207 -465 l 246 -465 b 246 248 246 -226 246 1 b 239 264 246 253 243 261 z m 40 -140 l 40 96 l 207 144 l 207 -94 z',\n        },\n        accidentalSharp: {\n            x_min: 0,\n            x_max: 244,\n            y_min: -333,\n            y_max: 334,\n            ha: 667,\n            o: 'm 336 151 b 351 171 344 153 351 163 l 351 256 b 331 276 351 268 343 276 b 328 276 330 276 330 276 l 281 266 l 281 481 l 240 481 l 240 258 l 112 232 l 112 435 l 72 435 l 72 223 l 16 212 b 0 192 7 210 0 200 l 0 189 l 0 105 l 0 108 b 20 88 0 96 9 88 b 24 88 22 88 23 88 l 72 98 l 72 -140 l 16 -151 b 0 -171 7 -153 0 -163 l 0 -255 b 20 -275 0 -266 9 -275 b 24 -275 22 -275 23 -275 l 72 -265 l 72 -480 l 112 -480 l 112 -256 l 240 -230 l 240 -433 l 281 -433 l 281 -222 l 336 -212 b 351 -192 344 -210 351 -200 l 351 -107 b 331 -86 351 -95 343 -86 b 328 -86 330 -86 330 -86 l 281 -96 l 281 141 z m 112 107 l 240 132 l 240 -105 l 112 -132 z',\n        },\n        accidentalDoubleSharp: {\n            x_min: 0,\n            x_max: 275,\n            y_min: -137,\n            y_max: 138,\n            ha: 275,\n            o: 'm 360 73 l 376 73 b 396 94 387 73 396 82 l 396 179 b 376 199 396 190 387 199 l 291 199 b 271 179 279 199 271 190 l 271 161 l 271 102 l 200 30 l 196 30 l 124 102 l 124 179 b 105 199 124 190 117 199 l 20 199 b 0 179 9 199 0 190 l 0 94 b 20 73 0 82 9 73 l 35 73 l 36 73 l 96 73 l 167 3 l 167 -1 l 96 -73 l 36 -73 l 35 -73 l 20 -73 b 0 -92 9 -73 0 -81 l 0 -177 b 20 -197 0 -189 9 -197 l 105 -197 b 124 -177 117 -197 124 -189 l 124 -101 l 196 -32 l 200 -32 l 271 -101 l 271 -161 l 271 -163 l 271 -177 b 291 -197 271 -189 279 -197 l 376 -197 b 396 -177 387 -197 396 -189 l 396 -92 b 376 -73 396 -81 387 -73 l 361 -73 l 360 -73 l 300 -73 l 228 -1 l 228 1 l 300 73 z',\n        },\n        accidentalDoubleFlat: {\n            x_min: 0,\n            x_max: 371,\n            y_min: -176,\n            y_max: 453,\n            ha: 629,\n            o: 'm 531 115 b 415 223 523 171 488 223 b 294 171 343 223 301 180 l 300 632 b 279 652 300 644 291 652 l 262 652 b 242 632 251 652 242 644 l 246 199 b 173 223 228 213 204 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -249 30 -253 36 -251 b 216 -114 45 -246 138 -202 b 248 -69 226 -102 239 -82 l 249 -233 b 269 -253 249 -245 258 -253 b 281 -249 272 -253 278 -251 b 458 -112 287 -246 380 -200 b 534 79 513 -50 534 20 b 531 115 534 92 533 104 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 b 190 58 190 66 190 62 z m 432 58 b 390 -85 432 36 426 -30 b 289 -183 366 -122 317 -161 l 294 98 b 376 153 297 111 318 153 b 432 73 428 153 432 104 b 432 58 432 66 432 62 z',\n        },\n        accidentalParensLeft: {\n            x_min: 0,\n            x_max: 75,\n            y_min: -212,\n            y_max: 209.4142135623731,\n            ha: 421.4142135623731,\n            o: 'm 98 -305 b 104 -302 101 -304 102 -304 b 108 -295 107 -301 108 -298 b 107 -289 108 -294 108 -292 b 40 10 107 -288 40 -160 b 107 288 40 95 58 192 b 108 292 108 289 108 291 b 104 300 108 295 107 298 b 96 301 101 301 99 302 b 91 298 94 301 92 300 b 0 0 86 292 0 174 b 91 -301 0 -174 86 -295 b 98 -305 92 -304 95 -305 z',\n        },\n        accidentalParensRight: {\n            x_min: 0,\n            x_max: 75,\n            y_min: -209.4142135623731,\n            y_max: 212,\n            ha: 421.4142135623731,\n            o: 'm 10 305 b 4 302 7 304 6 304 b 0 295 1 301 0 298 b 1 289 0 294 0 292 b 68 -10 1 288 68 160 b 1 -288 68 -95 50 -192 b 0 -292 0 -289 0 -291 b 4 -300 0 -295 1 -298 b 12 -301 7 -301 9 -302 b 17 -298 14 -301 16 -300 b 108 0 22 -292 108 -174 b 17 301 108 174 22 295 b 10 305 16 304 13 305 z',\n        },\n        accidentalQuarterToneFlatStein: {\n            x_min: 0,\n            x_max: 193,\n            y_min: -176,\n            y_max: 452,\n            ha: 628,\n            o: 'm 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 b 92 75 92 62 92 68 b 148 154 92 105 96 154 z',\n        },\n        accidentalThreeQuarterTonesFlatZimmermann: {\n            x_min: 0,\n            x_max: 422,\n            y_min: -176,\n            y_max: 452,\n            ha: 628,\n            o: 'm 608 84 b 482 217 608 173 554 217 b 376 174 416 217 384 186 l 379 632 b 360 651 379 642 370 651 l 348 651 b 330 632 338 651 330 642 l 336 -235 b 354 -253 336 -245 344 -253 b 363 -249 359 -253 360 -251 b 501 -145 363 -249 442 -202 b 608 84 543 -105 608 -26 z m 459 154 b 516 75 511 154 516 105 b 516 58 516 68 516 62 b 474 -72 516 36 510 -17 b 373 -179 448 -111 400 -156 l 374 107 b 376 102 374 102 376 99 b 459 154 376 115 396 154 z m 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 b 92 75 92 62 92 68 b 148 154 92 105 96 154 z',\n        },\n        accidentalQuarterToneSharpStein: {\n            x_min: 0,\n            x_max: 180,\n            y_min: -316,\n            y_max: 320,\n            ha: 636,\n            o: 'm 243 144 b 259 164 252 145 259 156 l 259 249 b 239 269 259 261 251 269 b 235 268 238 269 236 268 l 150 251 l 150 461 l 109 461 l 109 242 l 16 222 b 0 203 7 220 0 212 l 0 120 b 20 99 0 108 9 99 b 24 99 22 99 23 99 l 109 117 l 109 -121 l 16 -141 b 0 -160 7 -143 0 -151 l 0 -243 b 20 -264 0 -255 9 -264 b 24 -264 22 -264 23 -264 l 109 -246 l 109 -455 l 150 -455 l 150 -238 l 243 -219 b 259 -199 252 -217 259 -207 l 259 -114 b 239 -95 259 -102 251 -95 b 235 -95 238 -95 236 -95 l 150 -112 l 150 125 z',\n        },\n        accidentalThreeQuarterTonesSharpStein: {\n            x_min: 0,\n            x_max: 290,\n            y_min: -328,\n            y_max: 339,\n            ha: 667,\n            o: 'm 400 158 b 416 179 409 160 416 170 l 416 264 b 397 284 416 275 409 284 b 393 284 396 284 395 284 l 348 274 l 348 488 l 308 488 l 308 265 l 223 248 l 223 465 l 184 465 l 184 240 l 108 225 l 108 442 l 69 442 l 69 216 l 16 204 b 0 186 7 203 0 194 l 0 102 b 20 82 0 91 9 82 b 24 82 22 82 23 82 l 69 92 l 69 -147 l 16 -158 b 0 -177 7 -160 0 -168 l 0 -261 b 20 -281 0 -272 9 -281 b 24 -281 22 -281 23 -281 l 69 -272 l 69 -472 l 108 -472 l 108 -264 l 184 -248 l 184 -451 l 223 -451 l 223 -240 l 308 -223 l 308 -426 l 348 -426 l 348 -215 l 400 -204 b 418 -184 409 -203 418 -193 l 418 -99 b 397 -79 418 -88 409 -79 b 393 -79 396 -79 395 -79 l 348 -89 l 348 148 z m 184 -122 l 108 -138 l 108 99 l 184 115 z m 223 122 l 308 140 l 308 -98 l 223 -115 z',\n        },\n        accidentalBuyukMucennebFlat: {\n            x_min: 0,\n            x_max: 277,\n            y_min: -176,\n            y_max: 454,\n            ha: 630,\n            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 160 317 l 336 419 l 336 482 l 161 380 l 161 488 l 336 590 l 336 654 l 163 552 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 108 520 l 0 456 l 0 393 l 108 456 l 109 350 l 0 285 l 0 222 l 109 287 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 141 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 154 -184 230 -122 181 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 b 297 58 297 66 297 62 z',\n        },\n        accidentalBakiyeFlat: {\n            x_min: 0,\n            x_max: 277,\n            y_min: -176,\n            y_max: 454,\n            ha: 630,\n            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 161 348 l 336 452 l 336 516 l 161 413 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 109 382 l 0 318 l 0 255 l 109 318 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 143 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 156 -184 230 -122 183 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 b 297 58 297 66 297 62 z',\n        },\n        accidentalKucukMucennebSharp: {\n            x_min: 0,\n            x_max: 348,\n            y_min: -316,\n            y_max: 318,\n            ha: 634,\n            o: 'm 494 121 b 482 125 491 124 487 125 b 478 124 481 125 480 124 l 269 68 l 269 127 l 412 164 b 425 181 420 167 425 173 l 425 266 b 418 282 425 272 422 279 b 406 285 415 285 410 285 b 402 285 405 285 403 285 l 269 249 l 269 458 l 232 458 l 232 239 l 89 200 b 76 181 81 197 76 190 l 76 98 b 84 84 76 92 79 86 b 95 79 86 81 91 79 b 99 81 96 79 98 81 l 232 115 l 232 58 l 14 -3 b 0 -20 6 -6 0 -12 l 0 -104 b 7 -118 0 -109 3 -115 b 19 -122 10 -121 14 -122 b 23 -122 20 -122 22 -122 l 232 -66 l 232 -124 l 89 -163 b 76 -180 81 -166 76 -171 l 76 -264 b 84 -279 76 -269 79 -276 b 95 -282 86 -282 91 -282 b 99 -282 96 -282 98 -282 l 232 -246 l 232 -455 l 269 -455 l 269 -236 l 412 -199 b 425 -180 420 -196 425 -189 l 425 -95 b 418 -81 425 -89 422 -84 b 406 -76 415 -78 410 -76 b 402 -78 405 -76 403 -78 l 269 -114 l 269 -55 l 487 4 b 501 22 495 7 501 13 l 501 107 b 494 121 501 112 498 118 z',\n        },\n        articAccentAbove: {\n            x_min: 0,\n            x_max: 361,\n            y_min: 0,\n            y_max: 235,\n            ha: 235,\n            o: 'm 26 337 b 20 338 24 337 22 338 b 0 318 9 338 0 330 l 0 285 b 14 266 0 276 7 269 l 323 170 l 14 72 b 0 53 7 69 0 62 l 0 20 b 20 0 0 9 9 0 b 26 1 22 0 24 1 l 505 150 b 520 170 513 153 520 161 b 505 189 520 179 513 186 z',\n        },\n        articAccentBelow: {\n            x_min: 0,\n            x_max: 361,\n            y_min: -235,\n            y_max: 0,\n            ha: 235,\n            o: 'm 26 -1 b 20 0 24 -1 22 0 b 0 -20 9 0 0 -9 l 0 -53 b 14 -72 0 -62 7 -69 l 323 -168 l 14 -266 b 0 -285 7 -269 0 -276 l 0 -318 b 20 -338 0 -330 9 -338 b 26 -337 22 -338 24 -337 l 505 -189 b 520 -168 513 -186 520 -177 b 505 -150 520 -160 513 -153 z',\n        },\n        articTenutoAbove: {\n            x_min: 0,\n            x_max: 316,\n            y_min: 0,\n            y_max: 46,\n            ha: 46,\n            o: 'm 20 66 b 0 46 9 66 0 58 l 0 20 b 20 0 0 9 9 0 l 435 0 b 455 20 446 0 455 9 l 455 46 b 435 66 455 58 446 66 z',\n        },\n        articTenutoBelow: {\n            x_min: 0,\n            x_max: 316,\n            y_min: -46,\n            y_max: 0,\n            ha: 46,\n            o: 'm 20 0 b 0 -20 9 0 0 -9 l 0 -46 b 20 -66 0 -58 9 -66 l 435 -66 b 455 -46 446 -66 455 -58 l 455 -20 b 435 0 455 -9 446 0 z',\n        },\n        articStaccatoAbove: {\n            x_min: -0.25,\n            x_max: 78.25,\n            y_min: -0.25,\n            y_max: 78,\n            ha: 78.25,\n            o: 'm 16 16 b 96 16 39 -6 73 -6 b 96 95 118 39 118 73 b 16 95 73 118 39 118 b 16 16 -6 73 -6 39 z',\n        },\n        articStaccatoBelow: {\n            x_min: -0.25,\n            x_max: 78.25,\n            y_min: -78.25,\n            y_max: 0,\n            ha: 78.25,\n            o: 'm 16 -96 b 96 -96 39 -118 73 -118 b 96 -17 118 -73 118 -39 b 16 -17 73 6 39 6 b 16 -96 -6 -39 -6 -73 z',\n        },\n        articStaccatissimoAbove: {\n            x_min: 0,\n            x_max: 127,\n            y_min: 0,\n            y_max: 248,\n            ha: 248,\n            o: 'm 163 357 b 150 353 154 357 150 353 l 99 300 b 92 295 96 297 95 295 b 85 300 89 295 88 297 l 35 353 b 22 357 35 353 30 357 b 0 338 13 357 0 351 b 73 22 0 323 73 22 b 92 0 75 16 78 0 b 111 22 107 0 109 16 b 183 338 111 22 183 323 b 163 357 183 351 171 357 z',\n        },\n        articStaccatissimoBelow: {\n            x_min: 0,\n            x_max: 127,\n            y_min: -248,\n            y_max: 0,\n            ha: 248,\n            o: 'm 20 -357 b 33 -353 29 -357 33 -353 l 84 -300 b 91 -295 86 -297 88 -295 b 98 -300 94 -295 95 -297 l 148 -353 b 161 -357 148 -353 153 -357 b 183 -338 170 -357 183 -351 b 109 -22 183 -323 109 -22 b 91 0 108 -16 105 0 b 72 -22 76 0 73 -16 b 0 -338 72 -22 0 -323 b 20 -357 0 -351 12 -357 z',\n        },\n        articMarcatoAbove: {\n            x_min: 1,\n            x_max: 296,\n            y_min: 0,\n            y_max: 253,\n            ha: 253,\n            o: 'm 36 10 l 173 239 l 298 10 b 317 0 301 4 310 0 l 408 0 b 426 20 419 0 426 9 b 425 30 426 23 426 27 l 230 356 b 213 364 226 361 222 363 b 196 356 207 364 199 361 l 1 30 z',\n        },\n        articMarcatoBelow: {\n            x_min: 0,\n            x_max: 295,\n            y_min: -253,\n            y_max: 0,\n            ha: 253,\n            o: 'm 390 -10 l 253 -239 l 128 -10 b 109 0 125 -4 117 0 l 19 0 b 0 -20 7 0 0 -9 b 1 -30 0 -23 0 -27 l 196 -356 b 213 -364 200 -361 204 -363 b 230 -356 219 -364 228 -361 l 425 -30 z',\n        },\n        fermataAbove: {\n            x_min: 0,\n            x_max: 622,\n            y_min: 0,\n            y_max: 368,\n            ha: 368,\n            o: 'm 778 374 b 448 530 642 521 523 530 b 120 374 373 530 255 521 b 0 65 49 297 0 143 b 20 19 0 37 6 19 b 161 265 60 19 40 143 b 445 373 268 372 410 373 b 448 373 446 373 446 373 b 451 373 449 373 449 373 b 734 265 485 373 628 372 b 876 19 855 143 835 19 b 896 65 890 19 896 36 b 778 374 896 143 848 298 z m 348 99 b 448 0 348 45 393 0 b 547 99 503 0 547 45 b 448 199 547 154 503 199 b 348 99 393 199 348 154 z',\n        },\n        fermataBelow: {\n            x_min: 0,\n            x_max: 622,\n            y_min: -368,\n            y_max: 0,\n            ha: 368,\n            o: 'm 778 -374 b 896 -65 848 -298 896 -143 b 876 -19 896 -36 890 -19 b 734 -265 835 -19 855 -143 b 451 -373 628 -372 485 -373 b 448 -373 449 -373 449 -373 b 445 -373 446 -373 446 -373 b 161 -265 410 -373 268 -372 b 20 -19 40 -143 60 -19 b 0 -65 6 -19 0 -37 b 120 -374 0 -143 49 -297 b 448 -530 255 -521 373 -530 b 778 -374 523 -530 642 -521 z m 348 -99 b 448 -199 348 -154 393 -199 b 547 -99 503 -199 547 -154 b 448 0 547 -45 503 0 b 348 -99 393 0 348 -45 z',\n        },\n        fermataLongAbove: {\n            x_min: 0,\n            x_max: 623,\n            y_min: 0,\n            y_max: 368,\n            ha: 368,\n            o: 'm 40 0 l 40 399 l 858 399 l 858 0 l 897 0 l 897 510 b 877 530 897 521 888 530 l 20 530 b 0 510 9 530 0 521 l 0 0 z m 350 148 b 449 49 350 94 395 49 b 547 148 504 49 547 94 b 449 248 547 203 504 248 b 350 148 395 248 350 203 z',\n        },\n        fermataLongBelow: {\n            x_min: 0,\n            x_max: 623,\n            y_min: -368,\n            y_max: 0,\n            ha: 368,\n            o: 'm 0 -510 b 20 -530 0 -521 9 -530 l 877 -530 b 897 -510 888 -530 897 -521 l 897 0 l 858 0 l 858 -399 l 40 -399 l 40 0 l 0 0 z m 350 -148 b 449 -248 350 -203 395 -248 b 547 -148 504 -248 547 -203 b 449 -49 547 -94 504 -49 b 350 -148 395 -49 350 -94 z',\n        },\n        fermataVeryLongAbove: {\n            x_min: 0,\n            x_max: 842,\n            y_min: 0,\n            y_max: 549,\n            ha: 549,\n            o: 'm 276 0 l 276 399 l 936 399 l 936 0 l 976 0 l 976 510 b 956 530 976 521 968 530 l 256 530 b 236 510 245 530 236 521 l 236 0 z m 507 148 b 606 49 507 94 552 49 b 706 148 661 49 706 94 b 606 248 706 203 661 248 b 507 148 552 248 507 203 z m 40 0 l 40 661 l 1172 661 l 1172 0 l 1212 0 l 1212 772 b 1192 791 1212 783 1204 791 l 20 791 b 0 772 9 791 0 783 l 0 0 z',\n        },\n        fermataVeryLongBelow: {\n            x_min: 0,\n            x_max: 842,\n            y_min: -549,\n            y_max: 0,\n            ha: 549,\n            o: 'm 236 -510 b 256 -530 236 -521 245 -530 l 956 -530 b 976 -510 968 -530 976 -521 l 976 0 l 936 0 l 936 -399 l 276 -399 l 276 0 l 236 0 z m 507 -148 b 606 -248 507 -203 552 -248 b 706 -148 661 -248 706 -203 b 606 -49 706 -94 661 -49 b 507 -148 552 -49 507 -94 z m 0 -772 b 20 -791 0 -783 9 -791 l 1192 -791 b 1212 -772 1204 -791 1212 -783 l 1212 0 l 1172 0 l 1172 -661 l 40 -661 l 40 0 l 0 0 z',\n        },\n        fermataShortAbove: {\n            x_min: 0,\n            x_max: 642,\n            y_min: 0,\n            y_max: 454,\n            ha: 454,\n            o: 'm 363 148 b 462 49 363 94 408 49 b 562 148 517 49 562 94 b 462 248 562 203 517 248 b 363 148 408 248 363 203 z m 477 645 b 461 654 474 649 467 654 b 445 645 455 654 448 649 l 4 32 b 0 20 3 29 0 23 b 20 0 0 9 9 0 l 82 0 b 98 9 88 0 95 4 l 461 514 l 827 9 b 842 0 829 4 837 0 l 904 0 b 924 20 916 0 924 9 b 920 32 924 23 922 29 z',\n        },\n        fermataShortBelow: {\n            x_min: 0,\n            x_max: 642,\n            y_min: -454,\n            y_max: 0,\n            ha: 454,\n            o: 'm 363 -148 b 462 -248 363 -203 408 -248 b 562 -148 517 -248 562 -203 b 462 -49 562 -94 517 -49 b 363 -148 408 -49 363 -94 z m 920 -32 b 924 -20 922 -29 924 -23 b 904 0 924 -9 916 0 l 842 0 b 827 -9 837 0 829 -4 l 461 -514 l 98 -9 b 82 0 95 -4 88 0 l 20 0 b 0 -20 9 0 0 -9 b 4 -32 0 -23 3 -29 l 445 -645 b 461 -654 448 -649 455 -654 b 477 -645 467 -654 474 -649 z',\n        },\n        breathMarkComma: {\n            x_min: 0,\n            x_max: 191,\n            y_min: 0,\n            y_max: 321,\n            ha: 321,\n            o: 'm 82 0 b 275 285 215 92 275 183 b 115 462 275 396 212 462 b 0 356 46 462 0 413 b 115 246 0 294 53 246 b 181 258 157 246 177 256 b 192 261 184 259 189 261 b 199 259 194 261 196 261 b 203 245 202 258 203 253 b 48 43 203 183 147 112 z',\n        },\n        caesura: {\n            x_min: 0,\n            x_max: 380,\n            y_min: 0,\n            y_max: 490,\n            ha: 490,\n            o: 'm 285 706 b 285 706 285 706 285 706 b 271 696 279 706 274 701 l 1 22 b 0 16 0 20 0 17 b 16 0 0 7 7 0 l 50 0 b 65 10 56 0 62 4 l 334 684 b 336 690 334 685 336 688 b 320 706 336 698 328 706 z m 213 22 b 212 16 213 20 212 17 b 228 0 212 7 219 0 l 262 0 b 276 10 268 0 274 4 l 546 684 b 547 690 547 685 547 688 b 531 706 547 698 540 706 l 497 706 b 482 696 491 706 485 701 z',\n        },\n        caesuraCurved: {\n            x_min: 0,\n            x_max: 368,\n            y_min: 0,\n            y_max: 491,\n            ha: 491,\n            o: 'm 262 707 b 245 693 253 707 246 701 b 1 26 233 603 177 348 b 0 17 0 23 0 20 b 16 0 0 9 6 0 b 30 7 22 0 27 3 b 318 687 259 341 304 602 b 318 690 318 688 318 688 b 301 707 318 698 310 707 z m 474 707 b 458 693 465 707 459 701 b 213 26 446 603 389 348 b 212 19 212 23 212 20 b 229 0 212 9 219 0 b 243 7 235 0 240 3 b 530 687 472 341 516 602 b 530 690 530 688 530 688 b 514 707 530 698 523 707 z',\n        },\n        restMaxima: {\n            x_min: 0,\n            x_max: 450,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 158 -360 b 180 -338 170 -360 180 -350 l 180 338 b 158 360 180 350 170 360 l 22 360 b 0 338 9 360 0 350 l 0 -338 b 22 -360 0 -350 9 -360 z m 626 -360 b 648 -338 638 -360 648 -350 l 648 338 b 626 360 648 350 638 360 l 490 360 b 468 338 477 360 468 350 l 468 -338 b 490 -360 468 -350 477 -360 z',\n        },\n        restDoubleWhole: {\n            x_min: 0,\n            x_max: 125,\n            y_min: -11,\n            y_max: 262,\n            ha: 273,\n            o: 'm 158 -16 b 180 6 171 -16 180 -6 l 180 356 b 158 377 180 367 171 377 l 22 377 b 0 356 10 377 0 367 l 0 6 b 22 -16 0 -6 10 -16 z',\n        },\n        restWhole: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -131,\n            y_max: 5,\n            ha: 136,\n            o: 'm 20 7 b 0 -13 9 7 0 -1 l 0 -168 b 20 -189 0 -180 9 -189 l 448 -189 b 468 -168 459 -189 468 -180 l 468 -13 b 448 7 468 -1 459 7 z',\n        },\n        restWholeLegerLine: {\n            x_min: -139,\n            x_max: 464,\n            y_min: -122,\n            y_max: 14,\n            ha: 136,\n            o: 'm 449 20 l 19 20 l -200 20 l -200 -20 l 0 -20 l 0 -156 b 19 -176 0 -167 7 -176 l 449 -176 b 468 -156 461 -176 468 -167 l 468 -20 l 668 -20 l 668 20 z',\n        },\n        restHalf: {\n            x_min: 0,\n            x_max: 325,\n            y_min: -4,\n            y_max: 132,\n            ha: 136,\n            o: 'm 0 14 b 20 -6 0 -6 0 -6 l 448 -6 b 468 14 468 -6 468 -6 l 468 170 b 448 190 468 190 468 190 l 20 190 b 0 170 0 190 0 190 z',\n        },\n        restHalfLegerLine: {\n            x_min: -139,\n            x_max: 464,\n            y_min: -14,\n            y_max: 122,\n            ha: 136,\n            o: 'm 668 20 l 468 20 l 468 156 b 449 176 468 167 461 176 l 19 176 b 0 156 7 176 0 167 l 0 20 l -200 20 l -200 -20 l 19 -20 l 449 -20 l 668 -20 z',\n        },\n        restQuarter: {\n            x_min: 0,\n            x_max: 235,\n            y_min: -331,\n            y_max: 401,\n            ha: 732,\n            o: 'm 331 -239 b 323 -229 330 -238 327 -235 l 157 -24 b 154 -16 156 -23 154 -19 b 157 -3 154 -12 156 -6 l 304 219 b 307 229 305 222 307 226 l 307 242 b 302 253 307 246 305 251 l 69 569 b 55 577 69 569 63 577 b 43 573 50 577 48 576 b 36 559 37 569 36 563 b 40 543 36 550 40 543 l 150 393 b 154 376 153 389 154 383 b 150 359 154 370 153 363 l 4 137 b 1 125 3 134 1 128 l 1 112 b 6 101 1 108 3 104 l 167 -99 b 131 -95 161 -98 148 -95 b 49 -124 107 -95 75 -101 b 0 -229 17 -153 0 -193 b 16 -285 0 -249 4 -269 b 154 -468 46 -331 154 -468 b 171 -477 154 -468 161 -477 b 180 -474 174 -477 177 -477 b 190 -456 187 -468 190 -462 b 186 -444 190 -451 187 -446 b 135 -353 181 -436 135 -353 b 125 -307 135 -353 125 -333 b 150 -246 125 -288 131 -265 b 206 -223 167 -229 187 -223 b 252 -236 225 -223 240 -229 l 308 -272 b 320 -275 308 -272 314 -275 b 334 -268 325 -275 330 -274 b 338 -255 337 -262 338 -259 b 334 -243 338 -251 337 -248 z',\n        },\n        rest8th: {\n            x_min: 0,\n            x_max: 276,\n            y_min: -255,\n            y_max: 204,\n            ha: 459,\n            o: 'm 384 292 b 379 294 383 292 380 294 b 360 282 370 294 363 289 b 245 141 354 274 310 189 b 180 112 226 127 203 117 b 206 181 196 131 206 154 b 104 284 206 238 160 284 b 0 181 46 284 0 238 b 65 85 0 137 27 101 b 144 68 86 75 115 68 b 269 109 186 68 230 81 b 320 157 287 122 304 140 l 156 -356 l 194 -367 l 396 268 b 397 275 397 269 397 272 b 384 292 397 282 393 288 z',\n        },\n        rest16th: {\n            x_min: 1,\n            x_max: 344,\n            y_min: -507,\n            y_max: 204,\n            ha: 711,\n            o: 'm 494 268 b 495 275 495 271 495 272 b 482 292 495 282 491 289 b 475 294 480 294 477 294 b 456 282 467 294 461 289 b 285 115 422 213 364 135 b 310 184 302 135 310 158 b 203 284 310 240 259 284 b 104 177 145 281 104 233 b 171 84 105 134 134 98 b 252 69 197 72 225 69 b 423 164 324 72 380 108 l 423 164 l 359 -65 b 183 -245 338 -132 256 -226 b 207 -176 199 -225 207 -200 b 102 -76 207 -118 158 -76 b 1 -183 45 -76 1 -125 b 69 -275 1 -226 32 -262 b 150 -289 96 -287 121 -289 b 321 -194 222 -287 278 -251 l 174 -720 l 213 -730 z',\n        },\n        rest32nd: {\n            x_min: 0,\n            x_max: 391,\n            y_min: -507,\n            y_max: 460,\n            ha: 967,\n            o: 'm 217 71 b 408 171 348 71 402 161 l 354 -46 b 184 -240 323 -121 268 -217 b 204 -171 200 -220 204 -197 b 102 -76 204 -114 158 -76 b 0 -177 46 -76 0 -120 b 140 -288 0 -252 63 -288 b 320 -186 216 -288 276 -246 l 189 -721 l 228 -730 l 562 638 b 563 644 563 639 563 642 b 549 661 563 652 557 658 b 543 662 547 662 544 662 b 524 649 534 662 528 657 b 361 487 497 589 431 504 b 383 556 379 508 383 530 b 282 652 383 611 338 652 b 179 549 226 652 179 609 b 249 451 179 505 210 464 b 311 439 268 444 288 441 b 330 441 317 439 323 439 b 498 541 400 445 458 485 l 442 310 b 271 117 413 238 351 137 b 292 186 288 138 292 160 b 189 282 292 243 245 282 b 88 180 132 282 88 238 b 217 71 88 112 153 71 z',\n        },\n        rest64th: {\n            x_min: 0,\n            x_max: 423,\n            y_min: -758,\n            y_max: 464,\n            ha: 1222,\n            o: 'm 207 -1083 l 246 -1092 b 608 644 282 -919 605 634 b 609 649 608 647 609 648 b 595 667 609 658 603 665 b 589 668 593 668 592 668 b 569 654 577 668 575 664 b 474 521 563 644 530 573 b 412 487 456 505 435 494 b 432 546 425 503 432 526 b 328 649 432 606 382 649 b 226 546 275 649 226 608 b 360 438 226 465 300 438 b 501 492 419 438 474 465 b 546 546 527 518 533 526 l 547 547 l 500 323 b 399 161 491 300 452 209 b 337 125 382 144 360 132 b 357 184 350 143 357 134 b 253 288 357 235 317 288 b 151 187 190 288 151 236 b 285 76 151 138 183 76 b 471 184 412 76 465 173 l 423 -45 b 324 -204 413 -69 374 -158 b 262 -240 305 -222 284 -233 b 281 -180 274 -223 281 -212 b 177 -78 281 -147 258 -78 b 75 -180 98 -78 75 -153 b 209 -289 75 -207 88 -289 b 395 -181 330 -289 389 -193 l 350 -397 b 248 -564 337 -449 285 -530 b 186 -599 229 -580 207 -592 b 204 -540 197 -583 204 -563 b 102 -438 204 -501 174 -438 b 0 -540 29 -438 0 -501 b 132 -648 0 -579 24 -648 b 320 -540 266 -648 315 -552 z',\n        },\n        rest128th: {\n            x_min: -1,\n            x_max: 475,\n            y_min: -759,\n            y_max: 717,\n            ha: 1476,\n            o: 'm 677 1028 b 664 1032 672 1031 667 1032 b 644 1018 654 1032 649 1028 b 549 886 638 1008 605 937 b 487 851 531 870 510 858 b 507 910 500 868 507 890 b 403 1014 507 971 456 1014 b 301 910 350 1014 301 972 b 435 802 301 829 374 802 b 576 857 494 802 549 829 b 621 910 602 883 608 890 l 622 912 l 575 687 b 474 526 566 664 527 573 b 412 490 456 508 435 497 b 432 549 425 507 432 498 b 328 652 432 599 392 652 b 226 552 265 652 226 600 b 360 441 226 503 258 441 b 546 549 487 441 540 537 l 498 320 b 399 160 488 295 449 207 b 337 125 380 143 359 131 b 356 184 348 141 356 153 b 252 287 356 217 333 287 b 150 184 173 287 150 212 b 284 76 150 157 163 76 b 469 183 405 76 464 171 l 425 -33 b 323 -200 412 -85 360 -166 b 261 -235 304 -216 282 -228 b 279 -176 272 -219 279 -199 b 177 -72 279 -137 249 -72 b 75 -176 104 -72 75 -137 b 207 -284 75 -215 99 -284 b 395 -176 341 -284 390 -187 l 347 -409 b 248 -566 330 -461 282 -533 b 186 -600 229 -582 207 -593 b 204 -541 197 -583 204 -564 b 102 -438 204 -501 174 -438 b -1 -541 29 -438 -1 -503 b 132 -649 -1 -580 24 -649 b 318 -546 256 -649 307 -567 l 206 -1084 l 245 -1093 b 683 1008 281 -920 680 996 b 684 1015 683 1009 684 1014 b 677 1028 684 1020 683 1024 z',\n        },\n        dynamicPiano: {\n            x_min: -95,\n            x_max: 317,\n            y_min: -163,\n            y_max: 263,\n            ha: 426,\n            o: 'm 186 -235 l 186 -206 l 78 -206 l 161 26 l 166 16 b 229 -29 166 16 180 -16 b 256 -32 238 -32 248 -32 b 445 166 336 -32 415 49 b 456 246 454 197 456 223 b 374 373 456 343 396 367 b 356 376 369 374 361 376 b 242 314 311 376 266 338 l 238 310 l 235 315 b 154 377 235 315 204 370 b 138 379 148 377 144 379 b 0 226 91 379 42 346 l 26 213 b 63 301 32 232 46 278 b 102 328 72 314 89 325 b 108 328 104 328 107 328 b 120 325 112 328 117 327 b 127 304 125 321 127 314 b 94 192 127 269 101 206 l -49 -206 l -137 -206 l -137 -235 z m 226 17 b 215 19 223 17 217 17 b 187 81 193 27 187 53 b 204 180 187 125 203 177 b 297 317 217 235 259 295 b 324 325 307 323 315 325 b 336 324 328 325 333 325 b 350 311 341 323 347 317 b 356 278 354 302 356 291 b 333 161 356 239 341 187 b 242 20 314 105 278 37 b 226 17 238 17 230 17 z',\n        },\n        dynamicMezzo: {\n            x_min: -7,\n            x_max: 374,\n            y_min: -2,\n            y_max: 251,\n            ha: 253,\n            o: 'm 488 63 b 467 48 481 50 474 48 b 459 49 464 48 462 48 b 449 65 452 52 449 58 b 461 112 449 76 455 94 b 474 157 464 121 471 150 b 492 281 482 183 492 242 b 491 301 492 288 492 295 b 436 359 484 340 467 359 b 340 307 399 359 359 331 l 337 301 l 334 308 b 272 359 334 308 311 359 b 177 310 232 359 202 343 l 173 304 l 171 311 b 117 360 171 311 153 353 b 96 361 109 361 102 361 b 29 328 60 361 39 340 b -10 252 20 318 0 284 l 12 240 b 68 318 12 240 36 318 b 75 317 71 318 72 318 b 86 295 84 314 86 307 b 59 194 86 275 75 240 b 1 20 59 193 6 33 b 0 13 1 17 0 16 b 3 4 0 10 1 7 b 14 -1 6 1 9 -1 l 36 -1 b 91 -1 58 -1 86 -1 b 107 22 94 -1 101 -1 b 127 99 114 53 121 79 b 235 310 132 121 186 310 b 243 305 238 310 242 308 b 248 289 246 302 248 297 b 216 160 248 265 233 219 b 173 22 194 89 173 22 b 173 16 173 20 173 19 b 176 3 173 12 173 6 b 187 -1 179 0 183 -1 l 266 -1 b 282 16 272 -1 279 0 b 284 26 282 17 284 22 b 392 302 312 228 359 288 b 396 304 393 302 395 304 l 397 304 b 400 302 399 304 399 302 b 408 289 403 301 408 297 b 369 140 408 275 399 217 b 356 75 360 117 356 95 b 370 23 356 55 360 37 b 428 -3 382 6 408 -3 b 536 99 492 -3 517 49 b 539 108 537 102 537 105 l 514 120 b 488 63 514 120 498 81 z',\n        },\n        dynamicForte: {\n            x_min: -137,\n            x_max: 334,\n            y_min: -193,\n            y_max: 421,\n            ha: 614,\n            o: 'm -122 -86 b -197 -161 -161 -86 -197 -122 b -81 -278 -197 -236 -147 -278 b 35 -228 -35 -278 -1 -264 b 202 173 98 -164 167 50 b 238 297 215 219 228 264 l 238 300 l 341 300 b 356 314 350 300 356 305 l 356 346 b 341 360 356 354 350 360 l 256 360 l 256 364 b 330 554 297 511 308 537 b 359 566 341 563 351 566 b 366 564 361 566 364 564 b 380 553 373 563 377 559 b 382 546 382 550 382 549 b 373 528 382 539 379 531 b 351 478 359 517 351 498 b 354 458 351 471 353 465 b 384 426 359 445 370 432 b 410 420 390 423 400 420 b 445 431 420 420 432 423 b 478 472 459 438 474 456 b 481 497 481 480 481 488 b 467 550 481 514 477 533 b 376 605 455 572 422 598 b 351 606 369 606 360 606 b 225 553 317 606 272 595 b 122 363 187 520 154 456 l 122 360 l 13 360 b -1 346 4 360 -1 354 l -1 314 b 13 300 -1 305 4 300 l 102 300 l 102 294 b 66 140 88 236 76 187 b 24 -35 55 86 42 32 l 20 -52 b -53 -235 -10 -170 -19 -212 b -78 -242 -60 -239 -69 -242 b -98 -235 -85 -242 -92 -239 b -105 -222 -102 -232 -105 -228 b -105 -219 -105 -220 -105 -220 b -94 -204 -104 -213 -101 -207 b -58 -144 -66 -193 -58 -167 b -122 -86 -58 -124 -71 -86 z',\n        },\n        dynamicRinforzando: {\n            x_min: -12,\n            x_max: 230,\n            y_min: 0,\n            y_max: 254,\n            ha: 254,\n            o: 'm 272 364 b 200 341 239 364 212 348 b 168 310 187 333 177 321 l 164 304 b 109 363 164 304 151 353 b 88 366 102 364 95 366 b 22 331 52 366 32 343 b -17 255 13 321 -7 287 l 4 243 b 60 321 4 243 29 321 b 68 320 63 321 65 321 b 78 297 75 317 78 308 b 49 180 78 272 65 230 l 0 23 b 0 17 0 22 0 20 b 3 4 0 13 0 7 b 14 0 6 1 10 0 l 94 0 b 109 17 99 0 107 1 b 111 27 109 19 111 23 b 209 302 140 230 186 279 b 225 311 215 308 220 311 b 229 310 226 311 228 311 b 233 304 233 307 233 305 b 233 301 233 302 233 301 b 216 268 220 291 216 279 b 225 243 216 259 219 249 b 262 229 235 232 249 229 b 304 242 279 229 295 235 b 331 308 320 255 331 275 b 272 364 331 341 304 364 z',\n        },\n        dynamicSforzando: {\n            x_min: 0,\n            x_max: 208,\n            y_min: -5,\n            y_max: 263,\n            ha: 268,\n            o: 'm 242 328 b 217 289 222 317 217 300 b 258 249 217 274 230 249 b 298 284 285 249 295 269 b 300 295 300 287 300 291 b 189 379 300 328 272 379 b 49 259 92 379 49 315 b 99 173 49 229 59 196 b 164 137 117 163 140 151 b 194 88 189 122 194 102 b 124 24 194 73 177 24 b 72 46 82 24 72 39 b 73 49 72 48 72 49 b 96 96 78 52 96 62 b 50 150 96 134 72 150 b 0 91 29 150 0 134 b 124 -7 0 26 49 -7 b 282 111 199 -7 282 24 b 171 239 282 197 207 219 b 128 292 135 259 128 268 b 193 347 128 317 156 347 b 242 328 230 347 242 328 z',\n        },\n        dynamicZ: {\n            x_min: -42,\n            x_max: 239,\n            y_min: -1,\n            y_max: 258,\n            ha: 259,\n            o: 'm 229 292 b 235 288 232 292 233 291 b 236 284 236 285 236 285 b 233 278 236 281 235 279 b -42 55 232 276 -4 85 b -60 24 -56 43 -60 33 b -50 4 -60 12 -50 4 b -35 0 -45 1 -40 0 b 9 29 -14 0 1 19 b 50 69 17 43 26 69 b 89 35 75 69 81 50 b 170 -1 104 10 137 -1 b 243 22 197 -1 223 6 b 304 147 288 56 304 118 b 264 196 304 176 294 196 b 226 156 239 196 226 174 b 251 117 226 128 249 122 b 251 108 251 114 251 111 b 243 79 251 98 249 88 b 212 56 236 68 223 56 b 202 59 209 56 204 56 b 163 92 194 63 186 75 b 108 122 140 109 114 120 b 105 125 105 124 105 124 b 107 128 105 127 107 128 b 312 304 107 128 302 294 b 341 340 324 315 336 327 b 344 347 343 341 344 346 l 344 356 b 333 369 343 367 336 369 l 331 369 l 262 363 b 217 361 245 361 230 361 b 156 366 193 361 174 363 b 114 372 147 367 125 372 b 107 370 111 372 108 370 b 86 344 98 367 89 360 b 37 222 72 265 42 232 b 37 219 37 220 37 220 b 50 207 37 213 43 207 l 66 207 b 81 225 75 207 76 215 b 108 291 85 235 105 285 b 118 297 111 297 112 297 b 167 289 125 295 144 291 b 181 289 171 289 177 289 b 229 292 202 289 222 291 z',\n        },\n        ornamentTrill: {\n            x_min: -12,\n            x_max: 383,\n            y_min: 0,\n            y_max: 383,\n            ha: 383,\n            o: 'm 464 396 b 376 359 408 396 376 359 l 364 370 b 346 377 357 377 346 377 l 197 377 l 246 528 b 246 531 246 530 246 531 b 226 552 246 541 236 552 l 213 552 b 199 544 209 552 202 547 b 124 482 196 541 130 487 b 117 471 118 478 117 471 b 84 377 117 471 102 431 l 3 377 b -17 360 -14 377 -17 360 l -17 341 b 3 324 -17 325 3 324 l 66 324 b 0 85 35 229 0 117 b 92 0 0 16 48 0 b 186 35 137 0 186 35 b 194 13 186 35 190 24 b 212 0 199 1 212 0 l 276 0 b 298 16 295 0 298 16 l 298 43 b 321 147 298 75 321 147 l 382 284 b 412 325 382 284 396 311 b 446 341 425 336 438 341 b 452 340 448 341 451 341 b 428 288 432 327 428 305 b 485 233 428 271 446 233 b 552 308 534 233 552 264 b 464 396 552 353 520 396 z m 222 143 b 147 78 210 104 171 78 b 137 79 143 78 140 78 b 121 115 125 85 121 99 b 137 190 121 148 137 190 l 180 324 l 275 324 b 279 320 279 324 279 320 b 222 143 279 320 235 187 z',\n        },\n        ornamentTurn: {\n            x_min: 0,\n            x_max: 456,\n            y_min: 0,\n            y_max: 232,\n            ha: 232,\n            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 328 255 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 328 79 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',\n        },\n        ornamentTurnSlash: {\n            x_min: 0,\n            x_max: 456,\n            y_min: -80,\n            y_max: 313,\n            ha: 393,\n            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 354 230 l 354 431 b 336 451 354 442 347 451 l 323 451 b 302 431 311 451 302 442 l 302 279 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 302 104 l 302 -96 b 323 -115 302 -108 311 -115 l 336 -115 b 354 -96 347 -115 354 -108 l 354 55 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',\n        },\n        ornamentMordent: {\n            x_min: 0,\n            x_max: 473,\n            y_min: -77,\n            y_max: 316,\n            ha: 393,\n            o: 'm 647 302 l 562 166 l 446 347 b 429 357 444 353 435 357 b 413 347 423 357 416 353 l 363 262 l 363 435 b 343 455 363 446 354 455 l 331 455 b 311 435 320 455 311 446 l 311 173 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 171 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 311 95 l 311 -91 b 331 -111 311 -102 320 -111 l 343 -111 b 363 -91 354 -111 363 -102 l 363 184 l 366 189 l 478 10 b 495 0 481 4 490 0 b 513 10 501 0 510 4 l 681 281 z',\n        },\n        ornamentShortTrill: {\n            x_min: 0,\n            x_max: 473,\n            y_min: 0,\n            y_max: 248,\n            ha: 248,\n            o: 'm 647 302 l 562 166 l 446 347 b 431 357 444 353 436 357 b 413 347 425 357 416 353 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 173 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 366 189 l 478 9 b 495 0 481 3 490 0 b 513 10 501 0 510 4 l 681 281 z',\n        },\n        ornamentTremblement: {\n            x_min: 0,\n            x_max: 654,\n            y_min: 0,\n            y_max: 248,\n            ha: 248,\n            o: 'm 907 302 l 822 166 l 708 348 b 691 357 704 354 701 357 b 674 347 685 357 677 353 l 648 302 l 563 166 l 449 348 b 432 357 446 354 438 357 b 415 347 426 357 418 353 l 415 346 l 311 171 l 203 348 b 186 357 200 354 192 357 b 168 348 177 357 171 354 l 168 347 l 0 69 l 35 48 l 120 190 l 226 10 b 243 0 229 4 238 0 l 245 0 b 261 10 251 0 258 4 l 367 189 l 480 10 b 497 0 482 4 491 0 b 513 10 503 0 510 4 l 625 192 l 739 10 b 756 0 742 4 750 0 b 772 10 762 0 769 4 l 942 282 z',\n        },\n        ornamentPrecompAppoggTrill: {\n            x_min: 0,\n            x_max: 680,\n            y_min: 0,\n            y_max: 388,\n            ha: 388,\n            o: 'm 860 170 l 746 353 b 729 361 743 359 737 361 b 713 351 723 361 716 357 l 685 307 l 600 170 l 487 353 b 481 359 485 356 484 357 b 469 361 478 360 472 361 b 452 351 464 361 455 357 l 348 176 l 240 353 b 223 361 238 359 229 361 b 206 353 215 361 209 359 l 40 76 l 40 541 b 20 559 39 552 30 559 b 0 541 10 559 1 552 l 0 26 b 19 1 0 16 9 4 b 26 0 20 1 24 0 b 48 13 35 0 43 6 l 72 52 l 157 194 l 265 14 b 282 4 268 9 276 4 b 298 14 288 4 295 9 l 405 193 l 517 14 b 534 4 520 9 528 4 b 550 14 540 4 547 9 l 664 196 l 776 14 b 793 4 779 9 788 4 b 811 14 799 4 808 9 l 979 287 l 945 307 z',\n        },\n        ornamentPrecompSlideTrillDAnglebert: {\n            x_min: 0,\n            x_max: 662,\n            y_min: -158,\n            y_max: 248,\n            ha: 406,\n            o: 'm 834 166 l 720 348 b 704 357 717 354 713 357 b 687 348 697 357 690 353 l 661 302 l 660 302 l 575 166 l 461 348 b 455 354 459 350 456 353 b 444 357 452 356 448 357 b 428 347 438 357 431 353 l 323 171 l 215 347 b 213 350 215 348 215 350 b 213 350 213 350 213 350 l 213 351 l 212 351 l 212 353 l 210 353 l 210 353 l 209 354 b 207 354 209 354 207 354 b 197 357 206 356 200 357 b 197 357 197 357 197 357 b 194 357 196 357 196 357 b 180 347 187 357 183 353 l 180 346 l 69 164 b 0 -50 23 88 0 17 b 49 -219 0 -108 16 -163 b 66 -228 52 -223 59 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -215 b 84 -197 86 -204 85 -200 b 40 -52 55 -150 40 -102 b 104 143 40 10 62 73 l 131 190 l 239 10 b 256 0 242 4 249 0 l 256 0 b 272 10 262 0 269 4 l 379 189 l 491 10 b 508 0 494 4 503 0 b 508 0 508 0 508 0 l 508 0 b 526 10 514 0 521 4 l 638 192 l 750 10 b 768 0 755 4 762 0 l 768 0 b 785 10 773 0 782 4 l 785 10 l 953 282 l 919 302 z',\n        },\n        ornamentPrecompSlideTrillBach: {\n            x_min: 0,\n            x_max: 662,\n            y_min: -158,\n            y_max: 321,\n            ha: 479,\n            o: 'm 834 166 l 720 348 b 704 357 716 354 713 357 b 687 348 698 357 690 354 l 660 304 l 660 302 l 632 259 l 632 442 b 612 462 632 454 624 462 l 599 462 b 579 442 588 462 579 454 l 579 173 l 575 166 l 461 348 b 455 356 459 351 458 354 b 445 359 452 357 448 359 b 428 348 439 359 431 354 l 323 171 l 215 347 b 213 350 215 348 213 350 l 213 351 l 212 353 l 210 353 l 210 354 l 207 354 b 197 357 204 356 200 357 b 180 348 189 357 183 354 l 179 346 l 69 164 b 0 -49 23 88 0 19 b 49 -217 0 -107 17 -163 b 66 -228 52 -223 60 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -213 b 84 -197 86 -204 85 -200 b 42 -50 56 -148 42 -101 b 104 144 42 12 62 75 l 131 190 l 239 10 b 256 0 242 4 251 0 b 274 10 262 0 271 4 l 379 190 l 491 10 b 508 0 494 4 503 0 b 526 10 514 0 523 4 l 579 98 l 579 -84 b 599 -104 579 -95 588 -104 l 612 -104 b 632 -84 624 -104 632 -95 l 632 183 l 638 192 l 750 10 b 768 0 753 4 762 0 b 785 10 773 0 782 4 l 953 282 l 919 302 z',\n        },\n        ornamentPrecompTrillSuffixDandrieu: {\n            x_min: 0,\n            x_max: 662,\n            y_min: 0,\n            y_max: 406,\n            ha: 406,\n            o: 'm 904 575 b 887 585 901 580 893 585 b 877 582 884 585 880 583 b 867 564 871 579 867 570 b 870 554 867 562 868 557 b 912 408 897 505 912 458 b 850 213 912 346 891 282 l 822 167 l 714 348 b 697 357 711 354 703 357 b 680 348 691 357 683 354 l 575 168 l 462 348 b 445 357 459 354 451 357 b 428 348 439 357 431 354 l 315 167 l 203 348 b 186 357 200 354 192 357 b 168 348 180 357 171 354 l 0 76 l 35 55 l 120 192 l 233 10 b 249 0 238 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 9 b 498 3 494 6 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 737 13 b 746 3 739 10 743 4 b 756 0 749 1 753 0 b 773 9 762 0 770 3 l 884 193 b 953 406 930 269 953 338 b 904 575 953 464 936 520 z',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefix: {\n            x_min: 0,\n            x_max: 857,\n            y_min: 0,\n            y_max: 248,\n            ha: 248,\n            o: 'm 383 140 b 413 189 399 166 412 187 b 520 10 423 171 516 16 b 537 0 523 4 530 0 b 554 10 543 0 550 4 b 660 189 557 16 649 171 b 772 10 671 173 766 19 b 791 0 778 1 785 0 b 806 10 796 0 802 4 b 919 192 809 16 907 174 l 1031 10 b 1048 0 1035 4 1043 0 l 1048 0 b 1066 10 1054 1 1063 4 l 1066 10 l 1234 282 l 1200 302 l 1115 166 l 1002 348 b 985 357 998 354 994 357 b 968 348 978 357 971 353 l 855 166 b 742 348 845 183 746 341 b 726 357 737 354 732 357 b 708 348 719 357 711 354 b 603 171 704 341 613 189 b 495 348 593 189 498 343 b 478 357 492 353 487 357 b 461 348 469 357 464 353 b 357 173 459 346 393 235 b 213 79 320 111 284 79 b 66 176 143 79 95 112 b 40 279 43 228 40 275 b 20 300 40 291 30 300 b 0 278 9 300 0 289 b 29 161 0 276 3 219 b 213 39 65 81 130 39 b 383 140 297 39 346 73 z',\n        },\n        ornamentPrecompTrillLowerSuffix: {\n            x_min: 0,\n            x_max: 565,\n            y_min: -171,\n            y_max: 249,\n            ha: 420,\n            o: 'm 347 168 l 235 348 b 217 359 230 354 226 359 b 200 348 209 359 203 353 b 3 30 197 344 6 35 b 0 20 0 26 0 24 b 22 0 0 9 10 0 b 37 9 27 0 35 3 l 151 192 b 265 10 161 174 262 13 b 281 0 268 6 272 0 b 298 10 289 0 295 3 l 403 186 l 511 10 b 528 0 516 4 521 0 b 546 10 537 0 541 4 l 698 265 b 775 22 744 202 775 112 b 700 -215 775 -60 752 -144 b 696 -226 697 -219 696 -222 b 704 -243 696 -232 700 -239 b 717 -246 708 -246 713 -246 b 733 -239 723 -246 729 -243 b 814 20 789 -160 814 -69 b 711 312 814 132 773 242 b 696 320 707 317 700 320 b 680 310 691 320 684 318 b 595 168 671 297 602 181 l 488 348 b 471 359 484 354 478 359 b 454 348 464 359 456 353 b 347 168 449 343 357 186 z',\n        },\n        brassMuteClosed: {\n            x_min: 0,\n            x_max: 312,\n            y_min: 0,\n            y_max: 312,\n            ha: 312,\n            o: 'm 22 256 b 0 225 7 256 0 240 b 22 193 0 209 7 193 l 193 193 l 193 22 b 225 0 193 7 209 0 b 256 22 240 0 256 7 l 256 193 l 428 193 b 449 225 442 193 449 209 b 428 256 449 240 442 256 l 256 256 l 256 428 b 225 449 256 442 240 449 b 193 428 209 449 193 442 l 193 256 z',\n        },\n        brassMuteOpen: {\n            x_min: 0,\n            x_max: 280,\n            y_min: 0,\n            y_max: 280,\n            ha: 280,\n            o: 'm 202 403 b 0 202 91 403 0 312 b 202 0 0 91 91 0 b 403 202 312 0 403 91 b 202 403 403 312 312 403 z m 202 40 b 40 202 112 40 40 112 b 202 363 40 291 112 363 b 363 202 291 363 363 291 b 202 40 363 112 291 40 z',\n        },\n        stringsDownBow: {\n            x_min: 0,\n            x_max: 315,\n            y_min: 0,\n            y_max: 293,\n            ha: 293,\n            o: 'm 40 0 l 40 291 l 413 291 l 413 0 l 454 0 l 454 402 b 433 422 454 413 445 422 l 20 422 b 0 402 9 422 0 402 l 0 0 z',\n        },\n        stringsUpBow: {\n            x_min: 0,\n            x_max: 262,\n            y_min: 0,\n            y_max: 343,\n            ha: 343,\n            o: 'm 374 485 b 357 494 372 490 363 494 l 337 494 b 318 481 330 494 321 488 l 189 118 l 59 481 b 40 494 56 488 48 494 l 20 494 b 0 474 9 494 0 485 b 1 467 0 472 1 468 l 170 13 b 189 0 173 6 181 0 b 207 13 196 0 204 6 l 376 467 b 377 474 376 468 377 472 b 374 485 377 477 376 482 z',\n        },\n        stringsHarmonic: {\n            x_min: 0,\n            x_max: 181,\n            y_min: 0,\n            y_max: 181,\n            ha: 181,\n            o: 'm 131 220 b 220 131 181 220 220 181 b 131 40 220 81 181 40 b 40 131 81 40 40 81 b 131 220 40 181 81 220 z m 131 261 b 0 131 59 261 0 203 b 131 0 0 59 59 0 b 261 131 203 0 261 59 b 131 261 261 203 203 261 z',\n        },\n        pluckedSnapPizzicatoAbove: {\n            x_min: 0,\n            x_max: 269,\n            y_min: 0,\n            y_max: 389,\n            ha: 389,\n            o: 'm 213 540 b 194 560 213 552 204 560 b 174 540 183 560 174 552 l 174 386 b 0 193 76 376 0 294 b 194 0 0 86 86 0 b 387 193 301 0 387 86 b 213 386 387 294 311 376 z m 194 40 b 40 193 109 40 40 109 b 174 346 40 271 98 336 l 174 193 b 194 173 174 183 183 173 b 213 193 204 173 213 183 l 213 346 b 347 193 289 336 347 271 b 194 40 347 109 278 40 z',\n        },\n        pluckedSnapPizzicatoBelow: {\n            x_min: 0,\n            x_max: 269,\n            y_min: 0,\n            y_max: 389,\n            ha: 389,\n            o: 'm 213 174 b 387 367 311 184 387 266 b 193 560 387 474 301 560 b 0 367 86 560 0 474 b 174 174 0 266 76 184 l 174 20 b 194 0 174 9 183 0 b 213 20 204 0 213 9 z m 194 520 b 347 367 278 520 347 452 b 213 215 347 289 289 225 l 213 367 b 194 387 213 377 204 387 b 174 367 183 387 174 377 l 174 215 b 40 367 98 225 40 289 b 194 520 40 452 109 520 z',\n        },\n        keyboardPedalPed: {\n            x_min: 0,\n            x_max: 981,\n            y_min: -10,\n            y_max: 545,\n            ha: 555,\n            o: 'm 1354 12 b 1413 78 1385 12 1413 42 b 1354 145 1413 115 1385 145 b 1293 78 1320 145 1293 115 b 1354 12 1293 42 1320 12 z m 1092 88 b 1080 86 1089 86 1084 86 b 1004 203 1037 86 1004 137 b 1107 376 1004 360 1097 374 b 1149 209 1129 336 1149 287 b 1092 88 1149 117 1130 95 z m 752 393 b 795 344 779 393 795 372 b 770 285 795 325 788 304 b 693 203 737 249 697 207 b 688 264 690 225 688 245 b 752 393 688 347 714 393 z m 245 507 b 220 544 245 533 235 544 b 217 544 219 544 219 544 b 186 510 206 546 192 537 b 143 464 179 478 163 464 b 134 465 140 464 137 464 b 102 516 117 467 102 487 b 141 613 102 541 112 576 b 347 721 212 711 315 721 b 356 721 351 721 354 721 b 275 560 344 701 297 616 b 259 495 274 557 259 528 b 272 452 259 480 264 465 b 373 323 297 416 350 354 b 387 284 382 311 387 298 b 350 222 387 265 376 245 b 230 140 301 180 252 154 b 128 39 215 130 128 92 b 134 12 128 30 130 22 b 173 -14 144 -7 157 -14 b 264 40 204 -14 243 17 b 333 98 281 58 302 98 b 389 39 357 98 373 60 b 478 -10 416 1 435 -10 b 622 96 527 -10 559 43 b 740 -10 626 86 667 -10 b 929 95 827 -10 917 85 b 1086 -12 950 37 1018 -12 b 1120 -7 1097 -12 1109 -10 b 1264 213 1212 17 1264 111 b 1263 248 1264 225 1263 236 b 815 664 1228 544 907 647 b 785 668 805 665 795 668 b 779 668 783 668 782 668 b 757 654 769 668 760 665 b 757 649 757 652 757 651 b 786 618 759 629 783 619 b 818 606 796 613 808 611 b 1071 435 1007 534 1066 445 b 909 181 930 386 909 256 b 910 141 909 164 909 151 b 786 78 899 127 844 78 b 708 151 726 78 710 144 b 799 230 711 154 742 181 b 864 350 845 271 864 312 b 757 456 864 410 815 456 b 599 222 644 456 599 328 b 609 141 599 192 602 164 b 563 104 608 140 595 122 b 540 98 556 99 549 98 b 459 140 513 98 480 118 b 397 184 413 189 399 184 b 475 279 403 189 454 226 b 482 311 480 289 482 300 b 449 410 482 359 452 405 b 361 533 442 419 383 503 b 354 560 356 541 354 550 b 386 651 353 588 372 622 b 429 713 405 693 426 710 b 557 592 521 688 557 628 b 549 569 557 582 554 573 b 523 559 540 562 531 559 b 459 592 495 559 469 583 b 425 613 451 600 438 613 b 409 608 419 613 415 612 b 399 586 402 602 399 595 b 399 583 397 585 399 585 b 409 552 399 573 405 562 b 541 458 441 487 492 458 b 608 480 564 458 588 465 b 648 572 632 497 648 531 b 429 778 648 649 589 749 b 351 785 402 782 376 785 b 0 507 130 785 0 615 b 127 366 0 399 68 366 b 245 507 186 366 245 429 z',\n        },\n        keyboardPedalUp: {\n            x_min: 0,\n            x_max: 473,\n            y_min: 0,\n            y_max: 473,\n            ha: 473,\n            o: 'm 99 99 b 164 69 120 79 143 69 b 199 82 177 69 190 73 b 210 114 206 89 210 102 b 206 137 210 122 209 130 b 200 160 203 145 200 154 b 210 179 200 166 203 171 l 245 215 b 285 213 255 225 272 219 l 287 213 l 288 212 b 318 183 301 206 318 196 l 318 134 b 291 102 318 112 308 112 b 258 58 274 92 258 76 b 340 0 258 26 294 0 b 423 58 386 0 423 26 b 390 102 423 76 408 92 b 361 134 373 112 361 112 l 361 183 b 392 212 361 196 379 206 b 395 213 393 212 393 213 b 436 215 408 219 426 225 l 471 179 b 480 161 478 171 480 167 b 474 137 480 154 477 147 b 471 115 472 130 471 122 b 482 82 471 102 474 91 b 517 69 491 73 504 69 b 582 99 539 69 562 79 b 612 164 602 120 612 143 b 599 199 612 177 608 190 b 567 210 592 206 579 210 b 544 206 559 210 552 209 b 521 200 536 203 528 200 b 501 210 514 200 508 203 l 467 245 b 468 285 456 255 462 272 l 468 287 b 469 288 468 287 469 287 b 498 318 475 301 485 318 l 547 318 b 579 291 569 318 569 308 b 624 258 589 274 605 258 b 681 340 655 258 681 294 b 624 423 681 386 655 423 b 579 390 605 423 589 408 b 547 361 569 373 569 361 l 498 361 b 469 392 485 361 475 379 b 468 395 469 393 468 393 b 467 436 462 408 456 426 l 501 471 b 520 480 508 478 514 480 b 544 474 527 480 534 477 b 566 471 552 472 559 471 b 599 482 579 471 590 474 b 612 516 608 491 612 503 b 582 580 612 536 602 560 b 516 612 562 600 537 612 b 482 599 503 612 491 608 b 471 566 474 590 471 579 b 474 544 471 559 472 552 b 480 520 477 534 480 527 b 471 501 480 514 478 508 l 436 467 b 395 468 426 456 408 462 b 392 469 393 468 393 469 b 361 498 379 475 361 485 l 361 547 b 390 579 361 569 373 569 b 423 624 408 589 423 605 b 340 681 423 655 386 681 b 258 624 294 681 258 655 b 291 579 258 605 274 589 b 318 547 308 569 318 569 l 318 498 b 288 469 318 485 301 475 l 287 468 l 285 468 b 245 467 272 462 255 456 l 210 501 b 200 521 203 508 200 514 b 206 544 200 528 203 536 b 210 567 209 552 210 559 b 199 599 210 579 206 592 b 164 612 190 608 177 612 b 99 582 143 612 120 602 b 69 517 79 562 69 539 b 82 482 69 504 73 491 b 115 471 91 474 102 471 b 137 474 122 471 130 472 b 161 480 147 477 154 480 b 180 471 167 480 173 478 l 215 436 b 213 395 225 426 219 408 b 212 392 213 393 212 393 b 183 361 206 379 196 361 l 134 361 b 102 390 112 361 112 373 b 58 423 92 408 76 423 b 0 340 26 423 0 386 b 58 258 0 294 26 258 b 102 291 76 258 92 274 b 134 318 112 308 112 318 l 183 318 b 212 288 196 318 206 301 b 213 287 212 287 213 288 l 213 285 b 215 245 219 272 225 255 l 179 210 b 160 200 171 203 166 200 b 137 206 154 200 145 203 b 114 210 130 209 122 210 b 82 199 102 210 89 206 b 69 164 73 190 69 177 b 99 99 69 143 79 120 z m 276 276 b 249 340 262 291 249 320 b 340 432 249 390 289 432 b 432 340 390 432 432 390 b 405 276 432 320 419 291 b 340 249 390 262 360 249 b 276 276 320 249 291 262 z',\n        },\n        wiggleArpeggiatoUp: {\n            x_min: -22,\n            x_max: 242,\n            y_min: 0,\n            y_max: 164,\n            ha: 164,\n            o: 'm 343 122 b 323 143 343 122 334 132 b 308 148 318 147 312 148 b 298 144 304 148 301 147 b 282 128 295 141 291 137 b 274 124 279 125 276 124 b 265 128 268 124 265 128 b 158 220 265 128 173 207 b 112 236 143 232 127 236 b 43 206 82 236 55 219 l -26 137 b -32 125 -30 132 -32 130 b -26 112 -32 118 -26 112 b -6 92 -26 112 -17 102 b 7 86 -1 88 3 86 b 17 91 12 86 14 88 b 33 107 20 94 24 98 b 42 111 36 109 39 111 b 52 107 48 111 52 107 b 158 16 52 107 144 29 b 204 0 174 4 190 0 b 274 30 235 0 262 17 l 343 99 b 348 111 347 104 348 108 b 343 122 348 118 343 122 z',\n        },\n        repeat1Bar: {\n            x_min: 0,\n            x_max: 481,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 693 -181 b 602 -91 693 -131 651 -91 b 511 -181 552 -91 511 -131 b 602 -272 511 -232 552 -272 b 693 -181 651 -272 693 -232 z',\n        },\n        repeat2Bars: {\n            x_min: 0,\n            x_max: 735,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 1058 -181 b 968 -91 1058 -131 1017 -91 b 877 -181 917 -91 877 -131 b 968 -272 877 -232 917 -272 b 1058 -181 1017 -272 1058 -232 z m 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 1058 360 l 877 360 l 366 -360 l 547 -360 z',\n        },\n        repeat4Bars: {\n            x_min: 0,\n            x_max: 1243,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 1058 360 l 877 360 l 366 -360 l 547 -360 z m 1424 360 l 1243 360 l 732 -360 l 913 -360 z m 1790 360 l 1608 360 l 1097 -360 l 1279 -360 z m 1790 -181 b 1699 -91 1790 -131 1748 -91 b 1608 -181 1649 -91 1608 -131 b 1699 -272 1608 -232 1649 -272 b 1790 -181 1748 -272 1790 -232 z',\n        },\n        repeatBarSlash: {\n            x_min: 0,\n            x_max: 481,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 693 360 l 511 360 l 0 -360 l 181 -360 z',\n        },\n        csymDiminished: {\n            x_min: 0,\n            x_max: 501,\n            y_min: 0,\n            y_max: 501,\n            ha: 501,\n            o: 'm 361 721 b 0 361 161 721 0 560 b 361 0 0 161 161 0 b 721 361 560 0 721 161 b 361 721 721 560 560 721 z m 557 164 b 361 82 505 111 435 82 b 164 164 287 82 216 111 b 82 361 111 216 82 287 b 164 557 82 436 111 505 b 361 639 216 611 287 639 b 557 557 436 639 505 611 b 639 361 611 505 639 436 b 557 164 639 287 609 216 z',\n        },\n        csymHalfDiminished: {\n            x_min: -1,\n            x_max: 502,\n            y_min: -1,\n            y_max: 502,\n            ha: 503,\n            o: 'm 723 684 l 684 723 l 596 634 b 361 721 533 688 451 721 b 0 361 161 721 0 560 b 88 125 0 271 33 189 l -1 36 l 36 -1 l 125 88 b 361 0 189 33 271 0 b 721 361 560 0 721 161 b 634 596 721 451 688 533 z m 82 361 b 164 557 82 436 111 505 b 361 639 216 611 287 639 b 537 576 426 639 488 616 l 145 184 b 82 361 105 233 82 295 z m 639 361 b 557 164 639 287 609 216 b 361 82 505 111 435 82 b 184 145 295 82 233 105 l 576 537 b 639 361 616 488 639 426 z',\n        },\n        csymAugmented: {\n            x_min: 1,\n            x_max: 321,\n            y_min: 90,\n            y_max: 410,\n            ha: 320,\n            o: 'm 462 400 l 272 400 l 272 590 l 192 590 l 192 400 l 1 400 l 1 320 l 192 320 l 192 130 l 272 130 l 272 320 l 462 320 z',\n        },\n        csymMajorSeventh: {\n            x_min: 0,\n            x_max: 500,\n            y_min: 10,\n            y_max: 490,\n            ha: 480,\n            o: 'm 360 528 l 585 96 l 135 96 z m 360 706 l 0 14 l 720 14 z',\n        },\n        accidentalNarrowReversedFlat: {\n            x_min: 0,\n            x_max: 160,\n            y_min: -176,\n            y_max: 452,\n            ha: 628,\n            o: 'm 0 84 b 101 -153 0 -26 65 -107 b 196 -249 153 -217 196 -249 b 206 -253 199 -251 202 -253 b 225 -235 216 -253 225 -245 l 230 632 b 212 651 230 642 222 651 l 199 651 b 180 632 189 651 180 642 l 184 204 b 125 217 184 204 171 217 b 0 84 53 217 0 173 z m 145 154 b 184 107 181 154 184 120 l 187 -179 b 114 -72 167 -158 132 -112 b 82 58 86 -13 82 36 b 145 154 82 79 82 154 z',\n        },\n        accidentalNarrowReversedFlatAndFlat: {\n            x_min: 0,\n            x_max: 416,\n            y_min: -176,\n            y_max: 452,\n            ha: 628,\n            o: 'm 462 217 b 330 174 374 217 338 181 l 334 632 b 315 651 334 642 325 651 l 302 651 b 284 632 292 651 284 642 l 289 -235 b 308 -253 289 -245 298 -253 b 320 -249 312 -253 317 -251 b 492 -138 320 -249 433 -194 b 599 84 534 -98 599 -26 b 462 217 599 173 534 217 z m 501 58 b 459 -72 501 36 498 -19 b 327 -179 431 -111 359 -164 l 330 85 l 330 91 b 422 154 330 125 359 154 b 501 58 503 154 501 79 z m 0 84 b 101 -153 0 -26 65 -107 b 196 -249 153 -217 196 -249 b 206 -253 199 -251 202 -253 b 225 -235 216 -253 225 -245 l 230 632 b 212 651 230 642 222 651 l 199 651 b 180 632 189 651 180 642 l 184 204 b 125 217 184 204 171 217 b 0 84 53 217 0 173 z m 145 154 b 184 107 181 154 184 120 l 187 -179 b 114 -72 167 -158 132 -112 b 82 58 86 -13 82 36 b 145 154 82 79 82 154 z',\n        },\n    },\n    fontFamily: 'Leland',\n    resolution: 1000,\n    generatedOn: '2022-06-26T17:49:33.853Z',\n};\n", "export const LelandMetrics = {\n    name: 'Leland',\n    smufl: true,\n    stave: {\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    accidental: {\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    clef: {\n        default: {\n            point: 32,\n            width: 26,\n        },\n        small: {\n            point: 26,\n            width: 20,\n        },\n        annotations: {\n            '8va': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: -1.4,\n                        shiftX: 12,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: -0.2,\n                        shiftX: 8,\n                    },\n                },\n            },\n            '8vb': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: 6,\n                        shiftX: 10,\n                    },\n                    bass: {\n                        line: 3.5,\n                        shiftX: 1,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: 5.3,\n                        shiftX: 6,\n                    },\n                    bass: {\n                        line: 3.1,\n                        shiftX: 0.5,\n                    },\n                },\n            },\n        },\n        lineCount: {\n            '8': { point: 55, shiftY: 14 },\n            '7': { point: 47, shiftY: 8 },\n            '6': { point: 32, shiftY: 1 },\n            '5': { point: 30, shiftY: -6 },\n            '4': { point: 23, shiftY: -12 },\n        },\n    },\n    parenthesis: {\n        default: {\n            point: 39,\n            width: 7,\n        },\n        gracenote: {\n            point: (39 * 3) / 5,\n            width: 3,\n        },\n    },\n    pedalMarking: {\n        up: {\n            point: 40,\n        },\n        down: {\n            point: 34,\n        },\n    },\n    digits: {\n        shiftLine: -1,\n        point: 34,\n        tupletPoint: 22,\n        shiftY: -6,\n    },\n    articulation: {\n        articStaccatissimoAbove: {\n            padding: 2,\n        },\n        articStaccatissimoBelow: {\n            padding: 2,\n        },\n    },\n    tremolo: {\n        default: {\n            point: 25,\n            spacing: 5,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 11,\n            offsetXStemDown: 1,\n        },\n        grace: {\n            point: 18,\n            spacing: 4,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 7,\n            offsetXStemDown: 1,\n        },\n    },\n    staveRepetition: {\n        symbolText: {\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    stem: {\n        heightAdjustmentForFlag: -3,\n        noteHead: {\n            noteheadTriangleUpHalf: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpBlack: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpWhole: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXHalf: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXBlack: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXWhole: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadHalf: {\n                offsetYBaseStemUp: -2.55,\n                offsetYBaseStemDown: 2.65,\n            },\n            noteheadBlack: {\n                offsetYBaseStemUp: -2,\n                offsetYBaseStemDown: 2,\n            },\n            noteheadSquareWhite: {\n                offsetYBaseStemDown: -5,\n                offsetYBaseStemUp: 5,\n            },\n        },\n    },\n    glyphs: {\n        coda: {\n            point: 20,\n            shiftX: -7,\n            shiftY: 8,\n        },\n        segno: {\n            shiftX: -7,\n        },\n        flag: {\n            shiftX: -0.75,\n            staveTempo: {\n                shiftX: -1,\n            },\n        },\n        clef: {\n            gClef: {\n                default: { scale: 1.1, shiftY: 1 },\n                small: { shiftY: 1.5 },\n            },\n            fClef: {\n                default: { shiftY: -0.5 },\n            },\n        },\n        ornament: {\n            ornamentTurn: {\n                scale: 1.2,\n            },\n            ornamentTurnSlash: {\n                scale: 1.2,\n            },\n        },\n        stringNumber: {\n            verticalPadding: 8,\n            stemPadding: 2,\n            leftPadding: 5,\n            rightPadding: 6,\n        },\n        stroke: {\n            arrowheadBlackDown: {\n                straight: {\n                    shiftX: -4.5,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n            arrowheadBlackUp: {\n                straight: {\n                    shiftX: -0.85,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n        },\n        textNote: {\n            point: 34,\n            breathMarkTick: {\n                point: 36,\n                shiftY: 9,\n            },\n            breathMarkComma: {\n                point: 36,\n            },\n            segno: {\n                point: 30,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            coda: {\n                point: 20,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            ornamentTrill: {\n                shiftX: -8,\n                shiftY: 8,\n            },\n            ornamentTurn: {\n                point: 42,\n            },\n            ornamentTurnSlash: {\n                point: 42,\n            },\n            ornamentMordent: {\n                shiftX: -8,\n            },\n            ornamentShortTrill: {\n                shiftX: -8,\n            },\n        },\n        noteHead: {\n            minPadding: 2,\n            standard: {\n                restQuarterStemUp: {\n                    point: 35,\n                },\n                restQuarterStemDown: {\n                    point: 35,\n                },\n            },\n        },\n        chordSymbol: {\n            global: {\n                superscriptOffset: -400,\n                subscriptOffset: 300,\n                kerningOffset: -250,\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n                upperKerningText: ['A', 'L'],\n                spacing: 100,\n                superSubRatio: 0.66,\n            },\n            csymDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymHalfDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymAugmented: {\n                scale: 1,\n                leftSideBearing: 0,\n                advanceWidth: 530,\n                yOffset: 0,\n            },\n            csymParensLeftTall: {\n                scale: 0.8,\n                leftSideBearing: -20,\n                advanceWidth: 184,\n                yOffset: 250,\n            },\n            csymParensRightTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 189,\n                yOffset: 250,\n            },\n            csymBracketLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 328,\n                yOffset: 0,\n            },\n            csymBracketRightTall: {\n                scale: 0.8,\n                leftSideBearing: 1,\n                advanceWidth: 600,\n                yOffset: 0,\n            },\n            csymParensLeftVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 50,\n                advanceWidth: 121,\n                yOffset: 350,\n            },\n            csymParensRightVeryTall: {\n                scale: 0.9,\n                leftSideBearing: 0,\n                advanceWidth: 111,\n                yOffset: 350,\n            },\n            csymDiagonalArrangementSlash: {\n                scale: 0.6,\n                leftSideBearing: -1,\n                advanceWidth: 990,\n                yOffset: 0,\n            },\n            csymMinor: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 482,\n                yOffset: 0,\n            },\n            csymMajorSeventh: {\n                scale: 0.9,\n                leftSideBearing: 200,\n                yOffset: 0,\n                advanceWidth: 600,\n            },\n            accidentalSharp: {\n                scale: 0.75,\n                leftSideBearing: 20,\n                advanceWidth: 250,\n                yOffset: -302,\n            },\n            accidentalFlat: {\n                scale: 0.9,\n                leftSideBearing: -20,\n                advanceWidth: 226,\n                yOffset: -184,\n            },\n        },\n        jazzOrnaments: {\n            brassScoop: {\n                scale: 1.0,\n                xOffset: -12,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 20,\n            },\n            brassDoitMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 22,\n            },\n            brassFallLipShort: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassLiftMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 5,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassFallRoughMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 28,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassBend: {\n                scale: 1.0,\n                xOffset: 2,\n                yOffset: -8,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassMuteClosed: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -8,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassMuteOpen: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -7,\n                stemUpYOffset: 25,\n                reportedWidth: 5,\n            },\n            brassFlip: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: 0,\n                stemUpYOffset: 7,\n                reportedWidth: 10,\n            },\n            brassJazzTurn: {\n                scale: 1.0,\n                xOffset: 0,\n                yOffset: 0,\n                stemUpYOffset: 8,\n                reportedWidth: 31,\n            },\n            brassSmear: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: 0,\n                stemUpYOffset: 8,\n                reportedWidth: 5,\n            },\n        },\n        tuplet: {\n            noteHeadOffset: 20,\n            stemOffset: 10,\n            bottomLine: 4,\n            topModifierOffset: 15,\n        },\n    },\n};\n", "import { Font } from '../font.js';\nimport { LelandFont } from './leland_glyphs.js';\nimport { LelandMetrics } from './leland_metrics.js';\nexport function loadLeland() {\n    Font.load('Leland', LelandFont, LelandMetrics);\n}\n", "export const PetalumaFont = {\n    glyphs: {\n        bracketTop: {\n            x_min: 0,\n            x_max: 508,\n            y_min: 0,\n            y_max: 370,\n            ha: 370,\n            o: 'm 22 0 b 122 0 55 1 89 0 l 157 0 b 713 376 425 0 622 137 b 732 467 724 406 732 436 b 726 514 732 482 730 498 b 711 533 723 528 719 533 b 693 526 707 533 700 530 b 674 498 683 520 678 508 b 635 406 662 467 652 435 b 310 164 560 281 458 193 b 154 151 258 154 206 151 b 39 154 117 151 78 154 b 1 120 17 154 4 145 b 0 84 0 108 0 96 b 0 20 0 63 1 40 b 22 0 0 4 7 0 z',\n        },\n        bracketBottom: {\n            x_min: 0,\n            x_max: 496,\n            y_min: -393,\n            y_max: 0,\n            ha: 393,\n            o: 'm 696 -566 b 711 -539 713 -566 708 -549 b 714 -521 713 -533 714 -527 b 713 -508 714 -517 713 -513 b 661 -327 706 -445 688 -384 b 392 -42 603 -203 513 -109 b 206 0 331 -7 266 0 b 160 -1 190 0 174 -1 b 26 -1 107 -1 66 -3 b 0 -19 12 -1 0 -4 l 0 -23 b 3 -50 1 -32 3 -42 b 1 -86 3 -62 1 -73 b 4 -118 1 -96 1 -108 b 45 -151 10 -145 23 -154 b 180 -143 89 -144 135 -145 b 621 -419 392 -135 523 -236 b 662 -539 641 -456 655 -497 b 696 -566 667 -557 680 -566 z',\n        },\n        barlineTick: {\n            x_min: 0,\n            x_max: 56.036101509664164,\n            y_min: 876.905249806889,\n            y_max: 1121.5430338167066,\n            ha: 244.63778400981766,\n            o: 'm 42 1263 b 66 1287 62 1261 66 1272 b 81 1583 65 1387 72 1485 b 35 1614 82 1610 53 1610 b 14 1591 17 1619 16 1604 b 0 1408 7 1525 0 1459 l 0 1292 b 42 1263 1 1263 23 1266 z',\n        },\n        breathMarkTick: {\n            x_min: 0,\n            x_max: 568,\n            y_min: 0,\n            y_max: 621,\n            ha: 621,\n            o: 'm 258 0 b 278 39 276 0 274 24 b 279 56 279 45 279 50 l 279 73 b 278 117 279 88 278 102 b 281 148 278 127 279 138 b 536 600 312 330 387 487 b 744 719 600 651 670 690 b 815 779 775 730 808 740 b 818 824 818 793 818 808 b 815 868 818 838 818 852 b 796 894 814 881 808 894 b 779 888 791 894 786 893 b 719 864 760 878 739 871 b 372 602 580 806 459 724 b 229 252 298 498 251 383 b 220 268 225 262 222 264 b 209 302 217 279 213 291 b 75 527 181 387 143 467 b 16 563 58 543 39 573 b 0 539 3 557 0 549 b 12 492 0 524 9 507 b 56 400 19 459 22 425 b 163 269 104 367 138 323 b 238 36 197 194 216 115 b 258 0 242 22 243 0 z',\n        },\n        segno: {\n            x_min: 0,\n            x_max: 798,\n            y_min: -65,\n            y_max: 806,\n            ha: 871,\n            o: 'm 16 -94 b 66 -69 39 -92 53 -85 b 177 59 102 -26 138 17 b 543 456 298 192 420 324 b 726 300 615 420 680 373 b 753 217 744 271 753 243 b 655 112 753 170 719 131 b 599 104 636 107 618 104 b 461 173 544 104 495 128 b 432 190 454 183 444 190 b 409 179 425 190 418 187 b 359 118 390 160 373 141 b 341 72 347 101 341 86 b 373 24 341 56 351 40 b 409 6 384 17 396 10 b 550 -13 454 -12 501 -14 b 599 -6 566 -12 583 -10 b 864 213 720 27 806 104 b 886 300 878 242 886 271 b 857 395 886 331 877 363 b 799 467 840 420 821 445 b 648 572 755 513 704 546 b 1110 1083 802 743 955 914 b 1140 1129 1123 1097 1136 1110 b 1149 1148 1142 1135 1149 1142 b 1145 1153 1149 1149 1148 1152 b 1123 1161 1139 1158 1130 1161 b 1109 1156 1119 1161 1113 1159 b 1089 1138 1102 1151 1094 1145 b 946 988 1040 1089 989 1041 b 595 602 834 855 711 732 l 590 598 l 549 615 b 432 793 462 647 432 723 b 534 888 432 851 474 888 b 671 834 588 888 631 864 b 710 818 684 824 696 818 b 724 821 714 818 719 819 b 809 883 757 834 788 852 b 816 901 814 890 816 896 b 802 923 816 910 812 916 b 706 984 770 945 742 971 b 593 1011 668 998 631 1011 b 516 991 567 1011 541 1005 b 333 799 433 949 380 876 b 302 693 312 765 302 729 b 330 589 302 658 311 624 b 469 488 360 533 415 511 b 485 482 475 487 480 485 b 266 249 412 405 338 327 b 121 88 217 196 170 141 b 9 -65 78 40 37 -7 b 0 -85 4 -72 0 -79 b 16 -94 0 -91 4 -94 z m 861 536 b 927 575 890 539 909 557 b 965 628 952 598 965 613 b 926 680 965 644 952 658 b 865 713 900 701 883 713 b 805 667 845 713 828 698 b 768 611 791 649 770 631 b 812 564 766 589 798 582 b 861 536 824 550 840 537 z m 251 350 b 363 436 285 348 353 403 b 354 456 366 448 360 452 b 271 518 327 477 298 497 b 243 528 261 526 252 528 b 210 513 232 528 222 523 b 157 454 190 494 176 472 b 141 428 147 444 141 436 b 158 406 141 420 147 413 b 216 361 180 393 197 376 b 245 350 225 356 235 350 z',\n        },\n        coda: {\n            x_min: 0,\n            x_max: 1380,\n            y_min: -196,\n            y_max: 1037,\n            ha: 1233,\n            o: 'm 1028 -282 b 1057 -245 1045 -282 1053 -261 b 1060 -203 1060 -232 1060 -217 b 1063 9 1060 -132 1061 -62 b 1390 194 1192 22 1303 81 b 1531 543 1467 298 1512 415 b 1532 556 1531 547 1532 552 b 1904 559 1656 557 1780 559 b 1950 582 1920 559 1941 569 b 1987 674 1970 609 1987 638 b 1984 698 1987 681 1986 690 b 1950 700 1973 698 1961 700 l 1941 700 l 1545 696 b 1535 776 1545 723 1541 749 b 1103 1113 1477 996 1326 1107 b 1080 1115 1096 1115 1087 1115 b 1081 1322 1080 1184 1080 1253 b 1079 1467 1083 1371 1081 1418 b 1061 1493 1079 1476 1080 1493 l 1060 1493 b 1028 1467 1044 1490 1031 1485 b 1020 1403 1025 1446 1020 1424 b 1017 1110 1020 1305 1018 1208 l 962 1106 b 569 914 808 1087 671 1035 b 451 683 510 844 472 766 l 161 678 b 118 680 148 678 132 680 b 79 670 101 680 86 678 b 0 544 48 636 29 592 l 37 544 l 429 549 b 428 518 428 539 428 528 b 488 285 428 435 458 360 b 681 81 526 192 593 124 b 946 9 763 40 854 19 b 1008 6 966 7 988 6 b 1005 -137 1008 -42 1005 -89 b 1012 -243 1005 -173 1005 -209 b 1028 -282 1015 -258 1011 -282 z m 1074 690 b 1079 935 1077 772 1077 852 b 1326 855 1166 932 1250 909 b 1446 694 1385 814 1426 759 b 1269 693 1387 694 1328 693 b 1074 690 1204 693 1139 691 z m 577 684 b 766 874 618 763 678 828 b 989 932 837 912 913 923 b 1015 933 998 932 1007 933 b 1014 822 1015 896 1014 860 b 1011 688 1012 791 1012 743 z m 1067 184 b 1071 553 1070 307 1068 429 b 1439 556 1194 553 1316 554 b 1437 554 1439 554 1437 554 b 1341 337 1413 478 1387 402 b 1119 192 1286 261 1211 212 b 1067 184 1102 189 1084 186 z m 1008 180 b 660 264 886 181 770 212 b 524 471 570 305 524 374 b 528 524 524 488 526 505 l 533 549 b 792 552 619 550 706 550 b 1009 553 865 553 937 552 b 1008 180 1009 428 1008 288 z',\n        },\n        gClef: {\n            x_min: 0,\n            x_max: 664,\n            y_min: -559,\n            y_max: 1009,\n            ha: 1568,\n            o: 'm 343 -805 b 366 -801 350 -805 357 -804 b 409 -773 383 -795 397 -786 b 582 -328 528 -648 577 -497 b 583 -294 582 -315 583 -294 b 612 -279 583 -294 603 -282 b 747 -197 660 -256 706 -230 b 949 143 857 -109 920 10 b 956 206 955 164 956 186 b 791 384 956 297 906 363 b 704 393 762 390 733 393 b 498 336 632 393 563 374 b 481 325 490 331 481 325 l 444 465 b 442 485 442 472 442 485 b 609 880 442 485 589 746 b 619 996 616 919 619 958 b 613 1084 619 1027 618 1056 b 534 1387 599 1188 560 1286 b 482 1453 527 1417 517 1453 b 422 1407 456 1453 438 1428 b 305 1063 348 1305 312 1188 b 304 1002 304 1043 304 1022 b 338 654 304 886 323 769 b 343 629 338 645 341 636 b 144 356 278 537 206 451 b 23 144 101 288 53 220 b 0 20 7 107 0 63 b 82 -210 0 -69 30 -160 b 207 -288 112 -239 160 -271 b 410 -328 274 -312 340 -328 b 474 -324 431 -328 452 -327 l 491 -321 b 491 -341 491 -321 492 -334 b 402 -585 475 -428 454 -513 b 294 -668 374 -622 348 -664 b 271 -693 278 -670 271 -680 b 274 -708 271 -698 272 -703 b 302 -775 282 -730 292 -753 b 343 -805 311 -795 325 -805 z m 400 717 b 382 922 389 786 382 854 b 481 1286 382 1047 408 1169 b 507 1125 498 1233 507 1179 b 500 1040 507 1097 504 1068 b 400 717 481 927 455 818 z m 252 -135 b 196 -121 232 -134 215 -127 b 117 -69 158 -108 127 -94 b 111 -32 112 -58 111 -45 b 117 19 111 -16 114 1 b 130 56 118 27 127 52 b 324 337 186 156 253 246 l 384 416 l 395 384 b 416 291 406 348 416 291 b 350 213 416 291 376 239 b 243 -42 278 143 243 55 b 251 -117 243 -66 246 -91 b 252 -135 252 -122 252 -127 z m 563 -91 b 510 168 552 3 530 78 b 513 192 508 179 508 186 b 624 202 550 199 586 202 b 730 192 660 202 694 199 b 850 141 773 183 816 176 b 858 134 852 138 855 135 b 595 -121 801 19 716 -68 l 569 -131 z m 410 -160 b 311 -147 360 -160 311 -147 b 307 -98 311 -147 307 -127 b 314 -33 307 -79 308 -56 b 429 131 328 36 377 85 b 441 138 433 135 438 138 b 449 122 446 138 448 132 b 490 -131 462 37 484 -46 b 490 -153 491 -140 490 -153 b 410 -160 490 -153 452 -163 z',\n        },\n        cClef: {\n            x_min: 0,\n            x_max: 731,\n            y_min: -543,\n            y_max: 543,\n            ha: 1086,\n            o: 'm 131 -782 b 141 -755 138 -782 140 -773 b 147 -490 143 -667 145 -577 b 160 207 150 -258 153 -24 b 168 618 164 344 158 481 b 81 768 173 690 132 732 b 45 782 66 778 55 782 b 3 740 26 782 13 768 b 0 724 1 736 0 730 l 1 710 b 4 596 4 672 4 634 l 4 382 b 9 102 4 288 4 196 b 17 -301 13 -32 10 -166 l 17 -672 b 50 -736 17 -701 27 -720 b 109 -772 69 -749 91 -759 b 131 -782 120 -778 127 -782 z m 615 -770 b 881 -684 710 -770 801 -739 b 1020 -395 986 -612 1020 -510 b 1017 -334 1020 -374 1018 -354 b 769 -62 1007 -209 896 -75 b 746 -60 762 -60 755 -60 b 639 -73 710 -60 675 -69 b 524 -109 598 -79 560 -92 b 528 -36 526 -85 528 -60 b 527 -4 528 -26 528 -14 b 528 39 527 10 528 24 b 526 99 528 59 527 79 b 592 94 549 95 570 94 b 648 99 611 94 629 95 b 912 157 744 94 844 117 b 1053 377 1009 215 1053 284 b 1050 425 1053 393 1053 409 b 914 665 1037 521 986 602 b 717 753 855 717 791 753 b 626 734 688 753 658 747 l 462 665 b 347 500 374 628 347 580 b 350 449 347 484 348 468 b 392 419 353 428 367 416 b 492 438 425 425 459 428 b 541 498 524 448 541 468 b 540 514 541 503 541 508 b 537 546 537 524 537 536 b 573 639 537 580 550 611 b 606 657 582 649 593 657 l 609 657 b 716 622 647 652 684 647 b 834 372 801 556 834 469 b 831 323 834 356 832 338 b 743 187 825 266 795 217 b 710 176 732 180 720 176 b 694 179 704 176 700 177 b 527 223 638 193 582 206 b 495 229 516 228 505 229 b 454 220 481 229 468 225 b 395 189 432 213 415 200 b 363 180 384 186 374 181 b 348 168 356 179 348 176 b 340 161 343 167 340 164 b 347 150 340 157 343 154 b 356 147 348 148 353 147 b 364 92 361 130 363 111 b 369 -37 367 49 369 6 b 363 -154 369 -76 367 -115 b 357 -236 360 -183 357 -210 b 376 -264 357 -253 361 -259 b 456 -289 402 -284 429 -289 b 521 -282 478 -289 500 -285 b 549 -255 537 -279 546 -271 b 598 -177 556 -225 577 -202 b 622 -164 605 -168 613 -164 b 636 -167 626 -164 631 -166 b 749 -225 678 -177 714 -199 b 848 -405 814 -276 848 -337 b 824 -507 848 -436 840 -471 b 657 -657 792 -582 730 -625 b 608 -668 638 -664 622 -668 b 534 -602 572 -668 547 -645 b 513 -575 530 -589 523 -575 b 507 -576 510 -575 508 -575 b 478 -582 497 -580 488 -582 b 405 -570 454 -582 428 -570 b 389 -572 399 -570 395 -570 l 363 -572 b 321 -575 348 -572 333 -569 l 321 631 b 323 662 323 641 323 652 b 315 716 323 681 321 698 b 304 736 314 723 317 736 l 302 736 b 281 716 294 734 285 729 b 275 665 276 700 275 683 l 275 382 b 276 99 275 288 275 193 b 279 -170 278 10 276 -81 b 284 -399 282 -246 284 -323 b 282 -629 284 -475 282 -553 b 289 -721 282 -660 289 -690 b 300 -736 289 -727 291 -736 b 312 -724 307 -736 310 -730 b 321 -667 323 -706 321 -687 l 321 -632 l 328 -644 l 340 -657 b 510 -757 386 -707 445 -740 b 615 -770 546 -766 580 -770 z',\n        },\n        fClef: {\n            x_min: 0,\n            x_max: 776,\n            y_min: -496,\n            y_max: 216,\n            ha: 712,\n            o: 'm 402 -706 b 804 -405 592 -678 716 -566 b 876 -53 861 -298 874 -183 b 868 33 876 -32 873 1 b 560 311 845 217 723 311 b 524 310 549 311 536 311 b 131 134 373 297 239 242 b 17 -29 84 86 37 39 b 9 -89 12 -50 9 -71 b 112 -238 9 -154 43 -206 b 124 -243 117 -239 120 -242 b 186 -261 145 -255 166 -261 b 268 -228 215 -261 242 -249 b 351 -59 325 -181 351 -124 b 343 10 351 -36 348 -13 b 340 36 341 19 340 27 b 409 105 340 75 363 102 b 441 107 420 107 431 107 b 624 36 510 107 573 86 b 744 -200 688 -27 724 -109 b 747 -230 747 -210 747 -222 b 717 -323 747 -264 736 -292 b 608 -445 688 -370 654 -410 b 307 -541 518 -513 415 -541 l 213 -541 b 39 -521 154 -541 96 -539 b 0 -552 17 -514 0 -531 b 1 -564 0 -556 0 -560 b 17 -611 6 -580 10 -596 b 101 -694 35 -648 50 -684 b 288 -714 164 -707 225 -714 b 402 -706 325 -714 363 -711 z m 1018 92 b 1080 118 1041 91 1068 96 b 1117 219 1099 150 1117 180 b 1113 252 1117 229 1116 240 b 1045 288 1102 297 1068 276 b 1017 262 1028 297 1024 274 b 984 124 989 220 996 170 b 1008 91 979 108 986 91 z m 972 -281 b 1070 -148 1024 -279 1070 -210 b 1025 -105 1070 -105 1045 -112 b 989 -127 1004 -96 998 -114 b 949 -249 963 -164 963 -209 b 969 -281 943 -265 949 -281 z',\n        },\n        unpitchedPercussionClef1: {\n            x_min: 0,\n            x_max: 379.13761966945304,\n            y_min: -250,\n            y_max: 250,\n            ha: 500,\n            o: 'm 481 -360 b 507 -357 491 -360 500 -360 b 546 -295 541 -346 547 -325 b 536 79 543 -170 540 -46 b 523 311 533 157 534 235 b 475 359 518 340 508 359 b 425 360 459 359 442 360 b 400 359 416 360 409 360 b 337 294 348 353 340 347 l 337 -73 b 336 -264 337 -137 337 -200 b 343 -294 336 -274 338 -284 b 481 -360 359 -330 431 -360 z m 144 -341 b 207 -320 167 -341 189 -331 b 217 -301 215 -315 217 -308 b 210 -262 217 -289 210 -275 b 228 187 212 -112 209 37 b 228 287 228 220 229 253 b 174 353 228 336 222 343 b 120 359 157 357 138 359 b 48 357 96 359 72 356 b 17 323 29 357 19 344 b 7 120 16 255 9 187 b 6 -109 6 43 6 -33 l 6 -204 b 0 -251 6 -220 0 -235 b 3 -269 0 -256 0 -262 b 127 -340 24 -330 79 -328 b 144 -341 132 -341 138 -341 z',\n        },\n        '6stringTabClef': {\n            x_min: 0,\n            x_max: 438,\n            y_min: -768,\n            y_max: 767,\n            ha: 1535,\n            o: 'm 369 438 b 374 439 370 438 372 438 b 384 462 383 444 384 452 l 384 474 b 390 697 386 547 390 622 b 373 1002 390 799 390 901 l 533 1002 b 560 1001 541 1004 552 1001 b 573 1007 567 1001 572 1002 b 546 1050 579 1025 559 1038 b 536 1056 543 1053 539 1053 b 324 1104 472 1102 397 1104 b 72 1090 238 1104 154 1099 b 55 1093 66 1090 60 1092 b 37 1073 46 1093 37 1089 b 60 1045 37 1061 48 1051 b 203 1001 105 1022 151 1001 b 233 1004 213 1001 223 1002 b 246 1005 238 1004 243 1005 b 272 975 264 1005 272 996 l 272 965 b 258 596 264 842 265 719 b 315 474 253 540 272 504 l 343 455 b 369 438 351 448 357 438 z m 114 -320 b 127 -304 120 -320 124 -315 b 171 -174 141 -261 158 -219 b 222 -135 179 -147 196 -137 b 426 -122 289 -131 359 -128 b 498 -164 462 -120 482 -127 b 628 -301 521 -226 575 -264 b 631 -288 631 -295 631 -291 b 628 -269 631 -281 629 -276 b 569 -134 616 -220 589 -179 b 408 225 514 -14 462 107 b 314 357 384 274 351 318 b 278 380 298 372 288 379 b 251 351 268 380 261 372 b 4 -209 156 171 75 -17 b 0 -228 1 -215 0 -222 b 19 -258 0 -240 7 -249 b 102 -314 45 -279 75 -294 b 114 -320 107 -318 111 -320 z m 425 6 b 360 20 403 17 382 20 b 274 14 331 20 302 14 l 246 14 l 340 206 b 425 6 369 137 395 75 z m 245 -1106 b 281 -1104 256 -1106 269 -1106 b 511 -888 400 -1094 511 -1035 b 454 -688 511 -814 504 -744 b 448 -678 449 -685 448 -681 b 454 -667 448 -675 449 -671 b 504 -497 503 -619 507 -559 b 324 -288 500 -383 436 -308 b 295 -287 314 -287 304 -287 l 282 -287 b 115 -330 223 -287 168 -307 b 94 -366 102 -336 94 -348 l 94 -370 b 96 -435 96 -392 96 -413 b 73 -858 89 -576 71 -717 b 78 -919 73 -878 78 -899 b 72 -950 78 -930 76 -940 b 63 -992 66 -965 63 -978 b 66 -1015 63 -999 65 -1008 b 173 -1104 84 -1106 84 -1106 b 245 -1106 197 -1104 220 -1104 z m 161 -622 b 147 -618 156 -622 151 -621 b 140 -600 141 -612 140 -606 b 144 -564 140 -589 144 -575 b 143 -554 144 -560 144 -557 l 143 -546 b 220 -451 144 -467 143 -465 b 278 -445 239 -446 259 -444 b 418 -497 328 -445 376 -461 b 429 -516 426 -504 429 -510 b 415 -533 429 -521 423 -527 b 219 -608 357 -579 287 -590 b 215 -609 217 -608 216 -609 b 161 -622 197 -609 177 -622 z m 154 -953 b 130 -933 135 -953 130 -948 l 130 -865 l 128 -865 b 135 -788 130 -838 124 -808 b 203 -769 145 -769 180 -776 b 259 -762 223 -765 242 -762 b 441 -852 330 -762 386 -805 b 449 -867 446 -858 449 -863 b 436 -884 449 -874 444 -878 b 318 -942 402 -914 363 -935 b 154 -953 264 -950 209 -953 z',\n        },\n        timeSig0: {\n            x_min: 20,\n            x_max: 513,\n            y_min: -358.159536277652,\n            y_max: 359,\n            ha: 717.159536277652,\n            o: 'm 341 -516 b 420 -510 367 -516 395 -514 b 675 -338 533 -494 622 -448 b 737 -92 716 -256 734 -171 b 739 -35 739 -73 739 -53 b 680 305 739 86 720 207 b 400 517 622 449 537 517 b 337 514 380 517 359 517 b 289 507 321 511 305 513 b 91 317 192 477 127 412 b 29 9 50 212 29 108 b 217 -458 29 -157 88 -312 b 341 -516 251 -494 291 -518 z m 412 -452 b 359 -425 393 -452 376 -444 b 187 14 242 -301 179 -158 b 268 334 193 127 212 235 b 387 448 295 383 330 428 b 406 452 395 451 400 452 b 428 444 413 452 420 449 b 517 324 471 413 497 372 b 586 -29 560 222 586 86 b 556 -271 586 -112 585 -193 b 468 -422 536 -327 508 -377 b 412 -452 449 -442 431 -452 z',\n        },\n        timeSig1: {\n            x_min: 20,\n            x_max: 283,\n            y_min: -364,\n            y_max: 366,\n            ha: 730,\n            o: 'm 264 -524 b 357 -510 297 -524 325 -516 b 374 -490 369 -508 374 -501 b 380 -438 376 -472 380 -455 l 406 246 b 408 301 408 265 408 282 b 400 445 408 348 405 396 b 288 527 395 491 338 527 b 253 520 276 527 264 526 b 240 508 249 517 245 513 b 49 409 192 445 127 413 b 29 396 33 408 29 403 b 32 380 29 392 30 386 b 59 363 36 366 49 364 b 164 348 95 356 130 348 b 222 357 183 348 203 351 b 238 361 228 360 233 360 b 252 334 248 361 252 353 b 243 59 252 242 249 150 b 219 -490 229 -124 233 -307 b 264 -524 217 -516 232 -524 z',\n        },\n        timeSig2: {\n            x_min: 20,\n            x_max: 660.4636303241031,\n            y_min: -378.7201231608281,\n            y_max: 382,\n            ha: 760.720123160828,\n            o: 'm 99 -543 b 130 -533 111 -550 121 -540 b 255 -448 168 -501 213 -475 b 338 -425 282 -431 310 -425 b 392 -431 356 -425 374 -426 b 485 -462 423 -438 454 -451 b 648 -497 540 -482 595 -497 b 834 -441 711 -497 773 -480 b 950 -242 906 -395 958 -334 b 942 -210 950 -230 950 -215 b 912 -220 932 -204 920 -213 b 861 -264 894 -235 877 -248 b 775 -317 835 -289 808 -305 b 675 -334 742 -328 708 -334 b 510 -295 619 -334 563 -318 b 372 -264 465 -278 420 -264 b 305 -272 350 -264 328 -266 b 331 -242 318 -256 324 -249 b 490 -73 386 -187 438 -131 b 675 340 595 43 664 180 b 677 369 677 350 677 360 b 556 536 677 461 638 508 b 468 550 526 546 497 550 b 297 508 409 550 353 533 b 111 354 220 475 168 412 b 29 197 65 308 29 261 b 32 164 29 187 29 176 b 29 140 33 157 29 147 b 43 125 29 132 32 125 b 73 147 55 125 65 138 b 86 163 79 153 82 158 b 238 320 134 219 183 272 b 425 389 292 367 360 389 b 575 341 480 389 531 373 b 606 298 590 330 606 317 b 600 278 606 292 603 285 b 501 107 576 217 544 158 b 304 -104 439 33 372 -35 b 111 -356 230 -180 167 -265 b 84 -446 92 -386 84 -415 b 86 -481 84 -458 85 -469 b 88 -514 88 -491 88 -503 b 99 -543 89 -526 91 -537 z',\n        },\n        timeSig3: {\n            x_min: 19.824321427094187,\n            x_max: 540,\n            y_min: -392,\n            y_max: 392,\n            ha: 784,\n            o: 'm 216 -540 b 354 -564 264 -556 310 -564 b 605 -465 445 -564 530 -530 b 729 -161 697 -383 729 -275 b 724 -82 729 -135 727 -108 b 589 95 716 -1 670 62 b 523 114 567 102 546 108 b 750 418 606 213 677 315 b 778 503 769 444 778 472 b 773 540 778 514 776 527 b 750 564 769 557 762 564 b 736 562 746 564 742 563 b 641 552 704 553 672 552 b 402 554 562 552 481 554 l 346 554 b 84 546 258 554 170 554 b 36 501 55 543 40 531 b 29 412 30 472 32 442 b 52 384 27 393 32 384 l 56 384 b 210 392 107 389 158 392 l 602 392 b 354 108 523 285 445 192 b 246 -65 300 58 246 12 b 252 -108 246 -78 248 -92 l 252 -111 b 264 -141 251 -122 251 -135 b 291 -132 274 -145 284 -140 b 425 -72 328 -95 377 -84 b 475 -65 442 -68 459 -65 b 592 -108 517 -65 557 -79 b 645 -179 615 -125 645 -147 b 642 -194 645 -184 644 -189 b 485 -376 616 -278 569 -344 b 361 -399 444 -392 402 -399 b 151 -340 289 -399 219 -376 b 88 -275 122 -323 98 -310 b 71 -249 86 -268 85 -249 b 63 -251 68 -249 66 -249 b 36 -288 48 -255 36 -266 b 55 -423 33 -336 45 -377 b 101 -482 60 -448 78 -468 b 216 -540 138 -504 174 -526 z',\n        },\n        timeSig4: {\n            x_min: 20,\n            x_max: 633.0785282750762,\n            y_min: -489.59088556716864,\n            y_max: 491.18559127100053,\n            ha: 980.7764768381692,\n            o: 'm 608 -704 b 641 -684 622 -708 634 -696 b 667 -602 660 -660 662 -631 b 685 -190 683 -465 680 -327 l 685 -176 b 831 -127 736 -166 783 -148 b 912 0 901 -94 913 -76 b 886 53 912 36 904 52 b 848 40 877 53 864 49 l 838 36 b 687 -13 789 14 739 -3 b 681 177 687 50 684 114 b 672 338 678 230 677 285 b 654 373 671 350 672 373 b 622 340 636 373 624 361 b 615 262 621 314 613 288 b 619 -22 616 167 619 72 b 569 -22 602 -23 585 -23 b 305 -3 481 -16 395 -1 b 210 -9 274 -3 242 -4 b 301 163 242 52 268 108 b 513 552 377 288 459 412 b 536 652 526 585 536 618 b 533 683 536 662 534 672 b 520 707 531 691 531 707 b 487 693 508 708 494 704 b 474 668 482 684 477 677 b 384 490 454 603 418 547 b 253 281 343 419 295 351 b 73 -13 194 181 145 78 b 29 -108 50 -42 29 -72 b 37 -147 29 -121 32 -134 b 50 -186 43 -160 50 -173 b 68 -216 52 -207 56 -215 b 92 -207 73 -216 82 -213 b 288 -166 156 -180 220 -166 b 556 -186 377 -166 467 -180 b 586 -189 566 -187 576 -187 b 616 -186 596 -189 606 -189 b 606 -432 613 -268 612 -350 b 596 -625 603 -495 596 -559 b 598 -670 596 -641 596 -655 b 608 -704 598 -683 596 -700 z',\n        },\n        timeSig5: {\n            x_min: 19.663871085403297,\n            x_max: 583,\n            y_min: -389,\n            y_max: 389,\n            ha: 778,\n            o: 'm 132 -536 b 249 -560 168 -553 209 -559 b 507 -462 351 -560 454 -514 b 677 -183 588 -384 642 -289 b 694 -85 688 -150 694 -117 b 540 138 694 12 642 94 b 422 173 501 154 462 167 b 400 187 408 174 400 177 b 405 202 400 190 402 196 b 428 284 416 228 426 255 b 469 312 431 307 442 312 b 757 372 569 312 662 343 b 840 490 821 392 840 432 b 812 560 840 540 834 560 b 763 546 801 560 785 556 b 757 543 762 546 759 544 b 465 484 665 505 570 484 b 396 484 452 484 425 487 b 353 454 377 482 366 474 b 281 300 323 405 304 351 b 245 164 262 255 245 212 b 246 144 245 158 246 151 b 233 63 249 115 243 89 b 225 35 228 50 225 40 b 264 14 225 22 236 19 b 445 -26 325 7 387 0 b 569 -151 501 -52 547 -89 b 575 -180 573 -161 575 -170 b 527 -275 575 -217 547 -245 b 347 -367 484 -334 419 -367 b 261 -351 318 -367 289 -363 b 95 -300 206 -333 154 -307 b 55 -321 73 -297 65 -302 b 29 -468 29 -367 40 -419 b 56 -505 26 -482 36 -500 b 132 -536 82 -514 108 -524 z',\n        },\n        timeSig6: {\n            x_min: 20,\n            x_max: 565,\n            y_min: -363,\n            y_max: 363,\n            ha: 726,\n            o: 'm 390 -518 b 621 -458 469 -507 549 -494 b 814 -134 753 -390 814 -281 b 652 59 814 -16 750 58 b 580 48 629 59 606 55 b 233 -334 392 -9 276 -138 b 115 -228 181 -314 143 -278 b 98 -160 104 -206 98 -183 b 107 -109 98 -144 101 -127 b 167 37 124 -59 145 -12 b 508 340 236 189 347 292 b 575 353 530 347 553 353 b 648 327 600 353 625 346 b 665 320 654 321 661 320 b 687 336 674 320 681 325 b 703 405 697 359 703 382 b 684 472 703 429 697 451 b 593 523 664 504 631 521 b 576 521 588 523 582 523 b 297 403 472 508 380 465 b 115 177 217 344 164 264 b 29 -121 60 82 29 -17 b 53 -278 29 -173 36 -225 b 226 -497 82 -374 131 -454 b 347 -523 265 -514 305 -523 b 390 -518 361 -523 376 -521 z m 351 -357 b 312 -351 337 -356 320 -363 b 325 -315 304 -340 320 -327 b 543 -120 373 -222 448 -158 b 622 -104 570 -108 596 -102 b 717 -132 655 -104 687 -112 b 740 -167 732 -143 740 -153 b 730 -196 740 -176 737 -184 b 563 -321 690 -258 634 -300 b 359 -357 497 -341 428 -354 z',\n        },\n        timeSig7: {\n            x_min: 20.3617407597707,\n            x_max: 592,\n            y_min: -345,\n            y_max: 345,\n            ha: 690,\n            o: 'm 253 -497 b 318 -485 276 -497 297 -487 b 366 -441 348 -482 360 -468 b 487 -104 390 -323 433 -210 b 835 403 580 82 701 246 b 852 436 847 416 852 428 b 815 467 852 451 840 461 b 762 474 798 471 779 474 b 674 445 732 474 701 465 b 603 410 652 431 628 420 b 383 360 533 379 459 360 b 200 435 315 360 249 382 b 88 494 168 469 131 485 b 66 497 81 495 73 497 b 33 484 52 497 39 492 b 50 436 22 469 39 451 b 295 310 114 360 199 324 b 406 301 331 304 369 301 b 593 324 468 301 530 308 b 585 307 589 314 588 310 b 265 -249 451 137 338 -46 b 207 -442 242 -312 223 -377 b 204 -462 206 -449 204 -456 b 253 -497 204 -487 220 -497 z',\n        },\n        timeSig8: {\n            x_min: 20,\n            x_max: 504.15101530718516,\n            y_min: -428,\n            y_max: 428,\n            ha: 856,\n            o: 'm 265 -616 b 289 -615 274 -616 281 -616 b 710 -271 492 -592 657 -485 b 726 -148 721 -229 727 -187 b 585 108 726 -48 687 42 b 572 127 576 114 573 120 b 576 144 572 132 575 138 b 598 301 590 196 598 249 b 586 413 598 338 593 376 b 356 616 559 531 467 616 b 233 582 317 616 275 606 b 29 233 101 505 29 384 b 104 9 29 153 46 72 b 189 -48 127 -16 160 -27 b 92 -158 141 -73 114 -114 b 37 -343 63 -217 50 -279 b 33 -390 35 -359 33 -374 b 265 -616 33 -524 148 -616 z m 258 105 b 124 148 215 105 167 117 b 96 196 105 163 96 177 b 99 217 96 202 96 209 b 197 384 120 281 151 337 b 350 451 242 429 297 451 b 516 364 412 451 472 422 b 530 331 523 354 530 343 l 530 327 l 530 320 b 468 151 520 261 507 200 b 419 122 455 135 442 125 b 258 105 370 117 320 105 z m 328 -438 b 158 -276 233 -436 160 -359 b 166 -239 158 -264 161 -252 b 230 -157 176 -203 202 -179 b 367 -72 274 -125 320 -98 b 448 -49 396 -56 423 -49 b 562 -118 491 -49 528 -72 b 611 -251 590 -157 611 -199 b 569 -341 611 -288 595 -318 b 328 -438 500 -402 416 -432 z',\n        },\n        timeSig9: {\n            x_min: 20,\n            x_max: 494,\n            y_min: -421,\n            y_max: 421,\n            ha: 842,\n            o: 'm 235 -606 b 361 -564 275 -606 318 -593 b 619 -229 487 -482 566 -366 b 706 127 664 -114 694 4 b 711 233 708 163 711 197 b 700 346 711 271 708 308 b 389 606 658 517 530 606 b 351 605 376 606 364 606 b 56 272 171 586 56 441 b 96 98 56 216 69 156 b 334 -53 144 -3 238 -53 b 544 36 408 -53 484 -24 b 652 176 586 78 622 124 b 631 71 645 141 639 105 b 467 -302 599 -63 562 -196 b 271 -442 412 -364 354 -422 b 225 -448 255 -446 239 -448 b 95 -305 148 -448 98 -395 b 89 -255 95 -288 94 -271 b 73 -233 86 -246 85 -233 b 52 -248 65 -233 56 -239 b 29 -317 42 -271 30 -291 b 49 -448 29 -361 40 -405 b 235 -606 69 -541 144 -606 z m 340 104 b 144 209 264 108 194 141 b 127 258 132 225 127 240 b 137 297 127 271 130 284 b 366 449 184 396 269 449 b 517 408 415 449 467 436 b 595 348 546 392 572 372 b 616 305 608 336 616 321 b 609 281 616 298 613 289 b 340 104 557 184 477 104 z',\n        },\n        timeSigCommon: {\n            x_min: 20,\n            x_max: 585,\n            y_min: -298,\n            y_max: 294.49658092772603,\n            ha: 592.496580927726,\n            o: 'm 444 -405 b 829 -45 626 -346 740 -207 b 842 26 842 -23 842 1 b 821 58 842 39 841 58 b 795 40 811 58 802 48 b 765 3 785 29 773 16 b 469 -223 690 -104 596 -183 b 354 -242 431 -235 392 -242 b 180 -177 292 -242 235 -223 b 135 -99 154 -157 140 -131 b 132 -59 134 -85 132 -72 b 141 7 132 -37 135 -16 b 449 274 189 160 297 243 b 477 278 459 276 468 276 b 546 203 517 278 539 253 b 517 157 550 177 533 166 b 485 143 507 153 497 143 l 482 143 b 467 148 478 143 472 144 b 374 183 438 170 406 181 b 264 118 333 183 292 161 b 238 48 246 92 238 69 b 261 -9 238 29 245 10 b 383 -73 287 -39 337 -73 b 412 -68 392 -73 402 -72 b 631 164 526 -27 586 59 b 649 252 644 193 649 222 b 636 328 649 278 645 304 b 504 423 615 400 579 429 b 242 318 408 415 317 387 b 29 -158 104 190 29 33 b 30 -176 29 -164 29 -170 b 115 -364 42 -246 52 -315 b 307 -429 177 -410 240 -429 b 444 -405 351 -429 397 -420 z',\n        },\n        timeSigCutCommon: {\n            x_min: 20,\n            x_max: 695,\n            y_min: -687.0379164869064,\n            y_max: 687,\n            ha: 1374.0379164869064,\n            o: 'm 564 -989 b 595 -945 585 -991 589 -963 l 599 -922 b 605 -628 600 -824 603 -726 l 609 -399 b 878 -251 706 -363 798 -320 b 996 -85 932 -204 976 -153 b 1001 -63 998 -78 1001 -71 b 989 -46 1001 -56 998 -49 b 978 -43 985 -45 982 -43 b 950 -59 968 -43 959 -49 b 733 -216 894 -132 815 -177 b 611 -259 694 -235 652 -249 b 616 -20 612 -179 615 -99 b 680 29 642 -7 665 9 b 698 43 685 36 690 40 b 870 251 792 82 840 160 b 877 294 874 265 877 279 b 818 410 877 338 855 382 b 683 458 779 442 730 448 b 625 468 664 462 644 465 l 625 514 b 638 958 626 662 636 811 b 626 989 638 979 635 989 b 603 981 621 989 613 986 b 422 840 534 945 481 888 b 412 805 412 832 413 818 b 426 713 410 773 420 743 b 445 678 429 690 435 678 b 474 691 452 678 461 683 b 563 755 503 710 530 732 b 564 724 564 740 564 733 b 559 469 563 639 560 554 b 462 454 526 469 494 464 b 112 143 302 399 199 281 b 33 -94 66 71 45 -10 b 29 -148 30 -112 29 -131 b 105 -351 29 -223 52 -291 b 359 -455 171 -426 258 -451 b 517 -431 409 -451 464 -446 l 539 -422 l 539 -477 b 533 -739 536 -563 539 -651 b 530 -824 531 -768 530 -795 b 546 -948 530 -865 533 -907 b 564 -989 552 -962 543 -989 z m 410 -288 b 193 -197 328 -288 253 -264 b 141 -60 160 -161 141 -108 b 157 6 141 -35 147 -12 b 259 158 189 58 217 112 b 438 291 311 215 364 266 b 528 305 468 301 498 305 b 554 304 537 305 546 304 b 553 212 554 274 554 242 b 426 115 498 199 446 164 b 416 68 419 99 416 84 b 425 12 416 49 420 30 b 474 -39 432 -17 448 -32 b 513 -43 487 -42 498 -43 b 547 -40 524 -43 536 -42 l 543 -272 b 461 -285 516 -278 488 -281 b 410 -288 444 -287 426 -288 z m 694 197 b 668 203 685 197 677 199 b 621 216 654 210 638 215 b 622 294 622 242 622 268 b 706 268 651 287 678 278 b 746 235 721 261 734 249 b 752 222 749 230 752 226 b 743 213 752 219 749 215 b 694 197 727 206 711 197 z',\n        },\n        timeSigPlus: {\n            x_min: 0,\n            x_max: 661,\n            y_min: -358,\n            y_max: 358,\n            ha: 716,\n            o: 'm 605 -516 b 629 -490 624 -516 629 -507 b 628 -475 629 -485 628 -481 b 613 -131 624 -405 616 -174 b 612 -96 612 -114 612 -96 l 647 -98 b 897 -115 730 -99 814 -109 b 940 -89 919 -117 935 -109 b 952 -24 946 -69 952 -46 b 948 9 952 -14 950 -3 b 912 39 942 26 933 37 b 609 60 822 48 609 60 b 616 392 609 60 608 291 b 567 488 619 436 605 467 b 511 516 550 498 531 514 b 498 511 507 516 503 514 b 478 446 475 501 480 469 b 467 150 474 348 469 249 b 465 59 465 121 465 59 l 372 49 b 73 14 272 36 173 24 b 49 13 65 13 56 13 b 0 -33 9 13 0 6 b 60 -141 0 -117 6 -140 b 112 -135 73 -141 91 -140 b 413 -102 213 -125 314 -112 b 464 -98 441 -99 464 -98 l 464 -145 b 477 -456 464 -249 468 -353 b 526 -510 478 -488 491 -507 b 589 -513 546 -511 569 -510 b 605 -516 595 -514 600 -516 z',\n        },\n        timeSigPlusSmall: {\n            x_min: 0,\n            x_max: 418,\n            y_min: -197,\n            y_max: 199,\n            ha: 396,\n            o: 'm 301 -284 b 330 -238 320 -284 324 -255 b 348 -46 350 -176 341 -111 b 374 -20 351 -27 356 -23 b 481 -17 409 -16 445 -17 b 566 -9 510 -17 537 -16 b 602 3 579 -7 602 -16 b 566 29 602 19 582 24 b 526 33 553 32 539 33 b 384 39 478 36 432 39 b 356 62 363 39 356 42 l 356 68 b 359 177 359 104 359 141 l 359 251 b 341 287 359 264 361 285 b 311 255 324 287 314 272 b 310 228 311 246 310 236 l 301 69 b 275 39 301 49 295 39 l 271 39 b 210 40 251 40 230 40 b 167 39 196 40 181 40 b 89 40 141 37 115 40 b 24 30 68 40 46 37 b 0 17 17 27 0 30 l 0 13 b 27 -17 3 0 7 -13 b 91 -22 49 -22 71 -22 b 153 -22 115 -22 137 -20 l 275 -22 b 295 -40 289 -22 295 -27 l 295 -48 b 288 -235 288 -109 287 -171 b 287 -264 288 -243 287 -253 b 301 -284 287 -275 289 -284 z',\n        },\n        timeSigMinus: {\n            x_min: 0,\n            x_max: 662,\n            y_min: -54,\n            y_max: 55,\n            ha: 109,\n            o: 'm 39 -78 b 49 -76 42 -78 45 -76 b 452 -75 94 -75 272 -75 b 861 -76 632 -75 814 -76 b 953 -20 927 -79 953 -66 b 948 27 953 -7 950 9 b 946 37 948 30 948 35 b 896 79 940 63 929 79 b 471 78 827 78 648 78 l 42 78 b 0 37 14 78 0 69 b 23 -66 0 0 17 -32 b 39 -78 24 -75 32 -76 z',\n        },\n        timeSigParensRight: {\n            x_min: 0,\n            x_max: 274.26483738379414,\n            y_min: -722.6326530612245,\n            y_max: 725,\n            ha: 1447.6326530612246,\n            o: 'm 37 -1038 b 69 -1031 48 -1044 59 -1038 b 88 -1015 76 -1027 82 -1021 b 164 -886 120 -976 147 -933 b 333 -351 233 -711 292 -534 b 395 118 366 -204 399 -59 b 389 245 392 144 392 194 b 120 996 369 521 265 766 b 68 1044 99 1030 84 1044 b 19 988 50 1044 36 1024 b 0 922 7 965 0 945 b 20 858 0 901 6 881 b 259 215 141 660 236 449 b 271 -1 266 143 271 71 b 252 -239 271 -82 265 -161 b 148 -667 228 -384 183 -524 b 39 -1009 120 -785 66 -893 b 33 -1031 37 -1017 33 -1024 b 37 -1038 33 -1034 35 -1037 z',\n        },\n        timeSigParensRightSmall: {\n            x_min: 0,\n            x_max: 154.4025307335204,\n            y_min: -422,\n            y_max: 422,\n            ha: 844,\n            o: 'm 43 -608 b 60 -598 48 -608 53 -605 b 117 -511 82 -572 102 -543 b 222 23 193 -350 219 -177 b 213 166 225 55 216 109 b 115 531 206 294 174 416 b 45 603 99 562 76 588 b 30 608 39 606 35 608 b 10 598 23 608 17 603 b 0 546 3 590 0 570 b 23 451 0 507 9 458 b 102 351 66 429 84 390 b 167 42 150 252 167 148 b 163 -49 167 12 166 -19 b 35 -449 151 -192 121 -330 b 14 -504 22 -467 14 -485 b 17 -527 14 -511 16 -520 l 30 -590 b 43 -608 33 -603 37 -608 z',\n        },\n        timeSigParensLeft: {\n            x_min: 0.5555555555555556,\n            x_max: 399.6216117372966,\n            y_min: -728,\n            y_max: 728,\n            ha: 1456,\n            o: 'm 562 -1048 b 573 -1043 566 -1048 570 -1047 b 553 -988 582 -1025 564 -1004 b 472 -884 527 -952 497 -920 b 210 -354 366 -717 275 -541 b 148 -6 170 -240 148 -124 b 160 148 148 45 153 96 b 315 678 189 331 242 508 b 431 901 350 755 380 834 b 459 950 451 926 461 939 b 435 995 459 962 451 972 b 364 1048 405 1034 383 1048 b 305 996 343 1048 325 1028 b 127 624 226 881 174 753 b 1 30 56 432 9 235 b 1 -32 1 9 0 -12 b 180 -629 13 -245 92 -438 b 363 -936 230 -739 298 -835 b 526 -1041 402 -995 448 -1041 b 562 -1048 537 -1040 552 -1048 z',\n        },\n        timeSigParensLeftSmall: {\n            x_min: 0,\n            x_max: 173.45497224367904,\n            y_min: -405,\n            y_max: 404,\n            ha: 809,\n            o: 'm 197 -583 b 222 -553 212 -582 219 -566 b 229 -497 226 -534 229 -516 b 213 -425 229 -472 225 -448 b 102 -177 173 -344 132 -262 b 62 30 78 -111 58 -42 b 91 183 66 82 75 134 b 215 426 118 271 156 356 b 249 552 246 465 252 505 b 230 582 249 563 246 582 b 197 563 219 582 206 576 b 71 356 144 500 105 429 b 0 50 26 259 3 158 b 13 -112 4 -3 7 -58 b 176 -559 29 -275 105 -416 b 196 -583 180 -569 186 -583 z',\n        },\n        noteheadDoubleWhole: {\n            x_min: -0.4444444444444444,\n            x_max: 614.1875,\n            y_min: -223.03296670127517,\n            y_max: 223,\n            ha: 446.0329667012752,\n            o: 'm 35 -321 b 62 -266 58 -318 58 -288 l 62 -194 b 63 50 62 -114 63 -32 b 60 189 63 96 63 143 b 43 300 59 226 60 265 b 29 321 40 308 39 321 l 26 321 b 0 292 13 318 0 310 b 0 248 0 278 -1 262 b 6 147 4 215 6 181 b 4 48 6 114 4 81 b 6 0 4 32 6 16 b 7 -36 7 -12 7 -24 l 7 -52 b 6 -156 7 -86 6 -121 b 19 -275 6 -196 9 -236 b 35 -321 23 -291 16 -323 z m 847 -314 b 871 -288 860 -315 867 -300 b 884 -187 881 -255 886 -222 b 876 115 878 -86 876 14 b 877 255 876 161 876 209 b 868 291 877 268 873 279 b 855 304 867 301 863 304 b 844 301 852 304 848 304 b 822 265 825 292 822 278 b 824 251 822 259 822 255 b 822 170 822 225 822 197 l 822 -20 b 835 -284 827 -86 825 -186 b 847 -314 837 -295 835 -311 z m 757 -291 b 793 -171 796 -255 792 -212 b 795 -49 795 -131 795 -91 b 786 207 795 36 791 121 b 779 240 786 217 783 229 b 766 258 776 246 776 258 b 762 256 765 258 763 256 b 739 236 752 253 740 252 b 733 177 737 216 732 197 b 737 20 737 125 739 73 l 737 -107 b 740 -202 737 -138 739 -170 b 757 -291 740 -230 743 -261 z m 128 -261 b 144 -251 135 -264 141 -256 b 158 -203 156 -236 157 -220 b 161 -137 161 -181 161 -158 b 157 30 161 -81 157 -26 b 158 76 157 45 157 60 l 158 101 b 156 225 158 141 158 183 b 137 253 156 235 154 253 l 134 253 b 109 222 120 251 109 242 b 104 91 108 179 104 134 b 108 -58 104 42 109 -9 b 107 -105 108 -73 108 -89 b 105 -127 107 -112 107 -120 b 118 -245 105 -167 114 -204 b 128 -261 118 -252 121 -259 z m 488 -242 b 693 -79 595 -249 685 -166 l 693 -55 b 690 0 693 -36 691 -17 b 540 187 684 84 621 164 b 449 200 508 196 480 200 b 210 104 363 200 282 163 b 186 56 196 92 186 76 b 207 -82 186 9 192 -37 b 300 -204 225 -132 248 -181 b 488 -242 356 -229 415 -240 z m 490 -88 b 449 -86 477 -88 464 -88 b 287 -56 399 -85 341 -78 b 258 -33 275 -52 258 -48 b 282 -7 258 -20 272 -13 b 458 43 340 23 399 43 b 580 14 497 43 537 35 b 618 -20 606 1 619 -9 b 592 -58 618 -30 609 -42 b 490 -88 562 -82 528 -88 z',\n        },\n        noteheadWhole: {\n            x_min: 0,\n            x_max: 380.16649762501584,\n            y_min: -186.17102907059297,\n            y_max: 165,\n            ha: 351.17102907059297,\n            o: 'm 547 40 b 223 -268 543 -151 367 -259 b 102 -233 180 -271 143 -248 l 62 -216 b 0 -127 22 -197 0 -166 b 6 -91 0 -115 1 -104 b 122 141 33 -9 69 71 b 327 238 170 204 249 238 b 514 158 397 238 467 212 b 547 40 544 125 549 84 z m 248 -107 b 384 -63 295 -102 341 -88 b 426 -23 402 -53 415 -40 b 435 3 432 -14 435 -6 b 413 32 435 14 428 24 b 301 73 376 49 343 73 b 272 69 291 73 282 72 b 121 -35 207 53 157 20 b 111 -58 117 -42 111 -50 b 125 -75 111 -65 115 -71 b 248 -107 164 -89 202 -107 z',\n        },\n        noteheadHalf: {\n            x_min: 0,\n            x_max: 334,\n            y_min: -174,\n            y_max: 175,\n            ha: 349,\n            o: 'm 480 56 b 167 -251 478 -115 331 -251 b 94 -242 143 -251 118 -248 b 9 -141 43 -229 20 -192 b 0 -68 3 -115 0 -91 b 284 249 0 95 127 200 b 304 252 289 251 297 252 b 481 78 374 252 481 170 b 480 56 481 71 481 63 z m 213 -102 b 399 6 274 -81 341 -48 b 402 17 400 7 402 13 b 399 27 402 22 400 26 b 311 94 373 53 353 88 b 292 95 305 95 300 95 b 130 27 230 95 181 55 b 69 -62 98 9 62 -29 b 161 -98 76 -98 128 -91 b 213 -102 174 -101 186 -101 z',\n        },\n        noteheadBlack: {\n            x_min: 0,\n            x_max: 334.04644433966797,\n            y_min: -164,\n            y_max: 164,\n            ha: 328,\n            o: 'm 112 -233 b 141 -236 122 -235 131 -236 b 481 104 279 -236 485 -48 b 403 222 477 141 478 192 b 334 236 382 232 359 236 b 1 -59 180 236 13 59 b 0 -85 1 -68 0 -76 b 112 -233 0 -157 32 -215 z',\n        },\n        noteheadXDoubleWhole: {\n            x_min: 0,\n            x_max: 730,\n            y_min: -266,\n            y_max: 267,\n            ha: 533,\n            o: 'm 1018 -373 b 1032 -361 1025 -376 1028 -367 b 1051 -287 1047 -338 1051 -314 b 1050 -252 1051 -276 1051 -264 b 1030 186 1031 -107 1037 40 b 1031 266 1028 213 1031 239 b 1018 363 1031 300 1028 331 b 1005 384 1015 373 1017 384 l 1004 384 b 984 363 992 384 986 373 b 982 343 982 356 982 348 b 981 235 982 307 981 271 b 996 -285 981 60 986 -112 b 1009 -360 998 -311 1005 -336 b 1018 -373 1011 -364 1014 -373 z m 16 -383 b 49 -328 39 -367 48 -350 b 69 56 58 -202 62 -73 b 75 212 72 107 72 160 b 78 278 76 233 78 255 b 59 382 78 312 73 347 b 29 328 33 372 29 350 b 13 -29 29 209 23 88 b 3 -222 7 -95 10 -157 b 0 -265 1 -236 0 -252 b 16 -383 0 -304 6 -343 z m 923 -314 b 955 -240 948 -289 952 -265 b 965 -65 962 -181 965 -125 b 963 0 965 -45 965 -22 b 962 111 960 37 962 73 b 953 240 962 154 960 197 b 939 275 952 253 952 275 b 913 239 924 274 913 258 b 913 173 914 217 913 194 b 914 135 913 160 913 147 b 920 27 919 98 920 63 b 909 -128 920 -26 917 -78 b 906 -179 906 -147 906 -163 b 923 -314 906 -223 913 -266 z m 121 -301 b 143 -272 134 -301 138 -284 b 147 -255 145 -268 145 -261 b 173 160 161 -117 166 22 b 173 233 173 184 174 209 b 157 264 171 243 171 264 b 137 235 143 264 138 249 b 132 207 135 226 132 216 b 121 43 128 153 124 96 b 105 -186 117 -36 105 -111 b 111 -269 105 -215 107 -242 b 121 -301 114 -281 104 -300 z m 210 -238 b 376 -193 274 -239 327 -226 b 471 -134 406 -173 439 -154 b 534 -94 491 -120 513 -107 b 671 -192 579 -127 624 -161 b 733 -226 691 -204 708 -228 b 746 -225 737 -228 742 -226 b 845 -204 782 -226 814 -213 b 868 -194 854 -203 865 -203 b 852 -173 871 -183 860 -179 b 661 -40 789 -128 724 -84 b 642 -27 654 -36 648 -32 b 861 114 716 17 791 63 b 886 132 870 120 886 121 l 886 137 b 852 164 883 151 867 161 b 776 176 827 170 801 176 b 685 145 744 176 714 168 b 530 45 638 107 583 76 b 403 132 487 73 444 101 b 279 176 364 161 324 171 b 223 160 259 176 229 176 b 258 115 215 141 242 127 b 431 -17 314 71 372 26 b 173 -196 341 -73 253 -130 b 157 -209 168 -200 157 -203 b 158 -215 157 -212 157 -215 b 183 -236 166 -223 168 -235 b 210 -238 194 -236 206 -239 z m 768 -207 b 533 -40 687 -150 609 -94 b 321 -173 462 -85 392 -130 b 261 -194 304 -184 287 -196 b 239 -193 253 -196 246 -194 b 387 -95 294 -157 340 -125 b 505 -20 426 -71 465 -45 l 484 -4 b 353 89 441 27 396 56 b 320 115 341 96 330 107 b 297 141 311 124 297 132 b 300 148 297 144 298 145 b 336 135 311 164 324 143 b 528 -4 400 89 464 42 l 723 121 b 770 140 737 131 753 138 b 792 132 779 140 789 141 b 778 115 795 122 783 120 b 586 -6 714 75 651 35 b 557 -24 576 -13 567 -19 b 726 -147 613 -66 670 -109 b 768 -207 744 -161 765 -173 z',\n        },\n        noteheadXWhole: {\n            x_min: 0,\n            x_max: 506,\n            y_min: -143.0823320899293,\n            y_max: 144,\n            ha: 287.0823320899293,\n            o: 'm 53 -206 b 219 -163 117 -207 170 -196 b 314 -102 249 -141 282 -122 b 377 -63 334 -89 356 -76 b 514 -161 422 -96 468 -128 b 576 -196 534 -174 552 -196 b 589 -193 580 -196 585 -196 b 688 -174 625 -194 657 -181 b 711 -158 698 -171 711 -173 b 696 -143 711 -151 701 -147 b 503 -9 632 -98 567 -52 l 485 4 b 704 145 559 49 634 95 b 729 164 711 150 729 151 l 729 168 b 696 196 726 183 710 193 b 621 207 671 202 645 207 b 528 177 589 207 557 200 b 373 76 480 140 426 108 b 246 164 330 104 287 132 b 122 206 207 193 167 203 b 66 192 102 207 72 207 b 99 147 58 173 85 158 b 274 14 157 102 215 58 b 16 -164 184 -42 96 -98 b 0 -179 12 -168 0 -170 b 1 -183 0 -180 0 -183 b 26 -204 6 -193 12 -204 b 53 -206 37 -206 49 -206 z m 611 -177 b 376 -9 530 -118 452 -63 l 164 -143 b 104 -164 147 -154 130 -164 b 82 -161 96 -164 89 -164 b 230 -65 137 -125 183 -95 l 347 12 b 327 26 341 16 334 22 l 196 121 b 163 147 184 128 173 137 b 140 173 154 154 140 163 b 143 180 140 176 141 177 b 179 166 154 194 167 174 l 372 27 l 566 153 b 613 171 580 161 596 170 b 635 160 624 171 635 174 b 621 147 635 153 626 150 l 429 24 b 400 6 419 19 409 13 b 569 -117 456 -35 513 -75 b 611 -177 588 -130 608 -143 z',\n        },\n        noteheadXHalf: {\n            x_min: 0,\n            x_max: 421,\n            y_min: -145.51844828189743,\n            y_max: 151,\n            ha: 296.51844828189746,\n            o: 'm 490 -209 b 539 -207 505 -207 521 -207 b 606 -209 560 -207 583 -209 b 598 -196 602 -203 600 -199 l 406 -19 l 540 130 b 547 144 546 135 547 140 b 536 156 547 148 543 153 b 488 192 518 166 503 176 b 416 217 471 209 444 217 b 323 180 380 217 344 204 l 264 115 b 239 138 256 122 248 131 b 33 197 180 196 108 200 b 3 186 23 197 6 193 b 19 154 -1 174 10 163 b 171 12 69 107 120 59 b 19 -157 120 -45 69 -101 b 0 -177 14 -163 0 -166 b 1 -181 0 -179 0 -180 b 39 -203 9 -197 22 -203 l 186 -203 b 197 -202 190 -202 193 -200 l 213 -202 b 262 -180 228 -202 246 -199 l 314 -122 b 490 -209 363 -170 412 -216 z m 435 -148 b 291 -30 379 -112 337 -69 l 213 -118 b 190 -137 207 -125 202 -137 b 145 -111 173 -130 154 -127 b 160 -79 137 -98 151 -88 b 238 16 184 -48 212 -16 b 141 99 204 43 173 72 l 124 117 b 115 132 121 121 115 127 b 118 137 115 134 117 137 b 141 132 127 147 135 138 l 253 36 b 347 150 285 75 315 112 b 370 164 354 160 363 163 b 403 145 382 164 393 156 b 416 127 412 140 416 132 b 405 102 416 118 412 111 l 307 -10 b 413 -105 343 -42 379 -73 b 435 -148 425 -115 436 -125 z',\n        },\n        noteheadXBlack: {\n            x_min: 0,\n            x_max: 289,\n            y_min: -156,\n            y_max: 157,\n            ha: 313,\n            o: 'm 23 -225 b 69 -204 40 -223 56 -219 b 137 -131 92 -180 115 -157 l 209 -50 b 377 -197 264 -101 321 -148 b 403 -210 384 -203 393 -210 l 408 -210 b 416 -192 416 -207 416 -199 l 416 -186 b 403 -148 416 -171 413 -158 b 344 -81 384 -125 367 -101 b 252 -1 312 -55 282 -29 b 377 157 297 49 340 101 b 402 202 387 170 402 187 b 395 217 402 207 400 213 b 376 226 389 223 382 226 b 334 192 360 226 346 204 b 206 42 289 143 248 94 b 96 161 167 81 131 120 b 60 193 86 174 76 189 b 33 206 52 196 42 206 b 22 199 29 206 26 204 b 10 173 14 190 10 181 b 22 147 10 166 14 157 b 148 7 62 98 104 52 b 164 -7 154 1 158 -3 b 10 -189 111 -66 55 -122 b 0 -212 6 -197 0 -203 b 1 -217 0 -213 0 -216 b 23 -225 4 -226 14 -222 z',\n        },\n        noteheadCircleXDoubleWhole: {\n            x_min: 0,\n            x_max: 437,\n            y_min: -220,\n            y_max: 219.03988406941295,\n            ha: 439.03988406941295,\n            o: 'm 10 -304 b 40 -206 43 -275 37 -239 b 55 168 48 -81 50 45 b 53 269 56 202 55 236 b 33 315 52 287 46 314 b 3 269 9 317 4 291 b 0 239 1 259 0 249 l 0 -196 b 10 -304 1 -232 7 -268 z m 592 -317 b 621 -220 619 -287 621 -253 b 622 -121 622 -187 622 -154 b 625 -20 622 -88 622 -55 b 629 101 628 20 629 60 b 628 220 629 141 628 181 b 618 253 628 232 625 243 b 608 275 613 259 616 274 b 602 272 606 275 603 275 b 575 249 590 269 575 266 l 575 246 b 573 222 575 239 573 230 l 573 -50 b 592 -317 575 -137 570 -225 z m 79 -285 b 114 -6 96 -261 109 -131 b 117 -63 114 -24 114 -45 b 249 -242 124 -151 166 -212 b 324 -256 275 -252 300 -256 b 504 -137 406 -256 478 -209 b 505 -265 504 -180 505 -222 b 513 -282 505 -269 510 -275 b 533 -248 526 -272 528 -261 b 540 -174 539 -223 540 -199 l 540 -127 b 553 207 546 -16 549 95 b 543 232 553 216 554 232 b 518 207 530 233 518 222 b 511 118 520 177 510 148 l 511 92 b 330 216 488 174 420 223 b 301 215 320 216 311 216 b 122 65 202 204 151 163 b 114 9 117 46 114 27 b 115 75 114 32 115 53 b 101 248 115 157 109 228 b 76 206 78 242 76 225 l 76 91 b 75 -26 76 52 76 13 b 69 -189 72 -81 66 -134 b 79 -285 71 -219 76 -249 z m 317 4 b 219 109 285 40 252 75 l 209 120 b 331 153 248 141 289 151 b 420 137 360 153 390 147 b 446 120 435 131 442 127 l 436 108 l 328 -7 z m 215 -131 b 216 -101 215 -122 215 -114 b 219 -45 217 -82 219 -63 b 197 94 219 3 213 49 l 197 95 b 199 94 199 95 199 94 l 310 -27 b 233 -108 285 -55 259 -81 z m 442 -141 b 432 -122 441 -134 436 -128 l 344 -26 l 426 58 l 445 81 b 444 75 445 78 444 76 b 428 -13 433 46 428 16 b 446 -104 428 -45 433 -75 b 452 -122 449 -111 452 -117 b 442 -141 452 -131 448 -137 z m 323 -190 b 272 -180 305 -187 288 -184 b 217 -158 239 -173 225 -168 l 327 -45 b 330 -48 328 -46 328 -48 b 432 -150 363 -82 393 -121 b 323 -190 400 -174 364 -189 z',\n        },\n        noteheadCircleXWhole: {\n            x_min: 0,\n            x_max: 323,\n            y_min: -190,\n            y_max: 184.44625787787314,\n            ha: 374.4462578778731,\n            o: 'm 156 -258 b 240 -274 184 -268 213 -274 b 455 -101 347 -274 441 -202 b 465 19 462 -60 465 -22 b 464 71 465 36 465 52 b 246 265 455 194 370 274 b 216 264 236 265 226 264 b 12 94 102 251 45 203 b 0 13 3 66 1 40 b 4 -55 0 -10 3 -32 b 156 -258 14 -154 60 -222 z m 245 10 b 233 23 242 14 238 19 b 121 144 196 65 158 104 l 109 154 b 249 192 156 179 202 192 b 351 174 284 192 317 186 b 380 154 366 168 376 163 b 379 153 380 154 380 153 b 369 141 376 148 372 145 b 245 10 327 98 287 53 z m 115 -131 b 118 -96 117 -121 117 -111 b 121 -27 120 -73 121 -50 b 98 124 121 24 115 75 b 96 127 96 125 98 125 b 99 125 98 127 98 125 b 225 -12 140 79 181 33 l 138 -105 b 115 -131 131 -114 122 -121 z m 376 -143 b 363 -121 374 -134 369 -128 b 265 -12 331 -85 298 -48 l 357 85 b 379 111 364 94 372 101 b 377 102 379 108 377 105 b 359 4 364 71 359 37 b 382 -99 359 -32 366 -66 b 387 -121 384 -108 386 -115 b 376 -143 387 -130 382 -135 z m 239 -197 b 181 -187 220 -194 200 -192 b 121 -161 145 -177 128 -173 b 243 -33 161 -118 203 -75 l 248 -36 b 364 -153 285 -75 320 -118 b 239 -197 327 -180 287 -197 z',\n        },\n        noteheadCircleXHalf: {\n            x_min: 0,\n            x_max: 309,\n            y_min: -179,\n            y_max: 179,\n            ha: 358,\n            o: 'm 232 -258 b 435 -94 328 -258 412 -196 b 445 6 444 -60 445 -27 b 444 69 445 27 445 48 b 258 258 439 170 374 258 l 230 258 l 207 256 b 14 107 111 248 45 202 b 0 12 4 75 0 43 b 12 -82 0 -20 4 -50 b 144 -242 27 -160 69 -212 b 232 -258 174 -252 203 -258 z m 192 60 b 115 141 166 88 141 115 l 108 150 b 226 189 141 173 186 189 b 253 186 236 189 245 187 b 305 180 271 183 288 183 b 192 60 268 140 229 101 z m 56 -78 b 45 6 43 -56 45 -23 b 65 84 49 39 50 45 b 85 121 72 96 78 107 b 95 124 88 124 92 127 b 171 39 120 95 145 68 z m 360 -132 b 348 -112 359 -124 353 -118 l 300 -58 l 387 37 b 410 63 397 48 405 56 b 413 26 412 52 413 40 b 360 -132 413 -42 393 -95 z m 232 -183 b 184 -177 217 -183 202 -181 l 281 -78 b 348 -143 301 -101 323 -122 b 232 -183 318 -168 279 -183 z',\n        },\n        noteheadCircleX: {\n            x_min: 0,\n            x_max: 344,\n            y_min: -179,\n            y_max: 175.12551922594866,\n            ha: 354.12551922594866,\n            o: 'm 99 -210 b 236 -258 137 -242 186 -258 b 418 -183 305 -258 374 -230 b 495 33 475 -120 495 -48 b 494 66 495 45 494 55 b 302 252 487 183 405 256 b 181 243 262 249 222 248 b 46 171 128 236 79 219 b 0 19 14 127 0 73 b 99 -210 0 -68 35 -156 z m 245 42 l 124 156 b 200 176 145 166 170 173 b 337 183 245 181 291 184 b 377 176 351 183 364 180 b 245 42 333 131 288 86 z m 392 -99 l 285 3 l 400 121 b 418 154 409 131 418 140 b 465 50 448 130 465 94 b 405 -112 462 -17 439 -73 z m 89 -120 b 48 0 56 -82 48 -42 b 89 112 48 35 59 76 b 109 101 96 111 102 108 l 210 7 l 187 -17 b 89 -120 151 -53 125 -82 z m 176 -183 b 127 -163 158 -179 141 -171 l 252 -32 l 372 -144 b 233 -189 334 -173 285 -189 b 176 -183 215 -189 196 -187 z',\n        },\n        noteheadCircledDoubleWhole: {\n            x_min: 0,\n            x_max: 672,\n            y_min: -291,\n            y_max: 291,\n            ha: 582,\n            o: 'm 27 -419 b 43 -369 37 -403 43 -387 b 49 -82 45 -272 49 -177 b 50 370 50 69 50 219 b 30 419 50 389 50 419 b 7 369 7 419 7 389 b 0 -284 4 151 1 -66 b 16 -418 0 -328 10 -373 z m 945 -374 b 968 -282 963 -343 968 -312 b 966 -245 968 -269 968 -258 b 958 -45 959 -179 962 -111 b 948 262 949 56 952 160 b 936 377 946 301 946 340 b 922 399 933 386 933 399 l 919 397 b 897 374 909 396 899 389 b 894 308 897 353 893 331 b 904 120 899 246 903 183 b 913 -111 907 43 909 -35 b 927 -297 916 -173 919 -235 b 945 -374 930 -320 927 -347 z m 95 -347 b 120 -292 115 -325 117 -310 b 124 -223 122 -269 124 -246 b 122 -141 124 -196 122 -168 b 121 -85 121 -122 121 -104 b 462 -297 170 -209 300 -297 b 727 -219 543 -294 639 -271 b 828 -118 773 -190 808 -157 b 842 -268 831 -168 834 -219 b 851 -288 844 -275 840 -287 b 865 -272 861 -289 863 -279 b 873 -225 871 -256 873 -240 b 873 -171 873 -207 871 -190 b 858 196 868 -48 863 75 b 848 295 857 229 854 262 b 840 315 848 301 850 315 l 837 315 b 816 295 827 314 816 307 b 809 216 815 268 808 243 b 815 102 812 179 814 140 b 672 295 780 176 733 240 b 500 370 621 340 566 370 b 436 361 480 370 459 367 b 120 95 288 321 183 233 l 120 256 b 115 287 120 266 118 276 b 104 305 112 292 115 305 l 101 305 b 82 284 91 304 82 297 b 76 216 81 262 76 239 b 84 -253 78 59 79 -96 b 95 -347 84 -282 89 -311 z m 780 -33 b 779 -24 780 -30 779 -27 b 704 92 766 22 743 62 b 544 173 655 128 599 147 b 400 206 497 194 448 204 b 307 193 369 206 338 202 b 202 118 264 181 226 153 b 235 168 212 135 222 151 b 505 337 302 262 396 312 b 523 338 511 337 517 338 b 611 288 559 338 586 312 b 763 62 678 225 733 151 b 780 -33 776 26 782 -4 z m 435 -88 b 337 -23 387 -88 354 -65 b 333 6 334 -14 333 -6 b 366 86 333 35 344 66 b 456 122 390 111 423 121 b 602 27 517 122 582 88 b 606 1 605 19 606 10 b 575 -49 606 -20 596 -36 b 435 -88 530 -76 481 -82 z m 441 -269 b 194 -96 327 -262 249 -194 b 167 1 176 -62 167 -30 b 177 59 167 22 171 42 b 174 39 176 52 174 46 b 266 -104 174 -27 210 -73 b 511 -151 346 -148 435 -144 l 552 -151 b 740 -104 616 -145 683 -141 b 776 -66 756 -94 769 -81 b 700 -174 766 -105 740 -140 b 441 -269 632 -232 533 -268 z',\n        },\n        noteheadCircledWhole: {\n            x_min: -50,\n            x_max: 472,\n            y_min: -231.00750990437078,\n            y_max: 232,\n            ha: 463.00750990437075,\n            o: 'm 289 -333 b 553 -255 370 -330 465 -307 b 680 -62 635 -206 680 -138 b 662 22 680 -36 674 -7 b 500 259 626 112 573 193 b 327 334 448 304 393 334 b 264 325 307 334 287 331 b -59 49 111 284 4 193 b -72 -19 -68 26 -72 4 b 289 -333 -72 -192 84 -334 z m 608 -69 b 605 -60 606 -66 606 -63 b 530 56 592 -14 570 26 b 372 137 482 92 425 111 b 228 170 324 158 275 168 b 134 157 196 170 166 166 b 29 82 91 145 53 117 b 60 132 37 99 49 115 b 333 301 128 226 223 276 b 350 302 338 301 344 302 b 438 252 386 302 413 276 b 590 26 505 189 560 115 b 608 -69 603 -10 608 -40 z m 262 -124 b 164 -59 215 -124 180 -101 b 160 -32 161 -50 160 -42 b 193 50 160 -3 171 30 b 284 86 217 75 251 85 b 429 -9 344 86 409 52 b 433 -36 432 -17 433 -26 b 402 -85 433 -56 423 -72 b 262 -124 357 -112 307 -118 z m 268 -305 b 22 -132 154 -298 76 -230 b -6 -33 3 -98 -6 -65 b 3 23 -6 -14 -3 6 b 1 3 1 16 1 10 b 94 -140 1 -63 37 -109 b 338 -187 173 -184 261 -180 l 379 -187 b 566 -140 444 -181 510 -177 b 602 -102 582 -130 595 -117 b 526 -210 592 -141 567 -176 b 268 -305 459 -268 360 -304 z',\n        },\n        noteheadCircledHalf: {\n            x_min: -50,\n            x_max: 393,\n            y_min: -175,\n            y_max: 175,\n            ha: 350,\n            o: 'm 540 39 b 408 187 503 94 464 148 b 259 252 356 223 301 252 b 35 192 160 252 95 229 b -68 50 -17 160 -53 112 b -72 13 -71 37 -72 24 b 69 -204 -72 -79 -1 -161 b 246 -252 125 -238 186 -252 b 500 -164 336 -252 426 -219 b 566 -42 543 -132 566 -88 b 540 39 566 -14 557 14 z m 9 -42 b 12 -68 10 -50 10 -59 b -7 6 3 -46 -4 -22 b 131 189 1 98 55 153 b 243 220 167 206 204 215 b 261 222 249 222 255 222 b 377 161 308 222 341 189 b 435 89 402 141 420 117 b 431 92 433 89 432 91 b 346 120 402 102 372 107 b 253 143 314 135 282 143 b 85 79 193 143 138 115 b 9 -42 45 52 10 13 z m 356 39 b 343 1 356 24 351 12 b 206 -111 304 -46 259 -84 b 181 -118 196 -115 189 -118 b 156 -71 163 -118 154 -102 b 238 35 164 -22 199 9 b 324 66 264 52 294 59 b 356 39 348 71 356 62 z m 488 -78 b 392 -176 471 -125 433 -154 b 246 -225 346 -200 297 -217 b 230 -226 240 -226 235 -226 b 157 -204 203 -226 180 -215 b 78 -154 128 -190 101 -174 b 232 -184 128 -171 180 -184 b 344 -161 269 -184 307 -179 b 491 -39 405 -135 455 -94 b 500 -23 495 -33 497 -29 b 488 -78 500 -40 494 -59 z',\n        },\n        noteheadCircledBlack: {\n            x_min: -70,\n            x_max: 326,\n            y_min: -168,\n            y_max: 192,\n            ha: 360,\n            o: 'm 176 -239 b 190 -242 180 -240 186 -240 b 262 -232 213 -242 238 -235 b 469 -19 384 -225 469 -131 b 467 22 469 -6 468 9 b 383 194 455 86 436 151 b 183 276 315 249 251 275 b 32 236 134 276 85 264 b -94 88 -30 207 -75 160 b -101 30 -98 69 -101 49 b 176 -239 -101 -107 9 -251 z m 177 -212 b -30 -27 81 -213 -13 -131 b -33 17 -33 -13 -33 3 b 127 226 -33 111 14 187 b 194 239 151 233 173 238 b 301 203 232 239 266 226 b 364 134 330 184 350 160 b 233 181 341 160 279 180 b 192 171 216 181 202 179 b 13 1 117 131 46 86 b 3 -48 6 -17 3 -33 b 60 -115 3 -79 20 -101 b 203 -135 105 -131 151 -138 b 229 -138 212 -137 220 -137 b 295 -122 251 -138 274 -135 b 400 -33 337 -99 373 -71 b 228 -206 393 -125 330 -192 b 177 -212 209 -209 192 -213 z',\n        },\n        noteheadDoubleWholeSquare: {\n            x_min: 0,\n            x_max: 474,\n            y_min: -209.39230484541326,\n            y_max: 211,\n            ha: 420.39230484541326,\n            o: 'm 648 -301 b 668 -287 658 -304 665 -295 b 683 -209 678 -262 683 -235 b 677 258 681 -55 678 102 b 672 284 677 266 677 276 b 661 304 670 291 672 304 l 658 304 b 635 279 647 301 635 297 b 629 240 635 266 629 252 l 629 236 b 631 225 629 232 631 228 b 583 194 631 197 611 194 l 528 194 b 125 207 393 194 259 202 b 89 207 114 209 101 206 b 63 210 79 207 71 207 b 52 229 55 213 52 220 b 55 258 52 238 55 248 b 53 266 55 261 55 264 b 36 298 48 276 53 298 l 35 298 b 4 264 14 298 7 284 b 0 187 0 238 0 213 b 4 50 0 143 3 96 b 6 -10 6 30 6 10 b 4 -130 6 -50 4 -91 b 12 -268 4 -176 6 -222 b 19 -287 13 -275 10 -284 b 35 -275 26 -288 30 -281 b 52 -220 50 -261 48 -239 b 75 -199 55 -206 58 -199 l 141 -197 l 274 -197 l 634 -197 b 639 -281 635 -219 636 -251 b 648 -301 641 -288 638 -300 z m 72 -66 b 55 -56 59 -69 55 -65 l 55 -50 b 53 53 55 -16 55 20 b 69 73 53 69 60 72 l 79 72 b 330 65 163 66 246 63 l 592 65 b 634 81 606 65 618 71 b 635 -30 634 39 635 6 b 605 -58 635 -49 628 -58 b 451 -60 553 -60 503 -60 b 219 -59 373 -60 295 -59 l 166 -59 b 72 -66 134 -59 104 -60 z',\n        },\n        noteheadSquareWhite: {\n            x_min: 0,\n            x_max: 350,\n            y_min: -131,\n            y_max: 131,\n            ha: 262,\n            o: 'm 468 -189 b 485 -187 474 -189 480 -189 b 500 -176 495 -187 500 -183 b 498 -168 500 -174 498 -171 b 497 -166 498 -167 497 -167 l 498 -164 b 504 -154 503 -163 504 -158 b 503 -138 504 -150 503 -144 l 503 -135 l 503 -94 b 492 66 500 -45 494 10 b 488 135 492 89 488 112 b 484 150 488 141 485 145 b 482 154 482 151 482 153 b 429 189 472 177 456 189 b 53 184 304 186 179 186 l 39 184 b 33 181 36 183 35 183 b 12 160 20 181 12 177 b 0 -109 9 71 4 -19 b 19 -137 0 -125 7 -134 b 23 -151 19 -141 20 -145 b 85 -187 37 -173 55 -187 b 468 -189 212 -187 340 -187 z m 246 -125 l 63 -125 b 66 -111 65 -122 66 -117 b 73 72 69 -50 71 10 l 73 130 b 88 128 78 128 82 128 b 148 130 108 130 128 130 b 271 128 190 130 230 128 l 271 130 l 420 130 b 428 20 425 92 425 56 l 436 -127 l 246 -127 z',\n        },\n        noteheadSquareBlack: {\n            x_min: 0,\n            x_max: 342,\n            y_min: -129.98961937716263,\n            y_max: 132.44444444444446,\n            ha: 262.4340638216071,\n            o: 'm 217 190 b 439 186 304 190 372 190 b 467 180 448 184 458 183 b 492 145 484 176 492 167 b 490 -124 490 56 490 -33 b 488 -141 490 -130 488 -135 b 456 -170 488 -163 478 -168 b 118 -183 344 -176 230 -181 b 29 -184 89 -183 60 -192 b 0 -148 4 -180 0 -168 b 1 29 1 -89 1 -30 l 1 156 b 36 190 3 187 4 190 b 217 190 102 192 168 190 z',\n        },\n        noteheadTriangleDownDoubleWhole: {\n            x_min: 0,\n            x_max: 510,\n            y_min: -213,\n            y_max: 213,\n            ha: 426,\n            o: 'm 16 -307 b 30 -289 26 -307 29 -297 b 43 -236 36 -272 42 -253 l 65 219 b 59 285 62 240 69 264 b 46 307 55 294 58 307 l 43 307 b 19 279 30 304 20 295 b 13 184 17 248 14 216 b 1 -125 9 81 7 -23 b 0 -163 0 -138 0 -150 b 6 -287 0 -204 4 -245 b 16 -307 6 -295 7 -305 z m 707 -294 b 734 -213 733 -271 734 -242 b 729 245 733 -60 730 92 b 719 285 729 259 724 272 b 707 298 716 291 714 298 l 703 298 b 685 284 696 297 687 292 b 683 253 683 274 683 264 b 691 -181 685 108 685 -36 b 707 -294 693 -217 690 -256 z m 108 -238 b 125 -203 125 -238 121 -216 b 127 -190 127 -199 127 -194 b 120 -138 127 -173 120 -156 l 120 -66 b 114 167 120 12 118 89 l 118 161 b 314 -153 184 58 248 -48 b 350 -184 327 -173 338 -184 b 387 -154 361 -184 374 -174 b 567 108 449 -68 508 20 b 626 193 588 137 608 164 b 615 -132 622 85 619 -24 l 615 -166 b 619 -207 615 -180 615 -194 b 638 -226 622 -217 629 -225 b 651 -209 648 -226 649 -216 b 658 -177 655 -199 658 -187 l 658 -171 b 667 49 655 -98 667 -23 b 665 88 667 62 667 75 b 665 220 665 135 667 179 b 641 265 664 238 660 265 b 626 243 629 265 626 255 b 628 222 626 236 628 228 b 612 225 624 223 619 225 b 384 223 537 223 461 223 l 384 225 l 170 225 b 131 215 157 225 144 222 b 112 200 122 210 117 206 b 88 266 111 225 108 249 b 75 239 76 259 75 249 b 73 147 75 207 73 179 b 82 -189 73 35 79 -78 b 84 -203 82 -194 82 -199 b 108 -238 86 -219 91 -238 z m 361 -79 b 295 78 336 -26 314 26 b 284 151 287 101 284 125 b 310 177 284 171 291 177 b 419 176 346 176 383 174 l 423 176 b 445 153 441 176 445 168 l 445 147 b 361 -79 442 65 415 -10 z',\n        },\n        noteheadTriangleDownWhole: {\n            x_min: 0,\n            x_max: 366,\n            y_min: -145,\n            y_max: 138,\n            ha: 283,\n            o: 'm 242 -209 b 279 -180 253 -209 266 -200 b 459 84 341 -92 400 -4 b 520 170 480 112 501 141 b 527 189 524 177 527 183 b 504 199 527 196 520 199 l 55 199 b 23 190 45 199 33 196 b 0 161 9 181 0 173 b 10 135 0 154 3 145 b 206 -177 76 32 140 -73 b 242 -209 219 -199 230 -209 z m 253 -105 b 187 52 228 -52 206 0 b 176 127 179 76 176 101 b 197 151 176 144 181 151 l 202 151 b 256 150 220 151 238 150 b 311 151 275 150 294 151 b 337 128 331 151 337 144 l 337 122 b 253 -105 334 39 307 -35 z',\n        },\n        noteheadTriangleDownHalf: {\n            x_min: -0.0833130378007211,\n            x_max: 341,\n            y_min: -159,\n            y_max: 159,\n            ha: 318,\n            o: 'm 266 -229 b 282 -215 274 -229 278 -225 b 487 153 350 -92 418 30 b 491 170 490 158 491 164 b 480 189 491 177 487 183 b 425 215 464 202 448 213 b 33 226 297 217 168 222 b 13 229 29 223 22 229 b 1 222 9 229 4 228 b 14 184 -4 207 7 196 b 210 -176 81 65 145 -56 b 253 -225 222 -194 230 -213 b 266 -229 259 -226 264 -228 z m 134 22 b 147 43 138 27 141 37 b 206 163 174 79 179 127 b 213 170 209 166 212 167 l 340 167 b 193 -75 287 89 251 1 b 190 -82 192 -76 190 -79 z',\n        },\n        noteheadTriangleDownBlack: {\n            x_min: 0,\n            x_max: 346,\n            y_min: -149,\n            y_max: 149,\n            ha: 298,\n            o: 'm 229 -215 b 259 -202 238 -215 248 -210 b 284 -173 269 -194 278 -184 l 482 173 b 498 209 488 184 498 194 b 481 215 492 215 487 215 b 63 213 343 215 203 213 b 12 197 45 213 29 206 b 0 180 4 193 0 187 b 3 168 0 177 1 173 b 13 150 6 163 9 156 l 196 -189 b 229 -215 206 -206 216 -215 z',\n        },\n        noteheadTriangleUpDoubleWhole: {\n            x_min: 0,\n            x_max: 510,\n            y_min: -213,\n            y_max: 213,\n            ha: 426,\n            o: 'm 16 -307 b 30 -289 26 -307 29 -297 b 43 -236 36 -272 42 -253 l 65 219 b 59 285 62 240 69 264 b 46 307 55 294 58 307 l 43 307 b 19 279 30 304 20 295 b 13 184 17 248 14 216 b 1 -125 9 81 7 -23 b 0 -163 0 -138 0 -150 b 6 -287 0 -204 4 -245 b 16 -307 6 -295 7 -305 z m 707 -298 b 734 -217 733 -275 734 -246 b 729 240 733 -65 730 88 b 719 281 729 255 724 268 b 707 294 716 287 714 294 l 703 294 b 685 279 696 292 687 288 b 683 249 683 269 683 259 b 691 -186 685 104 685 -40 b 707 -298 693 -222 690 -261 z m 88 -266 b 112 -200 108 -249 111 -225 b 131 -215 117 -206 122 -210 b 170 -225 144 -222 157 -225 l 384 -225 l 384 -223 b 612 -225 461 -223 537 -223 b 628 -222 619 -225 624 -223 b 641 -265 628 -238 622 -265 b 665 -220 660 -265 664 -238 b 665 -88 667 -179 665 -135 b 667 -49 667 -75 667 -62 b 658 171 667 23 655 98 b 651 209 660 184 655 197 b 638 226 649 216 648 226 b 619 207 629 225 622 217 b 615 166 615 194 615 180 l 615 132 b 626 -193 619 24 622 -85 b 567 -108 608 -164 588 -137 b 387 154 508 -20 449 68 b 350 184 374 174 361 184 b 314 153 338 184 327 173 b 118 -161 248 48 184 -58 l 114 -167 b 120 66 118 -89 120 -12 l 120 138 b 127 190 120 156 127 173 b 125 203 127 194 127 199 b 108 238 121 216 125 238 b 84 203 91 238 86 219 b 82 189 82 199 82 194 b 73 -147 79 78 73 -35 b 75 -239 73 -179 75 -207 b 88 -266 75 -249 76 -259 z m 310 -177 b 284 -151 291 -177 284 -171 b 295 -78 284 -125 287 -101 b 361 79 314 -26 336 26 b 445 -147 415 10 442 -65 b 423 -176 446 -166 442 -176 l 419 -176 b 310 -177 383 -174 346 -176 z',\n        },\n        noteheadTriangleUpWhole: {\n            x_min: 0,\n            x_max: 366,\n            y_min: -145,\n            y_max: 138,\n            ha: 283,\n            o: 'm 504 -209 b 527 -199 520 -209 527 -206 b 520 -180 527 -193 524 -187 b 459 -94 501 -151 480 -122 b 279 170 400 -6 341 82 b 242 199 266 190 253 199 b 206 167 230 199 219 189 b 10 -145 140 63 76 -42 b 0 -171 3 -156 0 -164 b 23 -200 0 -183 9 -192 b 55 -209 33 -206 45 -209 z m 202 -161 b 176 -137 183 -163 176 -156 b 187 -62 176 -111 179 -86 b 253 95 206 -10 228 42 b 337 -132 307 24 334 -49 b 311 -161 338 -153 334 -161 b 256 -160 294 -161 275 -160 b 202 -161 238 -160 220 -161 z',\n        },\n        noteheadTriangleUpHalf: {\n            x_min: 0,\n            x_max: 341.0833130378007,\n            y_min: -159,\n            y_max: 159,\n            ha: 318,\n            o: 'm 458 -226 b 478 -229 462 -223 469 -229 b 490 -222 482 -229 487 -228 b 477 -184 495 -207 484 -196 b 281 176 410 -65 346 56 b 238 225 269 194 261 213 b 225 229 232 226 228 228 b 209 215 217 229 213 225 b 4 -153 141 92 73 -30 b 0 -170 1 -158 0 -164 b 12 -189 0 -177 4 -183 b 66 -215 27 -202 43 -213 b 458 -226 194 -217 323 -222 z m 151 -167 b 298 75 204 -89 240 -1 b 301 82 300 76 301 79 l 357 -22 b 344 -43 353 -27 350 -37 b 285 -163 317 -79 312 -127 b 278 -170 282 -166 279 -167 z',\n        },\n        noteheadTriangleUpBlack: {\n            x_min: 0,\n            x_max: 346,\n            y_min: -149,\n            y_max: 149,\n            ha: 298,\n            o: 'm 481 -215 b 498 -209 487 -215 492 -215 b 482 -173 498 -194 488 -184 l 284 173 b 259 202 278 184 269 194 b 229 215 248 210 238 215 b 196 189 216 215 206 206 l 13 -150 b 3 -168 9 -156 6 -163 b 0 -180 1 -173 0 -177 b 12 -197 0 -187 4 -193 b 63 -213 29 -206 45 -213 b 481 -215 203 -213 343 -215 z',\n        },\n        noteheadSlashedDoubleWhole1: {\n            x_min: 0,\n            x_max: 697,\n            y_min: -290,\n            y_max: 290,\n            ha: 580,\n            o: 'm 20 -418 b 42 -376 40 -418 37 -392 b 43 -356 45 -370 43 -363 l 43 -348 b 50 -197 43 -298 49 -248 b 78 317 58 -24 69 147 b 72 387 75 343 82 366 b 52 418 68 397 69 418 l 49 416 b 24 380 33 413 24 399 b 19 235 23 333 20 284 b 7 -82 14 130 10 24 b 0 -264 6 -143 0 -203 b 10 -382 0 -302 1 -343 b 20 -418 13 -393 6 -418 z m 976 -344 b 991 -331 985 -346 988 -337 b 1004 -271 999 -312 1004 -292 l 1004 -194 b 996 184 1004 -68 1001 59 b 996 281 996 216 998 249 b 984 379 995 314 991 347 b 971 397 981 392 976 396 b 952 386 965 397 959 392 b 943 361 943 380 945 370 b 937 288 939 337 937 312 b 945 158 937 245 942 203 b 959 -248 950 23 953 -112 b 966 -325 960 -274 963 -300 b 976 -344 966 -334 968 -344 z m 102 -331 b 124 -272 120 -314 122 -294 b 135 -278 127 -276 131 -278 l 141 -278 b 320 -199 206 -262 272 -252 b 348 -171 328 -189 338 -180 b 482 -199 392 -190 436 -199 b 704 -173 576 -199 641 -187 b 847 -82 760 -158 809 -130 l 855 -69 l 855 -73 b 863 -229 857 -125 860 -177 b 876 -255 863 -239 863 -255 b 893 -233 886 -255 888 -242 b 900 -189 899 -219 900 -203 l 900 66 b 900 192 899 108 900 150 b 893 301 900 228 899 265 b 877 325 890 310 893 325 l 876 325 b 855 301 865 324 855 315 b 850 202 852 268 847 235 b 854 50 854 151 854 101 b 821 99 847 68 835 85 b 733 167 795 127 765 148 b 831 253 766 196 799 225 b 851 265 837 258 844 261 b 829 282 840 275 835 279 b 772 295 815 291 795 295 b 685 271 739 295 704 287 b 624 215 665 252 645 233 l 566 232 b 527 239 553 236 540 239 b 490 228 514 239 501 236 b 451 219 475 217 467 219 b 275 176 389 219 331 200 b 184 53 216 150 184 105 b 199 -14 184 32 189 10 b 262 -108 215 -52 236 -82 l 125 -230 b 134 225 130 -78 132 73 b 135 269 134 239 135 255 b 121 330 135 291 132 311 b 95 287 99 323 95 307 b 92 124 94 233 95 179 b 85 -143 88 36 85 -53 b 89 -300 85 -196 86 -248 b 102 -331 89 -311 89 -323 z m 367 -14 b 350 43 359 3 351 22 b 392 122 350 82 363 107 b 544 171 439 150 492 160 b 572 168 554 174 563 171 z m 564 -132 b 467 -105 528 -138 497 -121 b 442 -89 458 -101 449 -95 l 658 101 b 690 30 677 82 690 59 b 688 10 690 24 690 17 b 564 -132 678 -45 611 -127 z',\n        },\n        noteheadSlashedWhole1: {\n            x_min: -76,\n            x_max: 498,\n            y_min: -168,\n            y_max: 168,\n            ha: 336,\n            o: 'm -79 -242 b 55 -202 -32 -236 14 -228 l 145 -143 b 333 -171 203 -166 265 -171 b 429 -164 361 -174 395 -168 b 582 -130 481 -158 534 -154 b 657 -20 631 -105 657 -65 b 619 68 657 9 644 40 b 552 120 599 89 577 107 b 582 138 562 127 572 132 b 717 226 625 167 668 194 b 638 242 688 236 662 242 b 543 213 603 242 573 232 b 455 154 514 194 484 174 b 325 199 412 167 367 179 b 233 215 298 210 265 215 b 75 156 173 215 124 186 b 0 27 24 122 0 76 b 66 -98 0 -17 22 -63 b 72 -102 69 -99 71 -101 b -89 -209 17 -137 -36 -173 b -109 -225 -95 -213 -109 -216 b -108 -229 -109 -226 -108 -228 b -85 -242 -104 -239 -95 -242 z m 181 -29 b 167 14 171 -13 167 1 b 187 62 167 30 173 46 b 301 137 217 99 258 118 b 312 138 304 138 308 138 l 317 138 b 389 109 340 125 364 118 l 383 105 z m 337 -109 b 239 -82 301 -107 268 -99 l 468 65 b 482 24 477 53 482 40 b 480 4 482 19 481 12 b 337 -109 467 -56 399 -111 z',\n        },\n        noteheadSlashedHalf1: {\n            x_min: -79.3435119522494,\n            x_max: 471,\n            y_min: -184,\n            y_max: 184,\n            ha: 368,\n            o: 'm -112 -251 b -94 -265 -107 -261 -101 -264 b -52 -242 -79 -265 -63 -249 l 89 -148 b 212 -180 125 -170 167 -179 b 238 -177 220 -180 229 -179 l 262 -180 b 346 -171 289 -180 318 -176 b 576 -91 431 -166 507 -140 b 641 4 619 -60 641 -29 b 592 96 641 35 625 65 l 583 104 b 533 147 567 121 550 134 l 613 200 b 678 261 636 216 664 232 b 658 265 671 264 664 265 b 611 248 641 265 625 258 l 491 171 b 337 204 444 194 392 204 b 281 200 318 204 300 204 b 27 62 180 187 92 145 b -1 -19 9 37 -1 10 b 36 -107 -1 -50 12 -82 b 52 -121 42 -112 46 -117 l -72 -203 b -112 -251 -91 -216 -122 -233 z m 161 -49 b 158 -29 160 -42 158 -35 b 183 33 158 -7 167 16 b 395 137 239 95 311 122 b 420 125 405 134 413 130 z m 276 -128 b 261 -131 271 -130 266 -131 b 181 -86 233 -131 203 -114 l 454 94 l 468 72 b 481 36 477 60 481 49 b 469 1 481 26 477 14 b 276 -128 422 -66 354 -105 z',\n        },\n        noteheadSlashedBlack1: {\n            x_min: -110,\n            x_max: 452,\n            y_min: -190,\n            y_max: 190,\n            ha: 380,\n            o: 'm -131 -274 b -102 -262 -121 -272 -111 -266 b 7 -186 -65 -239 -29 -212 b 50 -157 22 -176 36 -166 b 105 -176 65 -166 84 -173 b 207 -183 140 -181 173 -183 b 239 -184 219 -184 229 -184 b 428 -91 327 -184 377 -150 b 487 43 461 -52 487 -7 b 482 76 487 53 485 65 b 459 128 478 95 469 112 b 507 161 475 138 491 150 l 651 262 b 622 274 641 271 632 274 b 605 271 616 274 611 272 b 514 233 573 262 541 252 l 422 167 b 317 203 392 190 354 203 b 271 196 301 203 285 200 b 168 157 236 186 200 173 b 6 -16 94 120 33 68 b -1 -62 1 -32 -1 -48 b 17 -125 -1 -86 4 -108 b -81 -196 -16 -148 -48 -173 b -145 -242 -102 -212 -128 -219 b -158 -256 -150 -246 -158 -251 b -157 -261 -158 -258 -157 -259 b -131 -274 -153 -269 -141 -274 z',\n        },\n        noteheadSlashedDoubleWhole2: {\n            x_min: -0.12386605641055257,\n            x_max: 697.4733477320805,\n            y_min: -295,\n            y_max: 295,\n            ha: 590,\n            o: 'm 870 -338 b 891 -315 884 -341 887 -325 b 906 -183 907 -274 903 -228 b 914 186 912 -60 904 62 b 914 240 914 203 916 222 b 916 276 913 251 916 265 b 899 300 916 289 913 300 b 871 253 874 300 871 274 b 858 -168 871 111 858 -27 b 860 -235 858 -190 860 -213 l 736 -131 b 834 -20 799 -111 834 -69 b 789 85 834 13 819 49 b 683 160 760 118 723 140 b 383 216 589 209 487 215 b 330 213 364 217 347 216 b 228 300 295 242 261 271 b 86 347 184 337 138 348 b 58 343 76 347 63 350 l 58 360 b 35 425 58 384 53 423 b 6 382 9 425 6 403 l 6 131 b 0 -164 6 33 4 -66 b 24 -327 -1 -216 6 -271 b 50 -262 46 -305 50 -284 l 50 -154 b 52 -45 50 -118 50 -81 b 58 325 55 79 58 202 b 73 310 60 320 68 315 b 94 294 79 304 86 298 b 89 271 89 287 89 278 l 89 94 b 104 -194 101 -20 88 -108 b 118 -245 107 -213 104 -248 b 140 -190 140 -243 140 -212 l 140 -62 b 132 258 140 46 138 153 l 132 259 l 235 173 b 193 132 219 161 204 148 b 153 26 167 101 153 63 b 164 -35 153 7 157 -16 b 341 -170 196 -114 261 -158 b 433 -177 372 -174 403 -177 b 619 -157 497 -177 559 -170 l 706 -230 b 799 -276 736 -258 765 -276 b 818 -274 806 -276 812 -276 l 861 -274 b 863 -312 861 -287 863 -300 b 870 -338 864 -321 858 -337 z m 966 -425 b 986 -397 979 -425 982 -408 b 991 -373 989 -390 989 -382 b 995 -239 991 -328 995 -284 b 1004 334 1001 -49 1002 143 b 995 380 1005 350 1005 367 b 982 402 989 386 992 402 l 978 400 b 949 374 965 396 950 390 b 948 333 948 360 948 346 l 948 -37 b 949 -84 949 -52 949 -68 b 946 -248 949 -132 946 -189 b 953 -396 946 -297 948 -346 b 966 -425 955 -408 950 -425 z m 624 -36 b 416 140 554 22 485 81 b 482 156 439 150 461 154 b 625 81 537 156 588 124 b 647 27 639 63 647 46 b 624 -36 647 7 638 -14 z m 469 -117 b 320 14 386 -118 320 -60 b 343 81 320 37 327 60 l 547 -95 b 469 -117 521 -105 494 -111 z',\n        },\n        noteheadSlashedWhole2: {\n            x_min: -83,\n            x_max: 510,\n            y_min: -201,\n            y_max: 198,\n            ha: 399,\n            o: 'm 734 -289 b 696 -245 726 -266 710 -256 b 586 -164 660 -217 622 -192 l 589 -161 b 654 -50 631 -135 654 -94 b 616 40 654 -19 641 13 b 305 174 536 127 420 174 b 171 151 261 174 215 167 b 166 150 170 151 168 150 b 86 209 140 170 112 189 b -94 284 32 249 -22 289 l -108 285 b -120 274 -114 285 -120 284 b -104 251 -120 266 -112 258 b 71 124 -46 209 12 166 l 85 114 b 36 72 66 102 50 89 b 0 -30 12 40 0 4 b 122 -186 0 -96 45 -160 b 343 -222 194 -210 268 -222 b 514 -197 410 -220 467 -213 l 554 -228 b 734 -289 609 -268 668 -275 z m 477 -82 b 268 73 408 -30 338 22 l 301 91 b 336 101 314 96 324 101 b 370 88 347 101 359 96 b 459 9 405 66 436 43 b 481 -56 474 -13 481 -35 b 477 -82 481 -65 480 -73 z m 310 -161 b 216 -143 276 -161 246 -156 b 166 -72 181 -128 166 -105 b 168 -46 166 -65 167 -55 b 206 26 176 -16 189 7 b 436 -140 282 -29 360 -84 b 382 -158 420 -150 402 -157 b 310 -161 357 -161 333 -161 z',\n        },\n        noteheadSlashedHalf2: {\n            x_min: -73,\n            x_max: 454,\n            y_min: -188,\n            y_max: 188,\n            ha: 376,\n            o: 'm 654 -271 b 603 -202 649 -233 625 -217 b 481 -115 563 -173 523 -144 b 564 -60 510 -101 539 -82 b 615 40 596 -33 615 4 b 609 69 615 50 613 60 b 505 167 590 120 554 151 b 336 190 451 184 392 190 b 124 134 259 190 189 171 l -42 248 b -88 271 -56 256 -75 271 b -101 265 -94 271 -98 269 b -105 252 -104 259 -105 255 b -66 210 -105 235 -82 222 l 85 107 b 0 -24 42 73 0 35 b 183 -183 0 -118 75 -184 b 262 -176 206 -180 233 -177 b 438 -135 324 -171 383 -158 b 570 -228 482 -166 527 -197 b 654 -271 595 -243 621 -259 z m 393 -53 l 311 4 l 225 65 b 392 134 274 102 331 122 b 455 50 425 141 455 101 b 439 -3 455 35 451 14 b 393 -53 425 -22 409 -37 z m 287 -121 b 246 -130 272 -127 259 -130 b 171 -89 215 -130 189 -115 b 156 -40 161 -73 156 -58 b 186 29 156 -17 166 7 l 192 35 l 359 -82 b 287 -121 337 -98 312 -111 z',\n        },\n        noteheadSlashedBlack2: {\n            x_min: -84,\n            x_max: 405,\n            y_min: -189,\n            y_max: 189,\n            ha: 378,\n            o: 'm 557 -265 b 573 -272 562 -268 567 -272 b 583 -261 577 -272 580 -269 b 575 -242 580 -253 579 -248 b 524 -190 563 -220 544 -204 b 405 -99 485 -160 445 -130 b 497 50 449 -60 482 -9 b 500 72 498 58 500 65 b 478 122 500 91 492 107 b 331 186 438 167 387 186 b 120 131 258 186 186 167 l 107 124 b -52 242 53 163 1 203 b -89 265 -63 251 -76 259 b -107 272 -95 268 -101 272 b -117 266 -109 272 -114 271 b -121 251 -120 262 -121 256 b -114 235 -121 245 -120 239 b -60 186 -96 217 -81 199 b 63 95 -20 156 22 125 b -1 -35 26 66 -1 27 b 137 -183 -1 -130 46 -183 b 174 -180 148 -183 161 -181 l 245 -171 b 366 -128 289 -166 331 -150 l 426 -171 b 557 -265 469 -203 514 -233 z',\n        },\n        noteheadDiamondDoubleWhole: {\n            x_min: 0,\n            x_max: 429,\n            y_min: -221,\n            y_max: 221,\n            ha: 442,\n            o: 'm 22 -318 b 42 -294 33 -318 37 -302 b 46 -266 45 -285 45 -275 b 50 -219 49 -249 50 -233 b 48 -153 50 -197 49 -176 b 43 120 43 -62 43 29 l 43 253 b 37 298 43 269 45 284 b 26 318 35 305 35 318 l 24 318 b 1 295 13 317 3 308 b 0 268 0 285 0 276 l 0 -121 b 10 -291 0 -177 1 -235 b 22 -318 12 -301 10 -318 z m 593 -312 b 618 -256 611 -294 616 -276 l 618 -186 b 611 253 618 -40 612 108 b 605 276 611 261 608 268 b 589 295 600 284 600 297 b 567 272 577 294 569 285 l 567 251 b 575 -197 573 102 575 -48 b 593 -312 575 -233 579 -271 z m 99 -268 b 114 -256 107 -269 111 -262 b 127 -196 124 -238 125 -217 b 128 -144 128 -179 128 -161 b 122 -9 128 -99 125 -55 l 135 -19 b 344 -179 206 -71 276 -122 b 370 -190 354 -186 363 -190 b 395 -173 379 -190 386 -184 b 492 -33 426 -127 459 -79 b 491 -86 491 -50 491 -68 b 507 -251 491 -138 495 -193 b 534 -184 530 -228 533 -206 b 541 144 537 -75 539 35 b 530 204 541 164 539 186 b 520 220 528 210 528 220 b 500 203 511 219 503 213 b 498 192 498 200 498 194 l 498 176 b 494 7 497 120 497 63 l 490 12 l 287 176 b 258 190 279 181 274 190 b 212 153 239 186 225 168 l 127 40 b 121 32 124 37 122 35 b 118 114 120 59 118 86 b 102 249 117 158 122 206 b 75 219 85 246 79 236 b 72 187 72 209 72 197 b 76 117 72 164 75 141 b 85 -151 79 27 79 -62 b 91 -251 86 -184 91 -217 b 99 -268 91 -258 92 -266 z m 392 -128 b 374 -122 387 -134 380 -127 l 180 29 b 170 45 173 35 170 39 b 176 56 170 48 173 52 b 236 122 204 101 219 122 b 308 76 252 122 272 107 l 433 -26 b 449 -50 439 -32 449 -36 b 392 -128 432 -75 413 -102 z',\n        },\n        noteheadDiamondWhole: {\n            x_min: 0,\n            x_max: 271,\n            y_min: -132,\n            y_max: 132,\n            ha: 264,\n            o: 'm 230 -177 b 256 -190 240 -186 249 -190 b 281 -173 265 -190 272 -184 b 382 -29 314 -124 347 -76 b 390 -10 387 -22 390 -14 b 376 12 390 -3 386 4 b 173 177 308 66 240 121 b 144 190 166 183 160 190 b 98 153 127 186 112 170 b 13 40 69 115 42 76 b 0 13 4 29 0 20 b 22 -19 0 3 7 -9 b 230 -177 92 -69 163 -122 z m 279 -128 b 261 -122 274 -134 266 -127 l 66 30 b 56 45 59 35 56 39 b 62 56 56 48 59 52 b 122 122 91 101 105 122 b 194 76 138 122 158 107 l 320 -26 b 336 -50 325 -32 336 -35 b 279 -128 318 -75 300 -102 z',\n        },\n        noteheadDiamondHalf: {\n            x_min: 0,\n            x_max: 295,\n            y_min: -148,\n            y_max: 148,\n            ha: 296,\n            o: 'm 228 -207 b 245 -213 235 -210 240 -213 b 264 -203 252 -213 258 -210 b 415 -46 314 -150 364 -98 b 425 -27 420 -40 425 -35 b 416 -10 425 -22 422 -16 b 217 200 350 60 284 131 b 194 213 212 207 204 213 b 170 196 181 213 177 203 b 14 33 118 143 68 86 b 0 7 4 23 0 16 b 17 -20 0 -1 6 -10 b 118 -114 52 -50 82 -85 b 228 -207 156 -144 184 -184 z m 209 -157 b 134 -69 177 -138 141 -115 b 130 -26 131 -55 130 -40 b 215 148 130 42 160 99 b 225 156 217 151 220 156 b 230 153 226 156 228 156 b 323 -26 276 104 321 55 b 298 -75 324 -42 315 -59 b 265 -109 287 -86 276 -99 b 209 -157 245 -125 228 -167 z',\n        },\n        noteheadDiamondBlack: {\n            x_min: 0,\n            x_max: 310,\n            y_min: -146,\n            y_max: 146,\n            ha: 292,\n            o: 'm 266 -210 b 289 -194 278 -209 284 -200 b 406 -76 330 -156 367 -115 b 446 -23 433 -49 446 -36 b 412 29 446 -10 435 3 b 405 36 409 30 408 33 b 252 196 354 89 304 143 b 225 210 243 204 235 210 b 204 202 219 210 212 209 b 10 24 141 141 75 82 b 0 9 4 19 0 14 b 9 -6 0 4 3 0 l 232 -192 b 266 -210 242 -200 256 -204 z',\n        },\n        noteheadParenthesis: {\n            x_min: -70.190112022022,\n            x_max: 329,\n            y_min: -196,\n            y_max: 201,\n            ha: 397,\n            o: 'm 344 -279 b 382 -262 361 -288 370 -272 b 405 -233 390 -255 399 -245 b 474 9 455 -158 468 -73 b 416 228 474 78 448 174 b 364 282 403 249 387 271 b 344 289 359 285 350 288 b 331 279 338 289 333 287 b 325 248 328 269 325 258 b 338 225 325 238 328 229 b 412 138 379 207 396 174 b 445 1 433 92 445 45 b 346 -217 445 -81 410 -154 b 336 -252 340 -223 336 -238 b 344 -279 336 -265 338 -276 z m 19 -274 b 35 -282 24 -279 30 -281 b 49 -265 42 -282 46 -275 b 52 -243 50 -256 52 -249 b 36 -210 52 -230 49 -220 b -60 -59 -16 -173 -35 -114 b -73 9 -69 -39 -73 -16 b 33 223 -73 92 -24 189 b 50 265 43 229 50 249 b 33 288 50 278 46 289 b 4 272 23 288 14 275 b -9 261 0 269 -4 265 b -101 23 -58 193 -105 124 b -37 -206 -104 -52 -75 -130 b 19 -274 -23 -232 -6 -255 z',\n        },\n        noteheadParenthesisRight: {\n            x_min: -30,\n            x_max: 82,\n            y_min: -199.08429092881173,\n            y_max: 206,\n            ha: 405.0842909288117,\n            o: 'm -17 -282 b 24 -264 -6 -297 12 -272 b 60 -219 40 -253 52 -236 b 117 1 96 -150 112 -75 b 118 16 118 6 118 12 b 109 73 118 36 112 55 b 4 279 99 154 68 226 b -23 297 -4 287 -13 297 b -37 289 -27 297 -32 294 b -43 266 -42 285 -43 276 b -32 225 -43 251 -37 229 b 84 -7 48 170 84 82 b 32 -184 84 -69 65 -132 b -10 -222 22 -200 4 -209 b -24 -258 -20 -232 -24 -245 b -17 -282 -24 -266 -22 -276 z',\n        },\n        noteheadParenthesisLeft: {\n            x_min: 0,\n            x_max: 106,\n            y_min: -197,\n            y_max: 197,\n            ha: 394,\n            o: 'm 134 -284 b 138 -281 135 -284 137 -284 b 145 -268 144 -278 145 -274 l 144 -253 b 107 -180 138 -225 121 -204 b 42 13 71 -120 42 -56 b 49 73 42 32 43 52 b 137 210 62 128 95 171 b 153 255 147 219 153 239 b 145 278 153 265 151 274 b 130 284 140 281 135 284 b 98 259 117 284 108 268 b 0 37 35 203 1 131 b 118 -268 9 -69 53 -173 b 134 -284 121 -274 127 -284 z',\n        },\n        noteheadMoonBlack: {\n            x_min: 0,\n            x_max: 328,\n            y_min: -125,\n            y_max: 125,\n            ha: 250,\n            o: 'm 353 -160 b 465 -40 412 -140 451 -102 b 472 30 471 -17 472 6 b 469 124 472 60 469 92 b 406 179 469 170 459 177 l 128 179 b 37 180 98 179 68 179 b 0 141 7 180 0 170 b 3 -20 3 88 3 33 b 69 -134 3 -72 26 -109 b 240 -180 125 -164 181 -180 b 353 -160 278 -180 315 -174 z',\n        },\n        noteheadTriangleLeftBlack: {\n            x_min: 0,\n            x_max: 391.1554175279994,\n            y_min: -142,\n            y_max: 142,\n            ha: 284,\n            o: 'm 138 -204 b 318 -197 197 -199 258 -197 l 431 -197 b 544 -192 469 -196 507 -193 b 563 -184 552 -190 560 -193 b 553 -167 564 -177 559 -171 l 540 -157 b 232 60 436 -85 334 -12 l 50 190 b 20 204 42 197 32 204 b 10 202 17 204 14 204 b 0 184 1 197 0 192 b 1 164 0 177 1 170 b 6 -150 3 59 6 -45 b 39 -193 7 -176 17 -186 b 138 -204 72 -204 105 -204 z',\n        },\n        noteheadTriangleRightBlack: {\n            x_min: -0.3332953162522517,\n            x_max: 398,\n            y_min: -139,\n            y_max: 140,\n            ha: 279,\n            o: 'm 543 -200 b 573 -176 566 -200 573 -194 l 573 -168 b 554 141 566 -66 560 37 b 520 197 553 167 546 187 b 495 202 511 200 504 202 b 454 184 481 202 467 196 l 35 -137 b 0 -171 22 -147 -4 -154 b 52 -199 6 -193 33 -193 b 69 -199 58 -200 63 -199 z',\n        },\n        noteheadTriangleRoundDownBlack: {\n            x_min: 0,\n            x_max: 334,\n            y_min: -133.78604087938328,\n            y_max: 136,\n            ha: 269.7860408793833,\n            o: 'm 252 -192 b 285 -176 269 -196 276 -187 b 468 52 346 -99 406 -23 b 481 79 477 62 481 71 b 465 104 481 88 475 95 b 441 124 456 109 449 117 b 249 196 380 174 314 194 b 13 104 157 196 69 154 b 0 86 6 98 0 92 b 7 69 0 82 3 76 b 202 -164 73 -7 137 -85 b 252 -192 216 -181 235 -186 z',\n        },\n        augmentationDot: {\n            x_min: 0,\n            x_max: 96,\n            y_min: -57,\n            y_max: 57,\n            ha: 114,\n            o: 'm 13 -82 b 16 -81 14 -82 14 -82 b 105 -73 46 -76 75 -76 b 131 -48 121 -72 131 -60 b 138 26 134 -24 138 0 b 137 48 138 33 138 40 b 108 82 134 71 125 82 b 95 81 104 82 99 82 b 33 71 75 78 53 75 b 4 46 20 68 6 62 b 0 -66 1 9 0 -29 b 13 -82 0 -73 1 -82 z',\n        },\n        tremolo1: {\n            x_min: -158,\n            x_max: 156.19381479578487,\n            y_min: -88,\n            y_max: 88,\n            ha: 176,\n            o: 'm -206 -127 b -194 -125 -203 -127 -199 -127 b 173 -36 -72 -94 50 -65 b 220 16 202 -29 215 -12 b 225 50 223 30 225 45 b 216 107 226 76 222 91 b 194 127 210 120 204 127 b 183 124 192 127 189 127 l -192 33 b -226 -9 -213 27 -222 14 b -228 -32 -226 -16 -228 -23 b -222 -108 -228 -58 -222 -82 b -206 -127 -222 -120 -217 -127 z',\n        },\n        flag8thUp: {\n            x_min: 0,\n            x_max: 261,\n            y_min: -819,\n            y_max: 0,\n            ha: 819,\n            o: 'm 265 -1171 b 351 -1035 301 -1130 336 -1087 b 376 -867 369 -979 376 -923 b 367 -755 376 -829 373 -792 b 233 -422 350 -632 311 -520 b 131 -291 199 -379 166 -334 b 65 -125 91 -239 66 -192 b 62 -75 65 -112 62 -91 b 42 0 62 -49 52 -24 l 35 0 b 0 -63 6 -13 0 -36 l 0 -144 b 96 -445 0 -255 29 -356 b 177 -547 124 -478 150 -514 b 308 -831 246 -629 298 -721 b 317 -890 310 -851 317 -871 b 311 -919 317 -900 315 -910 b 256 -1005 297 -950 282 -984 b 228 -1068 233 -1024 228 -1045 b 230 -1106 228 -1080 229 -1093 b 240 -1162 232 -1125 239 -1143 b 251 -1179 242 -1174 246 -1179 b 265 -1171 255 -1179 259 -1176 z',\n        },\n        flag8thDown: {\n            x_min: 0,\n            x_max: 261,\n            y_min: 0,\n            y_max: 819,\n            ha: 819,\n            o: 'm 265 1171 b 251 1179 259 1176 255 1179 b 240 1162 246 1179 242 1174 b 230 1106 239 1143 232 1125 b 228 1068 229 1093 228 1080 b 256 1005 228 1045 233 1024 b 311 919 282 984 297 950 b 317 890 315 910 317 900 b 308 831 317 871 310 851 b 177 547 298 721 246 629 b 96 445 150 514 124 478 b 0 144 29 356 0 255 l 0 63 b 35 0 0 36 6 13 l 42 0 b 62 75 52 24 62 49 b 59 117 62 91 59 104 b 131 291 60 183 91 239 b 233 422 166 334 199 379 b 367 755 311 520 350 632 b 376 867 373 792 376 829 b 351 1035 376 923 369 979 b 265 1171 336 1087 301 1130 z',\n        },\n        flag16thUp: {\n            x_min: 0,\n            x_max: 327.1591498636094,\n            y_min: -819.3972596310256,\n            y_max: 0,\n            ha: 819.3972596310256,\n            o: 'm 415 -1179 b 435 -1168 423 -1182 429 -1174 b 451 -1138 442 -1159 446 -1149 b 465 -1020 464 -1102 467 -1064 b 461 -962 464 -1004 464 -984 b 471 -821 467 -916 472 -870 b 465 -721 472 -791 467 -756 b 415 -520 459 -651 441 -585 b 200 -245 370 -408 284 -327 b 96 -114 160 -206 118 -168 b 75 -24 84 -85 85 -53 b 59 0 72 -16 72 0 b 53 -1 58 0 56 -1 b 27 -32 40 -6 27 -10 b 29 -68 27 -43 29 -55 b 10 -79 20 -69 13 -72 b 1 -109 6 -89 1 -99 b 0 -170 0 -130 0 -148 b 35 -410 0 -252 12 -333 b 258 -793 76 -557 156 -681 b 409 -1158 350 -896 410 -1014 b 415 -1179 409 -1165 405 -1175 z m 413 -816 b 331 -681 392 -769 364 -723 b 145 -420 266 -596 189 -521 b 86 -281 125 -374 102 -330 b 156 -370 105 -312 128 -343 b 318 -539 210 -425 269 -478 b 413 -816 383 -621 420 -713 z',\n        },\n        flag16thDown: {\n            x_min: 0,\n            x_max: 327.1591498636094,\n            y_min: 0,\n            y_max: 819,\n            ha: 819,\n            o: 'm 59 0 b 75 24 72 0 72 16 b 96 114 85 53 84 85 b 200 245 118 168 160 206 b 415 520 284 327 370 408 b 465 721 441 585 459 651 b 471 821 467 756 472 791 b 461 962 472 870 467 916 b 465 1020 464 984 464 1004 b 451 1138 467 1064 464 1102 b 435 1168 446 1149 442 1159 b 418 1179 431 1172 425 1179 l 415 1179 b 408 1169 409 1176 408 1174 b 409 1158 408 1165 409 1161 b 258 793 410 1014 350 896 b 35 410 156 681 76 557 b 0 170 12 333 0 252 l 0 88 b 29 7 0 71 6 23 b 59 0 33 4 58 0 z m 86 281 b 145 420 102 330 125 374 b 331 681 189 521 266 596 b 413 816 364 723 392 769 b 415 791 413 808 415 799 b 318 539 415 698 377 613 b 156 370 269 478 210 425 b 86 281 128 343 105 312 z',\n        },\n        flag32ndUp: {\n            x_min: -0.19862981551275186,\n            x_max: 268.0942440943661,\n            y_min: -849.4710740978672,\n            y_max: 149.0769891455102,\n            ha: 998.5480632433774,\n            o: 'm 323 -1223 b 351 -1198 337 -1227 344 -1210 b 359 -1184 354 -1194 356 -1188 b 386 -999 377 -1122 387 -1060 b 341 -783 386 -927 372 -855 b 330 -736 334 -769 330 -753 b 333 -708 330 -727 330 -717 b 344 -621 340 -678 344 -649 b 341 -579 344 -608 343 -593 b 328 -500 338 -553 328 -526 b 331 -475 328 -491 328 -484 b 347 -370 343 -438 348 -402 b 151 27 348 -212 288 -56 b 53 176 98 59 50 102 b 45 197 53 183 48 192 b 33 215 40 203 40 216 l 30 215 b 6 194 22 212 9 209 b 0 120 3 170 -1 145 b 0 -43 4 65 0 13 b 0 -98 0 -60 1 -79 b 4 -276 0 -157 6 -216 b 7 -456 4 -337 7 -397 b 66 -638 7 -523 22 -585 b 158 -724 94 -671 127 -697 b 318 -1011 246 -801 295 -899 b 321 -1044 321 -1021 321 -1032 b 312 -1152 321 -1080 312 -1116 b 317 -1192 312 -1165 314 -1179 b 323 -1223 320 -1202 311 -1220 z m 285 -376 b 121 -180 249 -289 173 -245 b 91 -105 104 -158 92 -135 b 288 -354 181 -144 288 -269 b 285 -376 288 -363 287 -370 z m 275 -657 b 111 -492 226 -589 163 -547 b 65 -376 78 -456 66 -418 b 71 -323 65 -360 68 -341 b 275 -657 164 -418 265 -504 z',\n        },\n        flag32ndDown: {\n            x_min: -2.800802874905624,\n            x_max: 268.09424409436605,\n            y_min: -169.07698914551014,\n            y_max: 829.4710740978672,\n            ha: 998.5480632433773,\n            o: 'm 323 1194 b 317 1164 311 1191 320 1174 b 312 1123 314 1151 312 1136 b 321 1015 312 1087 321 1051 b 318 982 321 1004 321 992 b 158 696 295 870 246 772 b 66 609 127 668 94 642 b 7 428 22 556 7 494 b 4 248 7 369 4 308 b -1 78 6 187 -10 137 b 0 14 0 59 0 32 l 0 -148 b 6 -223 0 -174 3 -199 b 30 -243 9 -238 22 -240 l 33 -243 b 45 -226 40 -245 40 -232 b 53 -204 48 -220 53 -212 b 151 -56 50 -131 98 -88 b 347 341 288 27 348 183 b 331 446 348 373 343 409 b 328 471 328 455 328 462 b 341 550 328 497 338 524 b 344 592 343 564 344 579 b 333 680 344 621 340 649 b 330 707 330 688 330 698 b 341 755 330 724 334 740 b 386 971 372 827 386 899 b 359 1155 387 1031 377 1093 b 351 1169 356 1159 354 1165 b 323 1194 344 1181 337 1198 z m 275 628 b 71 294 265 475 164 389 b 65 347 68 312 65 331 b 111 464 66 389 78 428 b 275 628 163 518 226 560 z m 285 347 b 288 325 287 341 288 334 b 91 76 288 240 181 115 b 121 151 92 107 104 130 b 285 347 173 216 249 261 z',\n        },\n        flag64thUp: {\n            x_min: -4,\n            x_max: 282,\n            y_min: -823.5430338167067,\n            y_max: 347,\n            ha: 1170.5430338167066,\n            o: 'm 350 -1185 b 380 -1162 364 -1189 374 -1175 b 406 -1022 399 -1119 406 -1071 b 359 -798 406 -945 384 -871 b 348 -756 353 -785 348 -772 b 350 -744 348 -753 350 -749 b 363 -621 356 -704 363 -664 b 360 -580 363 -608 363 -593 b 359 -560 359 -573 359 -567 b 373 -490 359 -536 366 -513 b 393 -346 386 -444 393 -395 b 387 -269 393 -320 390 -294 b 348 -127 382 -219 348 -173 b 351 -104 348 -120 348 -111 b 353 -65 351 -91 353 -78 b 341 37 353 -26 348 6 b 226 215 323 108 278 164 b 86 336 181 258 127 288 b 62 395 72 353 62 370 b 42 481 62 423 55 454 b 27 500 37 488 36 500 b 24 498 26 500 26 500 b -1 480 14 497 1 492 b -6 444 -4 467 -6 455 l -6 435 b -1 341 -1 403 -1 372 l -1 266 b 6 156 -1 230 0 193 b 13 35 12 117 13 75 l 13 -35 b 14 -85 13 -52 14 -68 b 29 -276 19 -150 33 -213 b 20 -448 24 -334 20 -392 b 24 -534 20 -477 22 -505 b 114 -708 30 -605 59 -664 b 197 -780 143 -732 171 -755 b 344 -1153 301 -884 341 -1011 b 343 -1172 344 -1159 343 -1166 b 350 -1185 343 -1176 344 -1182 z m 287 -88 b 62 193 186 -17 79 48 b 229 52 121 144 174 98 b 289 -33 256 29 274 -3 b 295 -56 294 -42 295 -49 b 287 -88 295 -66 292 -76 z m 298 -410 b 118 -235 238 -351 176 -295 b 76 -88 82 -197 78 -147 b 268 -252 137 -153 203 -202 b 330 -360 304 -279 330 -315 b 323 -402 330 -373 327 -387 b 311 -418 318 -413 315 -418 b 298 -410 307 -418 302 -415 z m 300 -691 b 117 -508 243 -616 168 -575 b 82 -408 94 -480 82 -448 b 84 -379 82 -397 82 -387 b 259 -553 135 -451 206 -492 b 301 -667 287 -583 301 -619 b 300 -691 301 -674 301 -683 z',\n        },\n        flag64thDown: {\n            x_min: -5,\n            x_max: 281,\n            y_min: -375,\n            y_max: 795.5430338167066,\n            ha: 1170.5430338167066,\n            o: 'm 348 1145 b 341 1132 343 1142 341 1136 b 343 1113 341 1126 343 1119 b 196 740 340 971 300 844 b 112 668 170 714 141 691 b 23 494 58 624 29 564 b 19 408 20 465 19 436 b 27 236 19 351 23 294 b 13 45 32 173 17 109 b 12 -6 13 27 12 12 l 12 -75 b 4 -196 12 -115 10 -157 b -3 -307 -1 -233 -3 -271 l -3 -382 b -7 -475 -3 -412 -3 -444 l -7 -484 b -3 -520 -7 -495 -6 -507 b 23 -539 0 -533 13 -537 b 26 -540 24 -540 24 -540 b 40 -521 35 -540 36 -528 b 60 -435 53 -494 60 -464 b 85 -376 60 -410 71 -393 b 225 -255 125 -328 180 -298 b 340 -78 276 -204 321 -148 b 351 24 347 -46 351 -14 b 350 63 351 37 350 50 b 347 86 347 71 347 79 b 386 229 347 132 380 179 b 392 305 389 253 392 279 b 372 449 392 354 384 403 b 357 520 364 472 357 495 b 359 540 357 527 357 533 b 361 580 361 553 361 567 b 348 704 361 624 354 664 b 347 716 348 708 347 713 b 357 757 347 732 351 744 b 405 982 383 831 405 904 b 379 1122 405 1031 397 1079 b 348 1145 373 1135 363 1149 z m 298 651 b 300 626 300 642 300 634 b 258 513 300 579 285 543 b 82 338 204 452 134 410 b 81 367 81 347 81 357 b 115 468 81 408 92 439 b 298 651 167 534 242 576 z m 297 370 b 310 377 301 374 305 377 b 321 361 314 377 317 373 b 328 320 325 347 328 333 b 266 212 328 275 302 239 b 75 48 202 161 135 112 b 117 194 76 107 81 157 b 297 370 174 255 236 311 z m 285 48 b 294 16 291 36 294 26 b 288 -7 294 9 292 1 b 228 -92 272 -37 255 -69 b 60 -233 173 -138 120 -184 b 285 48 78 -88 184 -23 z',\n        },\n        flag128thUp: {\n            x_min: 0,\n            x_max: 252,\n            y_min: -804,\n            y_max: 530,\n            ha: 1334,\n            o: 'm 298 -1158 b 328 -1126 312 -1158 320 -1139 b 330 -1116 330 -1123 330 -1119 b 347 -996 343 -1076 347 -1037 b 328 -837 347 -943 338 -890 b 320 -778 324 -816 320 -798 b 330 -733 320 -763 323 -749 b 340 -665 338 -714 337 -688 b 341 -645 340 -660 341 -652 b 333 -534 341 -609 333 -572 b 343 -471 333 -513 334 -492 b 361 -366 356 -436 361 -402 b 331 -202 361 -311 348 -256 b 328 -187 330 -197 328 -193 b 331 -179 328 -184 328 -181 b 363 -55 353 -137 363 -96 b 337 79 363 -12 351 33 b 327 114 333 92 327 104 b 344 144 327 124 331 132 b 359 174 353 150 357 163 b 361 228 360 193 361 210 b 243 517 361 337 325 435 b 147 596 213 546 179 569 b 75 708 111 626 75 655 b 62 744 75 723 68 733 b 50 763 58 752 58 763 b 46 762 49 763 48 762 b 17 742 36 757 22 757 b 0 697 14 726 0 711 b 1 595 0 662 3 631 b 0 469 0 552 0 511 b 1 429 0 456 0 442 b 22 289 6 382 22 337 b 24 128 22 238 24 184 b 22 66 24 108 23 86 b 19 -19 20 37 19 10 b 20 -132 19 -56 20 -95 b 13 -276 20 -180 19 -229 b 9 -359 10 -304 9 -330 b 12 -487 9 -402 12 -445 b 56 -582 12 -526 29 -554 b 197 -742 107 -632 160 -681 b 288 -1100 265 -851 276 -976 b 288 -1122 288 -1107 287 -1115 b 287 -1145 289 -1129 287 -1138 b 298 -1158 287 -1153 288 -1158 z m 304 150 b 75 475 229 256 112 334 b 304 150 233 357 305 287 z m 271 -73 b 127 72 233 -14 179 26 b 81 167 96 98 81 127 b 84 194 81 176 82 184 b 271 -73 148 102 242 39 z m 279 -396 b 132 -223 233 -330 180 -279 b 81 -112 104 -192 81 -156 b 82 -91 81 -105 81 -98 b 279 -396 167 -125 269 -281 z m 249 -609 b 69 -357 197 -520 88 -471 b 249 -609 131 -441 229 -498 z',\n        },\n        flag128thDown: {\n            x_min: -0.8888888888888888,\n            x_max: 252,\n            y_min: -580,\n            y_max: 754,\n            ha: 1334,\n            o: 'm 298 1086 b 287 1073 288 1086 287 1081 b 288 1050 287 1066 289 1057 b 288 1028 287 1043 288 1035 b 197 670 276 904 265 779 b 56 510 160 609 107 560 b 12 415 29 482 12 454 b 9 287 12 373 9 330 b 13 204 9 258 10 232 b 20 60 19 157 20 108 b 19 -53 20 23 19 -16 b 22 -138 19 -82 20 -109 b 24 -200 23 -158 24 -180 b 22 -361 24 -256 22 -310 b 1 -501 22 -409 6 -454 b 0 -541 0 -514 0 -528 b 0 -667 0 -583 -3 -624 b 0 -809 0 -675 -3 -791 b 46 -834 4 -825 36 -829 b 50 -835 48 -834 49 -835 b 62 -816 58 -835 58 -824 b 75 -780 68 -805 75 -795 b 147 -668 75 -727 111 -698 b 243 -589 179 -641 213 -618 b 361 -300 325 -507 361 -409 b 359 -246 361 -282 360 -265 b 344 -216 357 -235 353 -222 b 327 -186 331 -204 327 -196 b 337 -151 327 -176 333 -164 b 363 -17 351 -105 363 -60 b 331 107 363 24 353 65 b 328 115 328 109 328 112 b 331 130 328 121 330 125 b 361 294 348 184 361 239 b 343 399 361 330 356 364 b 333 462 334 420 333 441 b 341 573 333 500 341 537 b 340 593 341 580 340 588 b 330 661 337 616 338 642 b 320 706 323 677 320 691 b 328 765 320 726 324 744 b 347 924 338 818 347 871 b 330 1044 347 965 343 1004 b 328 1054 330 1047 330 1051 b 298 1086 320 1067 312 1086 z m 249 537 b 69 285 229 426 131 369 b 249 537 88 399 197 448 z m 279 324 b 82 19 269 209 167 53 b 81 40 81 26 81 33 b 132 151 81 84 104 120 b 279 324 180 207 233 258 z m 271 1 b 84 -266 242 -111 148 -174 b 81 -239 82 -256 81 -248 b 127 -144 81 -199 96 -170 b 271 1 179 -98 233 -58 z m 304 -222 b 75 -547 305 -359 233 -429 b 304 -222 112 -406 229 -328 z',\n        },\n        accidentalFlat: {\n            x_min: 1,\n            x_max: 209,\n            y_min: -208,\n            y_max: 472,\n            ha: 680,\n            o: 'm 29 -300 b 46 -289 33 -300 39 -297 b 107 -243 65 -274 86 -258 b 301 127 233 -153 301 -30 b 298 186 301 147 301 166 b 190 297 291 256 251 297 b 147 289 177 297 163 294 b 86 265 127 284 107 274 l 85 264 l 85 301 b 91 465 85 356 88 410 b 94 559 91 497 94 527 b 84 651 94 589 91 621 b 66 680 81 661 81 680 l 65 680 b 37 645 49 678 37 665 b 33 523 36 605 32 563 l 33 478 b 26 223 33 393 29 308 b 1 -141 22 101 1 -19 b 17 -287 1 -189 4 -239 b 29 -300 20 -295 23 -300 z m 68 -105 b 76 12 71 -68 72 -29 b 81 107 79 43 81 75 l 86 109 b 171 135 114 121 141 135 b 204 128 181 135 193 132 b 238 92 228 120 239 108 b 230 63 238 84 236 75 b 68 -105 193 -10 132 -59 z',\n        },\n        accidentalNatural: {\n            x_min: 0,\n            x_max: 213.5,\n            y_min: -456,\n            y_max: 462,\n            ha: 918,\n            o: 'm 255 -657 b 281 -624 271 -657 275 -636 b 285 -599 282 -615 285 -608 b 292 -300 288 -500 289 -400 b 289 -161 292 -253 289 -207 b 300 128 292 -65 297 32 b 304 168 300 128 302 150 l 304 173 l 305 190 l 305 199 l 307 225 b 304 259 307 229 310 246 b 272 298 297 274 302 305 b 63 266 204 279 134 272 b 72 514 68 348 72 432 b 71 595 72 541 72 567 b 56 665 71 619 66 642 b 17 579 9 651 17 608 b 3 144 19 433 7 289 b 0 -7 1 94 0 43 b 3 -134 0 -50 1 -92 b 7 -219 3 -163 7 -192 b 35 -251 7 -243 17 -251 b 49 -249 39 -251 43 -251 l 223 -223 l 230 -222 l 230 -359 b 223 -516 230 -410 223 -464 b 236 -619 223 -550 226 -585 b 255 -657 240 -634 236 -657 z m 58 -63 b 55 81 56 -14 53 33 l 56 99 b 85 99 65 99 75 98 b 232 108 134 104 183 107 l 240 109 l 236 66 b 232 -48 235 29 232 -10 b 58 -81 174 -63 115 -73 z',\n        },\n        accidentalSharp: {\n            x_min: -22,\n            x_max: 390,\n            y_min: -384,\n            y_max: 383,\n            ha: 767,\n            o: 'm 202 -553 b 219 -526 213 -552 216 -536 b 226 -471 225 -507 226 -488 b 225 -425 226 -455 225 -441 b 226 -392 225 -415 225 -402 b 233 -305 229 -363 232 -334 l 297 -292 b 331 -469 300 -353 311 -412 b 347 -485 333 -477 338 -485 b 363 -469 356 -487 359 -477 b 374 -418 373 -454 374 -435 b 376 -382 376 -405 376 -393 b 372 -276 376 -347 373 -311 l 455 -259 b 550 -156 534 -243 544 -232 b 550 -109 550 -137 552 -124 b 526 -78 549 -91 541 -78 l 523 -78 b 507 -79 517 -78 513 -78 b 403 -101 474 -88 438 -95 l 379 -105 b 382 -42 380 -85 380 -63 b 384 96 383 4 384 50 b 503 131 425 107 464 118 b 549 173 524 138 543 150 b 562 249 554 199 562 223 b 554 294 562 264 560 279 b 536 315 549 308 544 315 l 533 315 b 517 312 528 315 523 315 b 382 266 472 294 428 279 l 377 344 b 359 531 374 406 372 469 b 348 552 356 539 357 552 l 347 552 l 343 552 b 315 528 331 549 317 544 l 315 501 b 320 249 315 416 318 333 l 243 232 b 239 361 243 275 242 318 b 226 425 238 383 238 403 b 199 359 194 409 199 382 b 193 223 196 312 194 268 b 72 202 153 215 112 209 b 4 118 13 192 4 183 b 10 66 0 102 12 84 b 33 29 7 39 14 30 b 48 32 37 29 42 30 b 187 55 95 39 141 46 l 183 -75 b 176 -145 181 -99 179 -122 b 16 -179 122 -156 69 -166 b -32 -232 -14 -186 -32 -197 b -17 -331 -32 -266 -19 -298 b -1 -356 -17 -347 -13 -354 b 12 -353 1 -356 6 -354 b 167 -320 63 -341 115 -331 b 166 -377 166 -338 166 -357 b 189 -526 166 -428 171 -477 b 202 -553 192 -536 189 -553 z m 240 -132 b 243 -37 242 -101 242 -69 b 245 65 245 -3 245 30 b 315 79 269 69 292 73 b 301 -120 308 13 305 -53 z',\n        },\n        accidentalDoubleSharp: {\n            x_min: 0,\n            x_max: 287,\n            y_min: -159,\n            y_max: 159,\n            ha: 318,\n            o: 'm 84 -229 b 107 -216 91 -229 98 -225 b 200 -125 138 -186 167 -154 b 232 -95 212 -115 222 -105 b 347 -189 271 -125 310 -157 b 370 -200 356 -196 363 -200 b 396 -179 380 -200 389 -192 b 412 -102 410 -154 406 -125 b 377 -27 410 -69 400 -46 l 325 14 b 402 91 350 42 374 68 b 413 127 410 96 413 107 b 382 200 409 148 397 176 b 350 229 370 220 360 229 b 314 210 340 229 328 223 b 274 174 300 199 285 187 b 212 104 252 151 232 128 b 92 187 173 132 132 161 b 78 193 86 192 82 193 b 68 190 75 193 72 193 b 48 179 62 186 53 187 b 40 137 43 168 40 154 b 81 16 40 92 56 32 b 107 -3 89 10 98 4 b 14 -94 76 -32 45 -62 b 0 -124 6 -102 0 -114 b 12 -154 0 -134 3 -144 b 62 -215 26 -176 48 -193 b 84 -229 69 -225 76 -229 z',\n        },\n        accidentalDoubleFlat: {\n            x_min: 0,\n            x_max: 359,\n            y_min: -220,\n            y_max: 446,\n            ha: 666,\n            o: 'm 43 -317 b 72 -301 55 -317 63 -310 b 160 -186 108 -268 134 -226 b 236 -60 186 -145 212 -102 b 233 -131 235 -85 233 -108 b 239 -220 233 -161 235 -190 b 259 -246 240 -233 239 -240 b 301 -228 284 -252 291 -238 b 465 -7 369 -163 416 -85 b 517 173 500 48 517 108 b 451 307 517 229 505 284 b 409 315 436 312 422 315 b 331 287 382 315 356 305 b 311 274 324 282 320 274 l 310 274 l 310 566 b 305 621 310 585 312 603 b 294 642 301 628 305 642 l 292 642 b 264 622 282 641 266 636 b 253 575 259 606 256 590 b 246 418 248 523 246 471 b 248 243 246 360 248 302 l 248 187 b 164 238 220 225 193 238 b 85 213 140 238 112 226 b 84 229 85 220 84 225 b 86 315 85 258 86 287 b 81 528 86 386 82 458 b 71 582 81 547 78 566 b 56 603 66 590 68 603 l 53 603 b 23 580 40 600 26 598 b 19 537 20 566 19 552 b 20 514 19 530 19 521 b 26 390 24 472 26 432 b 14 66 26 282 16 174 b 0 -168 13 -12 0 -91 b 12 -279 0 -206 3 -242 b 30 -314 16 -294 14 -308 b 43 -317 35 -317 39 -317 z m 301 -72 b 302 7 302 -45 302 -19 l 302 86 b 351 158 304 121 321 145 b 383 166 361 163 373 166 b 435 143 402 166 419 157 b 445 127 441 138 445 132 b 441 114 445 122 444 118 b 301 -72 397 49 354 -14 z m 75 -147 b 73 30 75 -86 75 -29 b 118 82 73 62 92 76 b 132 84 124 84 128 84 b 190 52 156 84 174 69 b 193 40 192 49 193 45 b 192 33 193 37 193 35 b 75 -147 157 -30 125 -95 z',\n        },\n        accidentalParensLeft: {\n            x_min: 0,\n            x_max: 130.18934911242604,\n            y_min: -270,\n            y_max: 267.6082500723851,\n            ha: 537.6082500723851,\n            o: 'm 107 -389 b 127 -374 114 -389 120 -384 b 141 -347 132 -367 137 -357 b 151 -294 148 -330 151 -311 b 122 -207 151 -265 141 -236 b 63 -65 94 -164 72 -117 b 59 -10 60 -46 59 -27 b 145 223 59 78 94 153 b 187 354 176 262 189 305 b 177 384 187 364 190 380 b 143 373 166 387 153 383 b 124 354 137 367 130 361 b 0 -35 33 240 0 108 l 0 -92 b 85 -372 4 -193 27 -287 b 107 -389 92 -383 99 -389 z',\n        },\n        accidentalParensRight: {\n            x_min: -0.4444444444444445,\n            x_max: 139,\n            y_min: -275,\n            y_max: 277,\n            ha: 552,\n            o: 'm 58 -396 b 96 -354 75 -396 85 -370 b 200 13 168 -238 200 -111 b 153 268 200 109 184 190 b 49 392 131 320 101 364 b 26 399 40 397 33 399 b 0 366 10 399 0 387 b 0 318 -1 350 0 334 l 0 291 b 27 238 -3 266 7 253 b 143 9 105 180 143 98 b 141 -20 143 -1 143 -10 b 63 -225 135 -92 108 -164 b 36 -307 45 -251 36 -278 b 40 -344 36 -320 37 -331 b 42 -356 42 -347 42 -351 b 58 -396 42 -374 37 -396 z',\n        },\n        accidentalQuarterToneFlatStein: {\n            x_min: 0,\n            x_max: 208,\n            y_min: -240,\n            y_max: 440,\n            ha: 680,\n            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z',\n        },\n        accidentalThreeQuarterTonesFlatZimmermann: {\n            x_min: 0,\n            x_max: 422,\n            y_min: -240,\n            y_max: 440,\n            ha: 680,\n            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 336 -346 b 353 -336 340 -346 346 -343 b 413 -289 372 -320 393 -304 b 608 81 540 -199 608 -76 b 605 140 608 101 608 120 b 497 251 598 210 557 251 b 454 243 484 251 469 248 b 393 219 433 238 413 228 l 392 217 l 392 255 b 397 419 392 310 395 364 b 400 513 397 451 400 481 b 390 605 400 543 397 575 b 373 634 387 615 387 634 l 372 634 b 344 599 356 632 344 619 b 340 477 343 559 338 517 l 340 432 b 333 177 340 347 336 262 b 308 -187 328 55 308 -65 b 324 -333 308 -235 311 -285 b 336 -346 327 -341 330 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z m 374 -151 b 383 -35 377 -114 379 -75 b 387 60 386 -3 387 29 l 393 63 b 478 89 420 75 448 89 b 511 82 488 89 500 86 b 544 46 534 73 546 62 b 537 17 544 37 543 29 b 374 -151 500 -56 439 -105 z',\n        },\n        accidentalQuarterToneSharpStein: {\n            x_min: 0,\n            x_max: 300,\n            y_min: -338,\n            y_max: 351,\n            ha: 689,\n            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',\n        },\n        accidentalThreeQuarterTonesSharpStein: {\n            x_min: -23,\n            x_max: 388,\n            y_min: -373,\n            y_max: 445,\n            ha: 818,\n            o: 'm 114 -537 b 138 -475 137 -518 138 -495 b 147 -292 138 -413 144 -353 b 212 -278 168 -287 190 -282 b 243 -444 215 -333 225 -389 b 261 -467 248 -454 251 -465 b 281 -446 272 -469 276 -455 b 292 -347 292 -416 288 -384 b 288 -262 289 -320 288 -291 l 374 -245 b 376 -311 374 -266 374 -288 b 390 -456 379 -357 379 -405 b 416 -396 412 -436 415 -418 b 423 -287 420 -360 423 -323 b 422 -235 423 -269 423 -252 b 451 -229 432 -233 441 -232 b 547 -98 524 -215 547 -199 l 547 -89 b 521 -49 546 -59 540 -49 b 497 -52 516 -49 507 -49 b 418 -68 469 -56 444 -63 b 423 52 419 -29 422 12 b 426 140 425 81 425 109 b 495 160 449 145 472 153 b 552 219 526 170 546 189 b 559 279 557 240 553 262 b 530 341 559 324 552 341 b 490 331 520 341 507 338 b 432 311 471 324 452 318 b 449 552 436 392 442 471 b 452 588 451 563 452 575 b 446 622 452 599 451 611 b 436 641 444 629 448 641 b 418 628 428 641 420 636 b 409 602 413 621 410 611 b 386 297 396 501 390 399 b 297 274 356 288 327 281 b 291 403 295 317 294 360 b 274 550 288 452 284 501 b 259 569 271 564 265 569 b 240 559 253 569 248 563 b 230 537 232 554 230 546 l 230 488 b 233 369 230 448 232 409 b 236 261 236 333 238 297 b 156 245 210 255 183 251 b 154 396 154 295 154 346 b 150 416 154 403 153 410 b 140 438 145 423 150 438 l 138 438 b 118 413 128 436 118 428 b 112 354 118 393 114 374 b 109 238 109 315 109 276 b 49 226 89 233 69 230 b 3 163 16 222 3 202 b 7 91 3 138 9 114 b 29 62 7 69 13 62 b 39 63 32 62 35 63 b 104 73 60 66 82 71 b 101 -10 104 46 102 17 l 92 -132 l 10 -150 b -33 -204 -19 -157 -33 -170 b -19 -310 -32 -240 -19 -274 b -6 -324 -19 -321 -13 -324 b 6 -323 -1 -324 1 -324 b 82 -307 32 -317 58 -311 b 81 -376 82 -330 81 -353 b 114 -537 81 -431 94 -484 z m 294 -92 b 297 -37 295 -73 295 -56 b 300 49 300 -9 300 20 l 300 108 b 379 127 325 114 353 120 b 374 -76 376 59 374 -9 b 294 -92 347 -82 320 -86 z m 154 -120 b 157 20 154 -73 156 -26 b 158 82 158 40 158 62 b 230 95 183 86 206 89 b 225 0 229 63 226 32 b 217 -107 223 -35 220 -71 z',\n        },\n        accidentalBuyukMucennebFlat: {\n            x_min: 1.8692317181955784,\n            x_max: 287,\n            y_min: -248,\n            y_max: 432.4720949426819,\n            ha: 680.4720949426819,\n            o: 'm 410 128 b 302 239 403 199 363 239 b 259 232 289 239 275 236 b 199 207 239 226 219 216 l 197 206 l 197 243 l 197 251 b 347 317 248 272 298 295 b 376 347 360 324 372 334 b 389 435 387 376 393 405 b 348 454 384 462 377 465 b 202 387 300 432 251 409 b 203 408 203 395 203 402 l 203 431 b 347 490 252 451 300 469 b 376 517 360 495 372 505 b 389 599 387 546 393 572 b 348 616 384 625 377 628 l 203 556 b 196 593 202 569 199 582 b 179 622 193 603 193 622 l 177 622 b 150 588 161 621 150 608 b 147 533 150 570 148 552 b 29 488 108 517 69 503 b 3 455 12 482 3 472 b 12 353 1 422 9 389 b 145 408 56 372 101 389 b 145 363 145 392 145 377 l 29 315 b 3 281 12 310 3 298 b 12 170 1 245 9 209 l 141 226 b 138 166 140 206 138 186 b 114 -199 134 43 115 -76 b 130 -344 114 -246 117 -297 b 141 -357 132 -353 135 -357 b 158 -347 145 -357 151 -354 b 219 -301 177 -331 199 -315 b 413 69 346 -210 413 -88 b 410 128 413 89 413 108 z m 350 35 b 343 6 350 26 348 17 b 180 -163 308 -69 245 -117 b 189 -46 183 -125 184 -86 b 193 49 192 -14 193 17 l 199 52 b 284 78 226 63 253 78 b 317 71 294 78 305 75 b 350 35 340 62 351 50 z',\n        },\n        accidentalBakiyeFlat: {\n            x_min: 1.8692317181955784,\n            x_max: 287,\n            y_min: -236,\n            y_max: 444,\n            ha: 680,\n            o: 'm 141 -340 b 158 -330 145 -340 151 -337 b 219 -284 177 -314 199 -298 b 413 86 346 -193 413 -71 b 410 145 413 107 413 125 b 302 256 403 216 363 256 b 259 249 289 256 275 253 b 199 225 239 243 219 233 l 197 223 l 197 261 b 199 334 197 285 199 310 b 347 406 249 357 298 382 b 376 439 360 413 372 425 b 390 516 384 465 390 490 b 389 537 390 523 390 530 b 372 564 384 556 382 564 b 348 557 367 564 359 562 b 204 487 300 537 253 510 b 206 518 206 497 206 507 b 196 611 206 549 203 580 b 179 639 193 621 193 639 l 177 639 b 150 605 161 638 150 625 b 145 482 148 564 144 523 l 145 458 b 29 405 107 439 68 420 b 3 366 12 397 3 386 b 12 243 1 325 9 287 b 143 307 56 265 99 285 l 138 183 b 114 -181 134 60 114 -59 b 130 -327 114 -229 117 -279 b 141 -340 132 -336 135 -340 z m 180 -145 b 189 -29 183 -108 184 -69 b 193 66 192 3 193 35 l 199 69 b 284 95 226 81 253 95 b 317 88 294 95 305 92 b 350 52 340 79 351 68 b 343 23 350 43 348 35 b 180 -145 305 -50 245 -99 z',\n        },\n        accidentalKomaSharp: {\n            x_min: 0,\n            x_max: 300,\n            y_min: -338,\n            y_max: 351,\n            ha: 689,\n            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',\n        },\n        accidentalKucukMucennebSharp: {\n            x_min: -0.15206251809627475,\n            x_max: 359,\n            y_min: -420,\n            y_max: 343,\n            ha: 763,\n            o: 'm 236 -605 b 262 -543 256 -583 261 -564 b 269 -423 268 -503 269 -464 b 266 -340 269 -396 268 -367 l 361 -318 b 405 -276 384 -312 399 -298 b 413 -189 412 -248 416 -219 b 395 -164 412 -171 409 -164 b 382 -166 392 -164 387 -164 b 264 -193 343 -176 304 -184 b 269 -102 265 -163 268 -132 b 454 -62 331 -89 392 -78 b 501 -23 477 -58 494 -45 b 517 62 511 6 517 33 b 487 112 517 95 513 112 b 471 111 482 112 477 112 b 274 66 406 95 340 81 b 276 138 275 91 276 114 b 350 154 301 144 325 148 b 402 203 377 160 396 176 b 412 284 408 230 412 258 b 392 311 412 302 406 311 b 372 308 386 311 379 310 b 287 291 343 301 314 297 l 295 405 b 298 441 297 416 298 428 b 292 475 298 452 297 464 b 282 494 289 482 294 494 b 264 481 274 494 266 490 b 255 455 259 474 256 464 b 239 282 248 397 243 340 b 148 268 209 278 179 274 b 62 164 62 252 62 253 l 62 132 b 79 108 60 117 65 108 l 86 108 l 230 130 b 229 92 230 118 229 105 b 228 56 228 79 228 68 b 66 20 173 43 120 32 b 0 -59 6 7 3 1 l 0 -138 b 14 -160 -1 -156 4 -160 b 27 -158 19 -160 23 -160 b 222 -112 92 -141 157 -127 b 220 -203 220 -143 220 -173 b 147 -217 196 -207 171 -213 b 89 -288 92 -228 89 -229 b 95 -347 85 -305 96 -325 b 112 -374 92 -366 98 -374 b 125 -373 117 -374 121 -374 l 220 -351 b 222 -458 220 -386 220 -422 b 236 -605 223 -504 225 -552 z',\n        },\n        accidentalKoron: {\n            x_min: 0,\n            x_max: 303,\n            y_min: -462.4598053473055,\n            y_max: 180,\n            ha: 642.4598053473055,\n            o: 'm 59 -665 b 72 -649 69 -662 72 -657 b 69 -626 72 -642 69 -634 b 69 -622 69 -625 69 -624 l 69 -600 b 55 -156 60 -456 68 -311 b 86 -170 66 -166 76 -170 b 112 -163 95 -170 104 -166 b 390 -35 204 -120 298 -78 b 436 -1 409 -27 436 -27 b 396 46 436 22 413 33 l 382 55 b 46 243 271 121 157 179 b 12 259 29 253 17 259 b 0 219 1 259 0 248 b 3 -372 0 22 3 -176 b 6 -616 3 -454 6 -536 b 59 -665 6 -638 40 -671 z m 55 199 b 363 24 156 141 258 84 b 55 -118 259 -24 160 -69 z',\n        },\n        accidentalSori: {\n            x_min: 0,\n            x_max: 434,\n            y_min: -295,\n            y_max: 325,\n            ha: 620,\n            o: 'm 194 -425 b 196 -409 194 -418 196 -413 b 194 -194 196 -337 196 -266 b 364 -127 251 -171 308 -150 b 361 -321 363 -192 364 -256 b 410 -387 360 -357 373 -377 b 413 -373 412 -382 413 -377 b 418 -114 418 -287 418 -200 l 418 -105 b 595 -35 477 -82 536 -59 b 625 0 612 -27 625 -22 b 593 48 624 23 618 39 l 419 117 b 423 370 419 202 423 285 b 426 403 423 382 426 393 b 418 436 426 415 425 426 b 384 468 409 449 399 468 b 369 448 370 468 369 459 b 369 436 369 444 369 441 l 369 428 l 369 423 b 367 138 369 328 367 233 l 353 143 l 192 207 l 192 367 b 173 406 192 383 184 396 b 151 422 167 413 160 422 b 144 420 148 422 147 422 b 137 403 138 416 137 410 l 137 392 l 137 229 b 33 271 102 243 68 256 b 13 276 26 274 19 276 b 0 262 6 276 0 272 b 35 199 1 239 0 212 l 138 160 b 140 -148 138 58 138 -45 b 56 -181 111 -158 84 -170 b 24 -215 35 -189 24 -199 b 29 -235 24 -220 26 -228 b 49 -253 35 -249 42 -253 b 78 -240 59 -253 69 -243 b 140 -216 98 -233 120 -225 l 140 -356 b 194 -425 140 -406 141 -406 z m 194 -125 b 193 138 194 -37 193 50 b 315 89 233 122 275 107 b 366 71 333 84 350 76 b 364 -58 366 27 366 -16 b 194 -125 308 -81 251 -104 z m 419 49 l 526 7 l 485 -10 l 419 -36 z',\n        },\n        articAccentAbove: {\n            x_min: 0,\n            x_max: 425,\n            y_min: 0,\n            y_max: 326,\n            ha: 326,\n            o: 'm 27 1 b 78 12 46 0 62 6 b 347 112 168 45 253 91 b 521 184 409 128 459 167 b 608 259 557 194 589 220 b 612 274 611 265 612 271 b 598 292 612 281 608 287 b 477 347 559 312 518 331 b 176 465 374 384 275 425 b 156 469 168 468 161 469 b 125 456 145 469 137 465 b 53 370 96 432 78 399 b 45 353 48 363 45 357 b 68 333 45 344 52 337 b 360 225 166 298 262 261 b 192 154 302 203 249 171 b 13 36 120 132 53 105 b 0 13 9 29 0 22 l 0 9 b 16 0 3 1 10 0 l 26 0 b 27 1 27 0 27 0 z',\n        },\n        articAccentBelow: {\n            x_min: 0,\n            x_max: 425,\n            y_min: -326,\n            y_max: 0,\n            ha: 326,\n            o: 'm 26 -469 l 27 -469 b 78 -458 46 -469 62 -464 b 347 -357 168 -426 253 -380 b 521 -285 409 -341 459 -302 b 608 -210 557 -276 589 -249 b 612 -196 611 -204 612 -200 b 598 -179 612 -189 608 -183 b 477 -122 559 -157 518 -138 b 176 -4 374 -85 275 -45 b 156 0 168 -1 161 0 b 125 -13 145 0 137 -4 b 53 -99 96 -37 78 -71 b 45 -117 48 -107 45 -112 b 68 -137 45 -125 52 -132 b 360 -245 166 -171 262 -209 b 192 -315 302 -266 249 -300 b 13 -433 120 -337 53 -366 b 0 -456 9 -442 0 -448 l 0 -461 b 16 -469 3 -468 10 -469 z',\n        },\n        articTenutoAbove: {\n            x_min: 0.35192668236256364,\n            x_max: 471.1238660564107,\n            y_min: 0,\n            y_max: 56,\n            ha: 56,\n            o: 'm 137 0 b 197 1 156 0 179 1 b 409 6 268 1 338 6 b 482 4 432 6 459 6 b 556 0 508 3 534 0 b 651 10 588 0 621 3 b 678 27 662 12 678 10 b 654 59 680 45 672 53 b 511 75 606 73 560 73 b 255 81 426 78 341 81 b 160 79 222 81 193 79 l 36 79 b 1 71 24 78 7 85 b 19 32 -3 56 9 43 b 45 16 26 24 36 20 b 137 0 76 3 108 0 z',\n        },\n        articTenutoBelow: {\n            x_min: 0.35192668236256364,\n            x_max: 471.1238660564107,\n            y_min: -59,\n            y_max: -3,\n            ha: 56,\n            o: 'm 137 -85 b 197 -84 156 -85 179 -84 b 409 -79 268 -84 338 -79 b 482 -81 432 -79 459 -79 b 556 -85 508 -82 534 -85 b 651 -75 588 -85 621 -82 b 678 -58 662 -73 678 -75 b 654 -26 680 -40 672 -32 b 511 -10 606 -12 560 -12 b 255 -4 426 -7 341 -4 b 160 -6 222 -4 193 -6 l 36 -6 b 1 -14 24 -7 7 0 b 19 -53 -3 -29 9 -42 b 45 -69 26 -60 36 -65 b 137 -85 76 -82 108 -85 z',\n        },\n        articStaccatoAbove: {\n            x_min: 1.4151102965496913,\n            x_max: 112,\n            y_min: 0,\n            y_max: 156,\n            ha: 156,\n            o: 'm 98 0 b 132 23 109 0 122 7 b 161 112 150 50 161 79 b 158 148 161 124 161 137 b 125 186 154 167 131 167 b 63 225 117 215 85 216 b 23 197 45 222 30 219 b 3 91 12 163 12 127 b 19 66 0 79 4 69 b 65 27 40 62 53 46 b 98 0 76 9 88 0 z',\n        },\n        articStaccatoBelow: {\n            x_min: 1.4151102965496913,\n            x_max: 112.08403222864916,\n            y_min: -156,\n            y_max: 0,\n            ha: 156,\n            o: 'm 132 -202 b 161 -112 151 -174 163 -145 b 158 -76 161 -101 161 -88 b 125 -39 153 -58 131 -58 b 63 0 115 -10 85 -9 b 23 -27 45 -3 30 -6 b 3 -134 12 -62 10 -98 b 19 -158 0 -145 4 -156 b 65 -197 40 -164 53 -179 b 98 -225 75 -216 88 -225 b 132 -202 109 -225 122 -217 z',\n        },\n        articStaccatissimoAbove: {\n            x_min: 0,\n            x_max: 139,\n            y_min: 0,\n            y_max: 411,\n            ha: 411,\n            o: 'm 104 0 b 144 115 143 29 138 75 b 197 423 158 217 180 320 b 200 454 199 433 200 444 b 181 540 200 482 193 513 b 112 592 167 573 141 592 b 55 567 92 592 72 585 b 0 490 32 546 3 527 l 0 484 b 27 279 14 416 14 347 b 84 20 43 193 52 104 b 96 0 86 13 92 6 z',\n        },\n        articStaccatissimoBelow: {\n            x_min: 0,\n            x_max: 139,\n            y_min: -411,\n            y_max: 0,\n            ha: 411,\n            o: 'm 88 -592 b 145 -567 108 -592 128 -585 b 200 -490 168 -546 197 -527 l 200 -484 b 173 -279 186 -416 186 -347 b 117 -20 157 -193 148 -104 b 104 0 114 -13 108 -6 l 96 0 b 56 -115 58 -29 62 -75 b 3 -423 42 -217 20 -320 b 0 -454 1 -433 0 -444 b 19 -540 0 -482 7 -513 b 88 -592 33 -573 59 -592 z',\n        },\n        articMarcatoAbove: {\n            x_min: 0.04121419527862119,\n            x_max: 396,\n            y_min: 0,\n            y_max: 328.0000000000001,\n            ha: 328.0000000000001,\n            o: 'm 477 0 b 510 13 488 0 500 6 b 570 124 546 40 563 81 b 547 183 570 147 560 166 b 356 422 487 265 405 330 b 346 442 354 429 350 436 l 346 444 b 318 465 340 456 330 464 l 312 469 b 274 449 294 480 284 461 b 242 413 262 438 253 425 b 56 196 177 343 112 274 b 1 56 26 154 13 105 b 27 20 -4 35 9 20 b 42 23 32 20 37 20 b 84 53 59 29 72 39 b 255 269 141 125 193 200 b 275 229 262 255 266 242 b 448 14 324 151 390 86 b 477 0 456 4 467 0 z',\n        },\n        articMarcatoBelow: {\n            x_min: 0,\n            x_max: 395.9587858047214,\n            y_min: -328.0000000000001,\n            y_max: 0,\n            ha: 328.0000000000001,\n            o: 'm 258 -469 b 297 -449 276 -480 287 -461 b 328 -413 308 -438 317 -425 b 514 -196 393 -343 458 -274 b 569 -56 544 -154 557 -105 b 543 -20 575 -35 562 -20 b 528 -23 539 -20 533 -20 b 487 -53 511 -29 498 -39 b 315 -269 429 -125 377 -200 b 295 -229 308 -255 304 -242 b 122 -14 246 -151 180 -86 b 94 0 114 -4 104 0 b 60 -13 82 0 71 -6 b 0 -124 24 -40 7 -81 b 23 -183 0 -147 10 -166 b 215 -422 84 -265 166 -330 b 225 -442 216 -429 220 -436 l 225 -444 b 252 -465 230 -456 240 -464 z',\n        },\n        fermataAbove: {\n            x_min: -0.04550444040404433,\n            x_max: 472,\n            y_min: 2.015071727506986,\n            y_max: 454,\n            ha: 451.984928272493,\n            o: 'm 39 10 b 78 108 66 37 71 73 b 163 311 92 181 111 252 b 284 423 199 353 239 392 b 373 458 312 444 340 454 b 433 431 395 458 410 446 b 603 153 530 361 596 276 b 595 121 603 144 595 131 l 595 88 b 602 50 596 75 589 55 b 639 73 619 43 631 60 b 651 102 645 82 648 92 b 667 194 660 132 662 163 b 680 278 671 222 672 248 b 560 567 680 386 638 481 b 396 654 508 625 452 649 b 291 632 364 654 325 644 b 161 526 235 613 200 566 b 4 249 85 446 26 357 b 4 174 0 222 -3 196 b 10 19 4 124 4 69 b 29 4 12 6 16 0 b 39 10 35 4 33 4 z m 338 37 b 370 40 350 36 357 36 b 380 75 387 40 380 43 b 389 94 382 79 382 85 b 356 132 389 111 374 122 b 269 154 328 147 300 156 b 225 125 252 154 228 157 b 261 48 222 81 232 56 b 338 37 287 40 312 40 z',\n        },\n        fermataBelow: {\n            x_min: -0.310835055998654,\n            x_max: 518.570567335755,\n            y_min: -430,\n            y_max: -0.9161449836506543,\n            ha: 429.08385501634933,\n            o: 'm 344 -615 b 500 -543 402 -602 452 -576 b 713 -253 605 -471 661 -364 b 746 -98 737 -204 750 -153 b 727 -59 744 -82 744 -59 b 688 -88 711 -59 694 -68 b 678 -109 687 -96 683 -102 b 562 -314 648 -183 611 -252 b 387 -439 516 -373 458 -416 b 328 -449 367 -446 347 -449 b 180 -386 274 -449 225 -423 b 69 -179 111 -330 69 -262 b 75 -121 69 -160 71 -141 b 84 -58 78 -101 84 -79 b 82 -39 84 -52 84 -45 b 68 -1 79 -26 82 -4 b 26 -32 49 0 33 -12 b 20 -52 24 -39 22 -45 b 0 -223 9 -107 -3 -161 b 141 -553 1 -348 27 -468 b 304 -619 192 -590 243 -619 b 344 -615 317 -619 330 -618 z m 415 -190 b 435 -157 429 -192 435 -184 b 308 -27 435 -86 379 -27 b 271 -46 287 -27 272 -35 b 269 -69 269 -55 269 -62 b 364 -183 269 -128 302 -170 z',\n        },\n        fermataLongAbove: {\n            x_min: 0,\n            x_max: 591.4911182523068,\n            y_min: -6,\n            y_max: 337.10134960318186,\n            ha: 343.10134960318186,\n            o: 'm 20 -9 b 36 14 29 -9 35 3 b 49 109 45 45 49 78 b 48 143 49 121 49 131 b 42 312 40 200 45 256 b 63 338 42 331 46 338 b 68 340 65 338 66 338 b 279 333 138 336 209 334 b 760 317 439 330 599 323 b 783 298 775 317 782 315 l 796 161 b 814 17 801 115 802 68 b 851 144 840 45 855 102 b 824 396 842 228 834 312 b 760 468 816 459 812 467 l 55 485 b 1 433 12 487 1 478 l 1 387 b 0 203 1 325 0 264 b 9 17 0 141 3 79 b 20 -9 9 7 6 -9 z m 403 3 b 439 6 413 3 425 4 b 477 42 464 9 474 22 b 478 62 478 49 478 55 l 478 84 b 465 160 478 109 478 135 b 449 173 461 167 459 173 b 354 105 386 179 354 156 b 359 71 354 95 356 84 b 360 65 360 69 360 66 b 403 3 372 14 373 3 z',\n        },\n        fermataLongBelow: {\n            x_min: 0,\n            x_max: 602,\n            y_min: -335,\n            y_max: 7,\n            ha: 342,\n            o: 'm 793 -482 b 851 -444 822 -482 842 -471 b 867 -357 860 -416 867 -387 b 865 -336 867 -350 867 -343 b 851 -189 858 -287 855 -238 b 832 -32 847 -135 840 -84 b 824 -17 832 -26 832 -17 l 822 -17 b 805 -30 816 -19 806 -20 b 798 -88 802 -50 798 -69 b 805 -292 798 -157 801 -225 b 772 -327 806 -318 801 -327 b 360 -324 635 -327 497 -325 b 78 -327 265 -323 171 -327 b 50 -304 59 -327 50 -320 l 50 -297 b 62 -187 55 -261 60 -225 b 71 -60 62 -144 71 -102 b 68 -20 71 -48 71 -33 b 53 10 66 -10 69 10 l 52 10 b 22 -22 37 9 24 -1 b 14 -121 17 -55 16 -89 b 0 -359 10 -200 0 -279 b 6 -452 0 -390 3 -420 b 42 -481 9 -478 20 -481 l 415 -481 l 415 -482 z m 409 -183 b 454 -179 420 -183 435 -181 b 505 -124 487 -176 504 -158 b 505 -89 507 -112 505 -101 b 507 -58 505 -79 507 -68 b 505 -42 507 -52 507 -48 b 485 -10 503 -29 501 -10 b 448 -9 472 -9 461 -9 b 380 -22 425 -9 402 -12 b 363 -46 372 -27 363 -35 l 363 -49 b 364 -114 363 -71 361 -94 b 409 -183 374 -168 377 -183 z',\n        },\n        fermataVeryLongAbove: {\n            x_min: 0,\n            x_max: 715,\n            y_min: -14.096346766617495,\n            y_max: 437,\n            ha: 451.0963467666175,\n            o: 'm 26 -20 b 42 -4 36 -22 39 -12 b 49 53 49 14 49 33 l 49 448 b 69 478 49 467 52 478 l 72 478 b 81 480 75 478 78 478 b 144 477 102 477 122 477 l 207 477 b 943 471 452 477 698 471 b 978 442 966 471 976 467 b 989 99 985 327 985 213 b 999 -19 991 60 995 22 b 1030 62 1028 6 1030 35 b 1021 507 1028 210 1025 359 b 1012 596 1021 537 1017 567 b 976 624 1009 618 998 624 b 507 626 819 624 662 625 b 46 629 353 628 200 629 b 7 590 19 629 7 618 b 0 101 7 428 0 264 b 16 -4 0 65 13 32 b 26 -20 17 -10 22 -19 z m 187 -9 b 207 30 206 -7 204 14 b 207 55 209 37 207 46 b 200 240 210 117 197 179 b 219 262 200 256 203 262 l 223 262 b 456 252 301 258 379 255 l 772 239 b 804 209 792 238 802 235 b 818 69 806 163 809 115 b 834 -4 821 46 816 19 b 857 56 852 13 857 35 b 851 183 857 99 858 141 b 827 360 841 242 841 301 b 786 390 821 383 809 389 b 189 409 588 403 387 402 b 153 377 163 409 153 400 b 173 27 153 259 150 143 b 187 -9 176 13 177 -9 z m 478 3 b 536 10 491 3 510 6 b 582 60 569 14 580 32 l 582 89 l 580 89 b 580 117 580 98 582 107 b 540 171 577 158 572 171 b 521 171 534 171 528 170 b 459 166 500 170 480 168 b 423 132 436 164 423 154 b 428 88 423 118 425 102 b 478 3 438 22 439 4 z',\n        },\n        fermataVeryLongBelow: {\n            x_min: -0.012345679012345682,\n            x_max: 686.4443937550029,\n            y_min: -427,\n            y_max: 30,\n            ha: 457,\n            o: 'm 56 -615 b 282 -612 132 -612 207 -613 b 924 -606 497 -608 710 -606 b 973 -570 953 -606 968 -593 b 988 -455 984 -533 991 -494 b 982 -262 984 -390 982 -327 b 976 -69 982 -197 981 -134 b 976 -14 975 -50 976 -33 b 966 43 976 4 975 23 b 940 20 953 37 943 35 b 933 -76 936 -12 933 -45 b 935 -121 933 -91 933 -107 b 940 -307 940 -183 940 -245 l 940 -435 b 919 -458 940 -451 935 -458 b 894 -459 910 -458 903 -458 b 206 -467 665 -461 435 -467 b 88 -467 167 -467 127 -468 b 45 -425 45 -467 42 -465 b 46 -400 46 -416 46 -408 b 43 -325 46 -376 43 -350 b 42 -59 42 -236 42 -148 b 22 17 42 -32 36 -6 b 0 -27 -1 7 0 -10 b 7 -420 0 -158 7 -289 l 7 -474 b 16 -579 7 -510 7 -544 b 56 -615 22 -603 27 -615 z m 789 -390 b 835 -357 816 -392 829 -380 b 850 -256 844 -324 850 -291 b 848 -230 850 -248 850 -239 b 845 -135 845 -199 845 -167 l 845 -72 b 837 23 845 -40 848 -9 b 809 -27 809 14 809 -7 l 809 -222 b 788 -242 809 -238 805 -242 l 203 -229 b 180 -209 186 -229 180 -223 l 180 -160 b 179 -115 180 -145 180 -131 b 179 -50 177 -94 179 -72 b 163 24 179 -26 176 0 b 137 -6 145 19 140 10 b 134 -39 134 -17 134 -27 b 138 -105 134 -60 137 -82 l 138 -197 b 145 -343 138 -246 138 -294 b 179 -377 148 -364 151 -377 b 789 -390 383 -377 586 -380 z m 480 -164 b 566 -65 549 -164 566 -140 b 527 1 566 -10 564 1 b 436 -71 426 1 436 -9 l 436 -88 l 436 -143 b 454 -163 436 -153 439 -161 b 480 -164 464 -163 472 -164 z',\n        },\n        fermataShortAbove: {\n            x_min: 0,\n            x_max: 545,\n            y_min: -18.08551453529649,\n            y_max: 348,\n            ha: 366.0855145352965,\n            o: 'm 16 -26 b 36 -9 26 -27 30 -16 b 354 340 143 107 249 223 b 369 348 360 346 364 348 b 382 341 373 348 377 346 l 530 199 b 743 0 599 131 672 68 b 753 -7 747 -3 750 -7 b 762 -1 756 -7 759 -6 b 785 84 776 10 785 48 b 768 150 785 112 779 138 l 399 491 b 379 501 392 498 384 501 b 357 488 372 501 364 495 b 27 137 248 370 141 251 b 1 84 12 121 1 105 b 3 69 1 79 1 75 b 0 55 1 65 0 59 b 9 1 0 36 9 20 b 16 -26 10 -7 3 -22 z m 357 24 b 367 27 360 24 363 24 b 431 118 422 42 431 49 b 429 151 431 130 431 141 b 400 193 428 171 429 193 b 333 147 359 193 333 176 b 341 42 333 111 337 78 b 357 24 343 30 346 24 z',\n        },\n        fermataShortBelow: {\n            x_min: 0,\n            x_max: 565,\n            y_min: -335,\n            y_max: 10,\n            ha: 345,\n            o: 'm 386 -482 b 422 -455 395 -482 405 -474 b 732 -117 526 -343 631 -232 b 814 12 765 -79 799 -42 b 752 -22 780 14 768 -7 b 436 -320 645 -120 540 -219 b 419 -328 429 -325 425 -328 b 400 -318 413 -328 408 -325 b 35 0 279 -212 157 -105 b 16 14 29 4 23 14 b 7 12 13 14 10 14 b 0 -3 1 7 0 1 b 7 -23 0 -10 3 -17 b 20 -48 12 -30 14 -39 b 167 -238 60 -117 115 -177 b 351 -455 229 -310 289 -383 b 386 -482 367 -474 377 -482 z m 382 -213 b 406 -207 389 -213 396 -210 b 452 -156 431 -199 446 -180 b 461 -85 456 -132 458 -108 b 448 -32 461 -66 454 -49 b 418 -6 442 -12 431 -6 b 397 -9 410 -6 405 -7 b 348 -50 376 -14 350 -14 b 356 -170 348 -91 354 -130 b 382 -213 357 -199 363 -213 z',\n        },\n        breathMarkComma: {\n            x_min: 0,\n            x_max: 148,\n            y_min: 0,\n            y_max: 275,\n            ha: 275,\n            o: 'm 120 0 b 187 78 156 20 174 48 b 213 209 206 121 213 164 b 206 294 213 238 210 265 b 140 390 200 337 171 367 b 122 396 134 395 128 396 b 68 382 105 396 85 384 b 46 379 60 382 53 382 b 0 328 12 369 0 357 b 1 311 0 323 1 317 b 30 210 4 275 22 243 b 66 167 39 179 46 167 b 94 171 73 167 82 168 b 143 180 109 174 124 180 b 160 179 148 180 154 180 b 120 66 124 145 120 107 b 120 0 120 45 121 23 z',\n        },\n        breathMarkUpbow: {\n            x_min: 0,\n            x_max: 254,\n            y_min: 0,\n            y_max: 595,\n            ha: 595,\n            o: 'm 233 0 b 256 48 251 14 253 30 b 272 183 264 92 265 138 b 311 455 289 274 295 364 b 350 716 327 541 341 628 b 366 815 354 749 366 782 b 359 857 366 829 363 842 b 327 815 334 852 330 832 b 302 674 315 769 310 721 b 248 357 288 567 269 462 b 225 226 240 314 242 268 b 210 251 212 232 213 243 b 69 721 163 408 117 564 b 32 835 58 760 53 801 b 20 851 29 841 27 851 b 14 850 19 851 16 851 b 0 828 6 847 0 838 l 0 825 b 12 765 1 804 7 785 b 194 125 73 552 132 338 b 233 0 206 84 213 42 z',\n        },\n        caesura: {\n            x_min: 0,\n            x_max: 565.5831864753837,\n            y_min: -0.09016994374947417,\n            y_max: 562.4481112129314,\n            ha: 562.5382811566809,\n            o: 'm 0 76 b 49 122 24 92 37 107 b 444 613 180 287 305 455 b 528 770 484 660 518 708 b 531 792 530 778 531 785 b 524 808 531 799 530 805 b 490 792 513 815 498 802 b 390 683 456 756 420 721 b 48 262 275 543 164 400 b 0 76 0 207 7 145 z m 226 1 b 248 13 238 -4 243 7 l 353 137 b 759 638 490 302 632 464 b 814 805 795 688 819 740 b 779 786 796 805 788 796 b 628 609 724 732 678 668 b 310 242 523 485 416 363 b 217 69 265 190 217 140 b 222 30 217 58 219 45 b 222 23 222 29 220 26 b 220 12 222 20 220 16 b 226 1 220 7 222 3 z',\n        },\n        caesuraCurved: {\n            x_min: 0,\n            x_max: 386,\n            y_min: -10,\n            y_max: 584,\n            ha: 594,\n            o: 'm 180 -14 b 246 14 213 -13 230 0 b 347 144 288 52 315 99 b 526 471 420 246 488 350 b 556 671 546 537 556 603 b 543 798 556 713 553 756 b 504 837 537 822 521 828 b 490 841 500 840 494 841 b 472 832 482 841 477 838 b 406 678 436 785 406 737 b 410 638 406 665 408 652 b 425 511 419 595 425 553 b 315 186 425 395 387 287 b 180 -14 271 122 228 58 z m 14 24 b 49 39 29 24 40 32 b 120 114 76 60 99 85 b 216 276 156 166 184 223 b 317 626 281 384 317 501 b 315 664 317 639 317 651 b 301 773 314 701 311 737 b 262 808 295 795 278 808 b 245 799 256 808 249 805 b 170 641 209 750 170 706 b 171 621 170 634 170 628 b 177 511 176 585 177 549 b 114 229 177 415 160 320 b 0 26 79 161 42 95 b 14 24 6 24 10 24 z',\n        },\n        restMaxima: {\n            x_min: 0,\n            x_max: 366,\n            y_min: -255,\n            y_max: 255,\n            ha: 510,\n            o: 'm 397 -367 b 504 -343 436 -367 468 -347 b 518 -318 516 -341 518 -330 b 527 -30 518 -217 527 -117 b 526 33 527 -7 527 13 l 526 301 b 501 350 526 323 520 341 b 428 367 477 361 452 367 b 374 359 410 367 393 364 b 357 333 361 354 357 347 b 356 91 357 252 356 171 l 356 30 b 340 -307 357 -82 346 -194 b 397 -367 337 -354 350 -367 z m 46 -357 b 58 -356 49 -357 53 -357 b 154 -333 91 -351 121 -338 b 173 -305 168 -330 173 -320 l 173 302 b 132 356 173 330 157 348 b 68 364 112 363 89 364 b 3 304 19 363 1 348 l 3 4 l 0 4 b 1 -302 0 -98 0 -200 b 46 -357 1 -331 16 -357 z',\n        },\n        restDoubleWhole: {\n            x_min: 0,\n            x_max: 122,\n            y_min: 0,\n            y_max: 249,\n            ha: 249,\n            o: 'm 43 0 b 58 1 48 0 52 0 b 124 20 81 6 102 17 b 176 96 173 27 176 58 b 173 220 174 138 173 179 b 176 304 173 248 176 276 b 140 353 176 331 163 346 b 95 359 125 356 111 359 b 32 346 73 359 52 354 b 0 315 20 340 0 337 b 1 243 0 291 1 268 l 1 174 l 4 174 l 4 48 b 43 0 4 16 17 0 z',\n        },\n        restWhole: {\n            x_min: 0.8908513171538642,\n            x_max: 500,\n            y_min: -120,\n            y_max: 14,\n            ha: 134,\n            o: 'm 356 -173 l 356 -171 l 642 -171 b 719 -115 680 -171 717 -145 b 720 -82 719 -104 720 -92 b 711 -20 720 -60 719 -40 b 672 17 704 0 694 10 b 649 20 664 20 657 20 b 605 17 634 20 621 17 b 92 19 433 17 262 17 b 29 7 69 20 49 12 b 9 -17 12 4 9 -6 b 10 -43 9 -26 10 -35 b 1 -84 10 -58 3 -72 b 76 -173 0 -147 7 -173 z',\n        },\n        restWholeLegerLine: {\n            x_min: -196.7269258015421,\n            x_max: 685,\n            y_min: -157,\n            y_max: 29,\n            ha: 186,\n            o: 'm 96 -226 b 167 -223 121 -226 144 -225 b 300 -222 207 -222 252 -222 l 444 -222 b 660 -217 520 -222 595 -222 b 746 -131 703 -216 746 -200 b 744 -62 746 -108 747 -85 b 743 -39 743 -53 743 -46 b 789 -14 743 -16 752 -17 b 883 -16 821 -13 851 -16 b 965 -9 910 -16 937 -14 b 986 3 972 -7 986 -10 l 986 6 b 963 35 984 17 982 32 b 887 42 937 39 913 42 b 39 27 605 42 321 33 l -76 27 b -261 20 -138 27 -200 26 b -282 14 -269 20 -279 23 b -271 -7 -287 4 -276 -1 b -209 -27 -253 -23 -230 -24 b -153 -30 -190 -30 -173 -30 b -48 -29 -118 -30 -82 -27 b 6 -32 -22 -29 -6 -27 b 1 -72 3 -43 1 -58 b 4 -167 1 -105 7 -140 b 53 -223 3 -207 14 -217 b 96 -226 68 -226 82 -226 z',\n        },\n        restHalf: {\n            x_min: 0,\n            x_max: 518.3998530468286,\n            y_min: 0,\n            y_max: 162,\n            ha: 162,\n            o: 'm 98 0 l 556 0 b 665 1 592 0 629 0 b 746 82 720 3 743 29 b 736 174 749 114 740 144 b 670 232 729 215 708 232 b 570 229 636 232 603 229 b 356 233 498 229 426 233 l 73 233 b 0 179 19 233 0 220 b 1 154 0 171 0 164 b 6 95 4 135 6 115 b 98 0 3 27 29 0 z',\n        },\n        restHalfLegerLine: {\n            x_min: -120,\n            x_max: 448.2056815990121,\n            y_min: -20,\n            y_max: 143,\n            ha: 163,\n            o: 'm 397 -29 b 482 -23 426 -29 455 -27 b 526 -24 497 -24 511 -24 b 608 -17 554 -24 582 -23 b 645 -1 622 -14 644 -17 b 615 26 648 13 629 20 b 595 32 608 29 602 30 b 526 37 572 35 549 37 b 498 36 517 37 507 37 b 471 35 487 35 478 35 b 445 53 451 35 445 39 b 449 89 445 60 446 73 l 454 117 b 373 206 456 173 428 206 b 324 204 356 206 340 206 b 209 203 287 203 248 203 b 46 193 156 203 101 202 b 16 170 32 190 19 187 b 9 112 13 151 9 131 b 14 78 9 101 10 89 b 19 59 17 71 19 63 b -4 45 19 49 12 45 l -10 45 b -150 33 -58 45 -104 46 b -173 22 -158 32 -173 33 l -173 19 b -151 -13 -170 6 -168 -10 b -117 -17 -140 -16 -128 -17 b 118 -13 -37 -17 39 -13 b 397 -29 213 -13 308 -29 z',\n        },\n        restQuarter: {\n            x_min: -0.3784452492533808,\n            x_max: 263,\n            y_min: -415,\n            y_max: 415,\n            ha: 830,\n            o: 'm 151 -596 b 164 -563 163 -589 161 -575 b 160 -546 164 -557 161 -552 b 124 -396 148 -495 135 -446 b 122 -380 122 -390 122 -384 b 199 -255 122 -331 158 -272 b 228 -256 209 -249 217 -253 b 324 -346 274 -271 298 -310 b 353 -369 331 -356 341 -369 b 360 -367 356 -369 357 -369 b 379 -336 373 -361 379 -348 l 377 -325 b 344 -232 372 -292 366 -258 b 249 -58 301 -180 278 -117 b 242 -36 245 -49 242 -42 b 258 -7 242 -26 248 -17 b 328 78 284 20 311 45 b 354 158 344 104 354 131 b 337 216 354 177 350 196 b 213 435 294 288 249 359 b 115 575 189 487 158 536 b 78 598 105 585 92 598 b 59 592 72 598 66 596 b 39 562 45 583 39 572 b 53 527 39 550 45 539 b 168 344 98 469 125 402 b 187 307 181 328 187 317 b 153 269 187 294 176 284 b 62 213 122 252 91 235 b 40 180 48 203 40 192 b 46 158 40 173 43 166 b 99 65 60 125 79 95 b 183 -79 131 20 160 -29 b 156 -86 173 -88 164 -85 b 0 -261 58 -99 -7 -173 b 96 -557 10 -366 49 -464 b 124 -585 102 -569 109 -580 b 145 -598 132 -588 138 -598 b 151 -596 147 -598 150 -598 z',\n        },\n        rest8th: {\n            x_min: 0,\n            x_max: 289,\n            y_min: -260,\n            y_max: 261,\n            ha: 521,\n            o: 'm 164 -374 b 212 -340 190 -373 203 -357 b 276 -190 238 -292 258 -242 b 410 285 333 -36 359 128 b 416 314 413 294 416 304 l 416 321 b 393 354 415 341 410 354 b 382 353 389 354 386 354 b 292 311 347 347 315 333 b 174 225 256 276 216 251 b 157 219 168 222 163 219 b 140 228 151 219 145 222 b 131 246 134 233 131 240 b 135 262 131 252 132 256 b 147 298 141 272 147 285 b 127 367 147 323 154 354 b 94 376 114 373 102 376 b 48 336 75 376 63 363 b 3 181 20 288 12 235 b 0 150 1 170 0 160 b 109 24 0 84 35 24 b 171 36 127 24 148 27 b 289 101 213 52 248 75 b 164 -374 256 -62 193 -213 z',\n        },\n        rest16th: {\n            x_min: 0,\n            x_max: 333,\n            y_min: -328.283950617284,\n            y_max: 244,\n            ha: 572.2839506172841,\n            o: 'm 209 -471 b 246 -458 222 -477 236 -468 b 307 -338 279 -425 300 -384 b 324 -226 312 -301 317 -262 b 428 161 350 -94 386 35 b 480 318 445 215 480 259 b 467 347 480 331 477 341 b 445 351 461 350 454 351 b 408 337 432 351 419 347 b 402 333 405 336 403 334 b 223 215 344 294 294 245 b 236 259 229 233 235 246 b 238 276 238 265 238 271 b 212 338 238 302 226 334 b 193 341 206 340 199 341 b 86 289 156 341 104 317 b 59 180 66 255 59 217 b 156 27 59 76 92 27 b 236 46 179 27 204 35 b 338 101 271 59 298 82 b 289 -49 312 49 302 0 b 196 -122 276 -99 235 -107 b 176 -114 187 -127 176 -127 l 176 -111 b 157 -53 177 -88 164 -72 b 69 -9 141 -7 101 -16 b 17 -48 43 -3 29 -27 b 0 -127 4 -73 0 -99 b 6 -186 0 -147 1 -167 b 82 -294 17 -262 37 -294 b 160 -276 102 -294 128 -289 b 219 -242 181 -268 203 -259 b 236 -230 223 -236 229 -230 b 243 -232 239 -230 240 -230 b 235 -275 248 -246 239 -261 b 202 -456 220 -334 202 -395 b 209 -471 202 -462 203 -468 z',\n        },\n        rest32nd: {\n            x_min: 0,\n            x_max: 347,\n            y_min: -497.5023916875033,\n            y_max: 483,\n            ha: 980.5023916875033,\n            o: 'm 177 -716 b 217 -690 194 -720 209 -704 b 233 -655 225 -680 230 -668 b 292 -390 253 -567 275 -480 b 361 -48 312 -275 336 -161 b 452 400 393 102 422 252 b 497 629 467 477 482 553 b 500 647 498 635 500 641 b 480 691 500 665 492 684 b 464 696 475 694 469 696 b 418 674 448 696 431 685 l 361 626 b 333 611 353 618 343 612 b 308 629 325 611 317 616 b 239 667 292 651 265 661 b 204 670 228 668 216 670 b 86 559 141 670 95 628 b 85 537 86 552 85 544 b 107 416 85 495 95 455 b 161 372 114 389 134 372 b 174 373 166 372 170 372 b 226 383 192 374 209 377 b 387 478 285 402 330 444 b 364 386 379 444 364 415 b 276 271 364 323 320 298 b 265 266 272 268 268 266 b 252 276 261 266 256 269 b 143 333 229 311 186 333 b 107 327 130 333 118 330 b 43 243 62 314 46 291 b 58 145 43 210 52 179 b 150 63 68 92 99 63 b 315 132 213 63 259 98 b 266 -58 297 63 281 4 b 207 -101 259 -91 230 -96 b 186 -66 186 -107 199 -75 b 180 -50 181 -63 183 -55 b 101 -3 160 -23 135 -3 b 9 -66 59 -3 20 -32 b 0 -118 3 -84 0 -101 b 10 -196 0 -144 6 -170 b 104 -287 20 -256 52 -287 b 137 -282 114 -287 125 -287 b 184 -269 151 -281 171 -269 b 196 -275 190 -269 193 -271 b 199 -287 197 -278 199 -282 b 184 -343 199 -304 189 -325 b 181 -348 184 -346 183 -347 b 134 -595 158 -429 131 -508 b 156 -677 134 -624 150 -648 b 177 -716 158 -693 160 -713 z',\n        },\n        rest64th: {\n            x_min: 0,\n            x_max: 428,\n            y_min: -720,\n            y_max: 473.6797408388932,\n            ha: 1193.6797408388932,\n            o: 'm 200 -1037 b 229 -1012 215 -1037 222 -1025 b 238 -984 233 -1004 236 -994 b 282 -780 248 -914 265 -848 b 386 -369 317 -644 354 -507 b 491 104 422 -212 451 -53 b 600 541 528 249 550 399 b 616 629 611 570 616 599 b 600 680 616 648 615 671 b 550 665 586 687 566 677 b 480 618 527 649 501 635 b 464 611 474 613 468 611 b 448 622 458 611 454 615 b 366 662 425 651 397 662 b 331 658 354 662 343 661 b 242 572 285 647 253 619 b 236 528 239 557 236 543 b 266 400 236 484 251 442 b 325 373 274 377 301 373 b 436 409 366 373 403 383 l 494 452 b 474 360 485 416 474 389 b 383 248 474 297 435 269 b 320 328 377 288 351 310 b 276 341 305 337 291 341 b 186 269 235 341 194 311 b 181 230 183 256 181 243 b 187 153 181 204 186 179 b 279 63 192 86 233 63 b 304 65 288 63 295 63 b 416 115 344 72 379 92 b 387 -14 406 69 397 27 b 320 -95 380 -52 369 -86 b 318 -79 320 -89 320 -84 b 223 0 305 -29 271 0 b 122 -81 171 0 135 -30 b 118 -127 120 -96 118 -112 l 118 -196 b 137 -242 118 -215 125 -229 b 209 -275 157 -266 181 -275 b 249 -269 222 -275 235 -274 b 318 -248 272 -264 294 -255 b 281 -390 315 -301 292 -344 b 276 -400 279 -393 279 -397 b 259 -420 272 -408 266 -416 b 246 -429 255 -425 251 -429 b 233 -415 242 -429 238 -426 b 176 -359 225 -389 200 -372 b 121 -346 158 -348 140 -346 b 14 -408 73 -346 27 -370 b 0 -498 4 -438 0 -468 b 6 -564 0 -520 3 -543 b 91 -635 12 -611 45 -635 b 131 -629 104 -635 117 -634 b 223 -590 163 -622 190 -603 b 166 -824 203 -671 189 -747 b 148 -912 157 -852 148 -881 b 156 -955 148 -926 150 -940 b 177 -1008 161 -972 170 -991 b 200 -1037 181 -1020 183 -1037 z',\n        },\n        rest128th: {\n            x_min: 0.6717818579024267,\n            x_max: 491,\n            y_min: -711,\n            y_max: 719,\n            ha: 1430,\n            o: 'm 233 -1015 b 271 -956 256 -1002 266 -981 l 314 -723 b 393 -350 337 -598 366 -474 b 543 312 442 -128 492 91 b 687 841 583 490 635 665 b 707 958 698 880 707 919 b 706 986 707 968 707 976 b 688 1025 704 999 704 1024 b 670 1027 683 1025 677 1027 b 629 1007 655 1027 639 1022 b 559 945 613 981 586 968 b 541 1004 553 968 559 991 b 456 1035 516 1024 488 1035 b 419 1030 444 1035 431 1034 b 344 953 379 1018 353 995 b 340 900 341 936 340 917 b 341 847 340 881 341 864 b 380 779 340 815 354 793 b 464 763 406 765 435 762 b 592 814 510 763 549 786 b 546 660 575 757 556 710 b 480 585 537 619 517 598 b 478 599 480 590 478 595 b 386 678 472 641 428 678 b 294 612 343 678 304 651 b 279 477 282 567 278 521 b 363 395 281 428 317 395 b 380 396 369 395 374 395 b 488 436 416 403 449 419 b 384 233 469 357 468 275 b 359 291 373 252 377 276 b 282 318 337 310 310 318 b 181 264 243 318 203 298 b 154 107 153 216 154 161 b 242 6 154 42 187 6 b 278 10 253 6 265 7 b 408 88 330 22 366 55 b 387 -1 400 56 393 27 b 301 -112 379 -55 354 -94 b 289 -65 297 -95 302 -79 b 219 -32 269 -42 245 -32 b 183 -37 207 -32 196 -35 b 112 -109 144 -46 121 -71 b 105 -219 104 -145 108 -183 b 186 -315 101 -276 134 -315 b 230 -307 199 -315 215 -312 b 324 -256 264 -295 292 -275 b 180 -491 323 -383 266 -471 b 183 -459 180 -480 180 -469 b 184 -442 184 -454 184 -448 l 184 -436 b 135 -369 184 -403 170 -383 b 102 -363 125 -364 114 -363 b 29 -399 73 -363 45 -376 b 1 -556 -4 -448 6 -503 b 109 -670 -4 -625 43 -670 b 140 -667 118 -670 130 -668 b 253 -616 180 -658 213 -638 b 238 -688 248 -644 242 -665 b 192 -959 220 -779 192 -867 b 193 -992 192 -971 192 -981 b 210 -1024 194 -1014 199 -1024 b 233 -1015 216 -1024 223 -1021 z',\n        },\n        dynamicPiano: {\n            x_min: -49,\n            x_max: 326.5019318364244,\n            y_min: -142,\n            y_max: 515,\n            ha: 657,\n            o: 'm -56 -204 b -42 -202 -52 -204 -46 -203 b -19 -194 -35 -202 -26 -197 b 147 -138 35 -170 91 -151 b 249 -58 194 -127 223 -95 b 262 -29 255 -50 262 -39 b 258 -17 262 -24 261 -20 b 232 -7 252 -10 242 -7 b 210 -12 225 -7 217 -9 b 125 -40 184 -23 157 -30 b 183 140 153 19 171 79 b 251 167 207 144 230 153 b 469 518 383 262 480 382 b 357 687 472 626 420 687 b 315 678 344 687 330 684 b 204 600 279 664 240 634 b 210 704 206 635 209 670 b 215 721 212 710 215 716 b 206 733 215 727 212 730 b 180 742 197 736 189 742 b 164 734 176 742 170 740 b 1 575 108 684 36 645 b -7 557 -1 569 -7 563 b -6 553 -7 556 -7 554 b 7 547 -3 547 3 547 l 17 547 b 82 575 43 547 59 567 l 82 452 b 56 46 82 317 81 180 b 17 -66 49 7 46 -36 b -62 -173 -13 -99 -37 -135 b -71 -192 -66 -179 -71 -184 b -68 -199 -71 -193 -69 -196 b -56 -204 -65 -203 -60 -204 z m 196 258 b 197 266 197 261 197 264 b 200 510 200 347 199 429 b 233 543 210 521 222 533 b 281 560 249 554 266 560 b 340 503 310 560 333 540 b 344 461 343 488 344 474 b 321 323 344 413 333 369 b 268 272 315 300 295 281 b 196 258 245 265 220 261 z',\n        },\n        dynamicMezzo: {\n            x_min: -18,\n            x_max: 559,\n            y_min: -50,\n            y_max: 365,\n            ha: 415,\n            o: 'm 43 -71 b 160 19 86 -71 143 -26 b 230 264 189 99 200 184 b 282 363 243 297 259 327 b 287 320 285 347 287 333 b 284 279 287 305 285 292 l 249 -12 b 275 -43 248 -29 245 -43 b 395 45 321 -43 389 3 b 462 271 406 124 436 197 b 523 387 475 310 490 348 l 523 346 b 504 130 521 274 513 202 b 501 81 501 114 501 98 b 510 3 501 55 504 29 b 580 -72 521 -48 543 -72 b 625 -63 593 -72 608 -69 b 789 50 690 -43 744 -3 b 805 72 795 56 805 63 b 798 85 805 76 802 81 b 778 94 792 91 785 94 b 755 85 770 94 763 91 l 693 40 b 675 33 685 36 680 33 b 658 52 668 33 662 39 b 645 144 651 82 645 112 b 658 448 641 246 660 346 b 606 507 658 485 638 507 b 583 504 599 507 592 505 b 495 446 547 497 521 471 b 420 373 471 423 448 399 b 413 458 418 406 418 432 b 361 507 408 490 386 507 b 320 491 347 507 333 501 b 160 307 256 444 207 382 l 160 337 b 174 488 160 387 174 438 b 156 521 174 501 173 513 b 137 526 148 524 143 526 b 109 513 127 526 118 520 b -16 399 66 477 23 439 b -26 383 -20 395 -26 389 l -26 379 b -14 370 -24 372 -20 370 b -6 372 -12 370 -9 372 b 19 376 4 374 12 376 b 36 359 32 376 36 370 b 30 330 36 350 35 341 l 30 323 b 9 -35 23 203 17 85 b 43 -71 6 -65 19 -71 z',\n        },\n        dynamicForte: {\n            x_min: -144,\n            x_max: 311.30112136775,\n            y_min: -115.3876295915697,\n            y_max: 504,\n            ha: 619.3876295915697,\n            o: 'm -101 -166 b 173 76 7 -153 150 -30 b 206 344 192 164 202 253 b 268 338 226 343 246 341 b 384 395 317 333 353 361 b 397 419 393 405 397 412 b 367 442 397 429 387 436 b 350 444 361 444 356 444 b 206 455 302 449 255 454 l 206 474 b 202 540 204 495 202 518 b 209 593 202 557 203 576 b 236 624 215 613 225 624 b 265 612 245 624 253 619 b 308 552 287 596 302 577 b 336 533 312 534 323 533 b 448 611 366 533 444 583 b 399 696 452 648 423 671 b 382 706 395 700 387 703 b 308 726 357 720 333 726 b 207 684 272 726 239 711 b 60 455 135 622 60 560 l 10 455 b -23 448 -1 455 -13 454 b -102 372 -55 426 -76 397 b -109 357 -108 367 -109 361 b -95 347 -109 353 -105 348 b -63 346 -84 346 -73 346 b 0 344 -43 344 -22 344 l 63 344 b 53 186 63 291 59 239 b 23 0 46 124 42 60 b -35 -60 10 -42 -6 -60 b -73 -52 -45 -60 -58 -58 b -91 -48 -79 -49 -85 -48 b -109 -53 -96 -48 -102 -49 b -199 -124 -143 -72 -168 -99 b -207 -137 -203 -128 -207 -132 b -194 -148 -207 -141 -203 -145 b -101 -166 -164 -160 -132 -168 z',\n        },\n        dynamicRinforzando: {\n            x_min: -75,\n            x_max: 322.0960720195126,\n            y_min: -90,\n            y_max: 325,\n            ha: 415,\n            o: 'm 23 -130 b 40 -125 27 -130 33 -128 b 128 -9 81 -114 125 -53 b 145 200 132 62 141 130 b 148 238 147 212 148 225 b 308 321 184 291 245 321 b 363 314 325 321 344 318 b 377 310 369 312 373 310 b 384 311 380 310 382 310 b 464 415 410 317 464 389 b 446 433 465 429 455 429 b 390 445 428 441 409 445 b 305 429 361 445 334 438 b 167 346 252 413 202 393 b 153 325 163 338 158 333 b 148 438 154 363 151 399 b 121 468 147 456 134 468 b 101 458 115 468 108 465 b -63 310 46 409 -16 367 b -108 240 -78 289 -98 271 b 32 330 -50 256 -13 297 b 37 304 37 320 37 312 l 37 292 b 10 -101 27 161 20 30 b 23 -130 9 -120 12 -130 z',\n        },\n        dynamicSforzando: {\n            x_min: 0,\n            x_max: 296,\n            y_min: 0,\n            y_max: 379,\n            ha: 379,\n            o: 'm 151 0 b 174 1 160 0 166 0 b 392 158 272 14 346 71 b 405 207 400 174 405 190 b 359 287 405 236 389 265 b 261 325 328 308 294 315 b 168 413 216 340 181 366 b 166 426 167 418 166 423 b 176 438 166 432 167 436 b 199 441 183 441 190 441 b 310 393 238 441 295 422 b 334 370 317 376 325 370 b 363 386 343 370 353 379 b 422 445 386 402 408 420 b 426 458 425 449 426 454 b 422 469 426 462 425 465 b 274 546 395 518 333 546 b 161 503 232 546 190 531 b 86 405 132 472 108 439 b 71 347 75 387 71 367 b 112 256 71 312 85 279 b 209 215 141 232 176 226 b 284 168 238 206 266 197 b 300 131 291 157 300 144 b 298 120 300 127 298 122 b 278 107 294 109 285 108 b 262 108 271 107 266 108 l 259 108 b 114 157 200 107 156 125 b 96 181 104 163 96 170 l 96 184 b 102 202 96 190 102 196 b 96 209 102 204 101 207 b 63 194 82 215 72 204 b 7 109 42 168 26 138 b 0 86 3 101 0 94 b 13 60 0 78 4 68 b 151 0 53 23 101 0 z',\n        },\n        dynamicZ: {\n            x_min: -42.73880183193087,\n            x_max: 331,\n            y_min: 0,\n            y_max: 328,\n            ha: 328,\n            o: 'm -45 0 b -6 16 -32 0 -17 10 b 3 20 -3 16 0 19 b 144 60 49 48 96 60 b 284 22 190 60 238 46 b 348 4 305 10 327 4 b 461 75 393 4 435 30 b 468 91 464 81 467 86 b 456 104 468 95 465 99 b 287 173 402 131 348 167 b 239 176 271 174 255 176 b 168 174 217 176 194 174 b 367 340 236 236 298 294 b 459 423 402 363 432 392 b 477 454 467 431 475 442 b 474 462 477 456 475 459 b 454 472 469 469 462 472 b 432 468 446 472 439 469 b 356 448 406 461 380 455 b 210 422 307 433 258 422 b 109 442 177 422 144 428 b 94 445 104 444 99 445 b 69 433 85 445 76 442 b 27 390 56 419 39 406 b -9 343 16 373 -17 357 b 63 311 3 320 36 314 l 78 311 b 132 307 95 308 114 307 b 240 314 168 307 203 311 l 193 271 b -37 50 117 196 19 145 b -59 7 -46 36 -69 20 b -45 0 -55 3 -50 0 z',\n        },\n        ornamentTrill: {\n            x_min: 1,\n            x_max: 551,\n            y_min: -18,\n            y_max: 539,\n            ha: 557,\n            o: 'm 321 612 b 190 602 278 605 235 605 l 190 638 b 187 693 190 652 190 667 b 161 776 184 717 193 776 b 137 747 150 776 137 766 b 130 654 135 716 131 685 l 130 596 l 52 588 b 4 539 23 585 7 570 b 1 477 3 530 1 500 b 3 448 1 461 3 448 l 3 452 b 53 432 6 436 23 432 b 134 435 75 432 102 433 b 151 117 138 328 147 223 b 170 13 153 82 157 46 b 209 -26 179 -10 193 -26 b 222 -22 213 -26 217 -24 b 269 -17 233 -16 253 -27 b 343 135 325 19 346 66 b 343 158 343 147 344 147 b 323 192 341 171 337 187 b 291 176 311 194 300 184 l 264 148 b 229 131 261 145 238 131 b 212 170 209 131 213 154 b 194 438 203 259 199 348 l 272 442 b 284 452 276 441 279 441 b 305 462 287 461 295 462 l 312 462 b 346 477 325 462 340 464 b 366 560 357 503 366 531 b 321 612 366 598 356 618 z m 759 588 b 711 560 749 592 733 570 b 588 500 671 541 631 521 b 583 533 586 514 586 524 b 560 576 577 549 577 572 b 517 550 541 582 528 564 b 416 423 482 508 452 462 b 382 353 392 397 384 370 b 387 305 380 341 386 318 b 392 275 389 295 392 285 b 409 243 393 262 393 243 b 431 262 419 243 425 255 b 521 373 459 298 488 333 b 523 354 521 366 523 360 b 520 337 523 346 521 340 b 508 295 513 323 508 310 b 530 102 508 279 524 122 b 549 66 533 88 530 66 b 577 99 563 66 572 84 b 580 131 580 109 580 121 l 580 302 b 600 347 580 318 582 337 b 701 392 632 364 665 384 b 793 518 785 409 793 435 b 759 588 793 559 785 576 z',\n        },\n        ornamentTurn: {\n            x_min: 0,\n            x_max: 574,\n            y_min: 0,\n            y_max: 312,\n            ha: 312,\n            o: 'm 651 0 b 816 132 727 0 796 46 b 827 223 822 163 827 193 b 808 340 827 262 821 301 b 665 449 785 408 729 449 b 636 446 655 449 647 448 b 589 384 600 441 586 422 l 602 300 b 611 285 603 291 605 285 b 621 288 613 285 616 287 b 655 295 632 294 644 295 b 711 284 674 295 693 289 b 773 209 740 275 773 232 b 697 156 773 184 734 160 b 664 154 685 154 675 154 b 579 168 635 154 608 158 b 455 242 533 186 495 213 b 261 400 387 291 331 354 b 160 432 225 422 190 432 b 20 328 98 432 49 392 b 0 229 6 295 0 262 b 30 71 0 176 14 122 b 144 3 43 29 96 3 b 168 6 153 3 160 4 b 248 122 233 20 248 39 b 246 147 248 124 248 135 b 226 177 243 164 239 177 b 206 170 220 177 215 174 b 144 154 186 158 166 154 b 79 170 122 154 101 160 b 53 202 62 179 53 189 b 60 228 53 209 55 217 b 161 281 81 261 120 281 b 183 279 168 281 176 281 b 325 190 243 269 284 229 b 572 16 402 124 475 53 b 651 0 598 6 625 0 z',\n        },\n        ornamentTurnSlash: {\n            x_min: 0,\n            x_max: 574,\n            y_min: -106,\n            y_max: 405,\n            ha: 511,\n            o: 'm 441 -153 b 456 -60 455 -118 456 -89 b 455 81 455 -14 455 33 b 572 14 491 55 530 30 b 651 -1 598 4 625 -1 b 816 131 727 -1 796 45 b 827 222 822 161 827 192 b 808 338 827 261 821 300 b 665 448 785 406 729 448 b 636 445 655 448 647 446 b 589 383 600 439 586 420 l 602 298 b 611 284 603 289 605 284 b 621 287 613 284 616 285 b 655 294 632 292 644 294 b 711 282 674 294 693 288 b 773 207 740 274 773 230 b 697 154 773 183 734 158 b 664 153 685 153 675 153 b 579 167 635 153 608 157 b 455 240 533 183 495 212 b 454 242 455 240 455 242 l 454 337 b 452 488 454 386 452 439 b 433 570 452 517 451 546 b 425 583 431 575 431 583 l 422 583 b 403 566 415 582 408 573 b 402 546 400 560 402 553 l 397 287 b 261 399 353 325 310 366 b 160 431 225 420 190 431 b 20 327 98 431 48 390 b 0 228 6 294 0 261 b 30 69 0 174 14 121 b 144 1 43 27 96 1 b 168 4 153 1 160 3 b 248 121 233 19 248 37 b 246 145 248 122 248 134 b 226 176 243 163 239 176 b 206 168 220 176 215 173 b 144 153 186 157 166 153 b 79 168 122 153 101 158 b 53 200 62 177 53 187 b 60 226 53 207 55 216 b 161 279 79 259 120 279 b 183 278 168 279 176 279 b 325 189 243 266 282 226 b 395 130 348 168 372 148 b 393 71 393 109 393 89 b 441 -153 390 -6 402 -78 z',\n        },\n        ornamentMordent: {\n            x_min: 0,\n            x_max: 700,\n            y_min: 0,\n            y_max: 497,\n            ha: 497,\n            o: 'm 513 0 b 528 39 526 14 527 27 b 531 72 531 50 531 60 b 528 138 531 94 528 117 l 528 347 b 552 359 537 354 544 359 b 579 338 560 359 569 353 b 674 217 609 297 639 255 b 719 190 690 200 704 190 b 759 215 732 190 744 197 b 940 395 815 279 877 337 b 1001 490 968 422 986 455 b 1008 513 1004 495 1008 505 b 1002 524 1008 517 1007 521 b 968 516 994 530 978 524 b 960 508 965 513 963 510 b 798 356 900 464 848 410 b 778 341 791 347 783 341 b 757 354 772 341 765 346 b 661 475 720 392 690 432 b 611 517 644 504 629 517 b 563 498 598 517 583 511 b 527 471 550 490 539 481 l 527 570 b 492 716 526 619 523 671 b 472 677 480 704 472 694 b 465 399 474 585 468 491 b 439 366 456 387 448 376 b 384 320 415 336 399 320 b 330 367 369 320 354 336 b 325 376 328 369 327 373 b 226 490 291 413 265 456 b 189 505 213 500 202 505 b 157 491 177 505 167 500 b 0 229 75 420 0 346 b 1 202 0 220 0 212 b 22 215 12 203 16 209 b 124 327 55 252 89 289 b 147 343 132 337 140 343 b 171 323 156 343 164 336 b 266 197 196 276 232 236 b 337 157 291 170 314 157 b 410 207 361 157 386 174 b 461 274 428 229 444 252 b 462 166 461 238 461 202 b 513 0 465 108 487 55 z',\n        },\n        ornamentShortTrill: {\n            x_min: 0,\n            x_max: 747,\n            y_min: 0,\n            y_max: 243,\n            ha: 243,\n            o: 'm 379 0 b 428 14 395 0 410 4 b 474 56 445 26 461 39 b 552 157 500 89 526 122 b 566 168 556 163 560 168 b 575 157 569 168 572 166 b 664 36 592 107 628 72 b 733 1 685 13 710 1 b 802 35 757 1 780 13 b 1007 249 871 105 940 177 b 1067 324 1028 272 1054 295 b 1076 340 1068 330 1076 334 b 1073 346 1076 341 1076 343 b 1057 350 1068 348 1063 350 b 1047 347 1053 350 1050 350 b 1001 310 1031 336 1015 324 l 857 157 b 844 143 852 153 848 143 b 835 150 841 143 838 144 b 757 242 815 186 780 209 b 685 298 739 268 713 284 b 641 310 670 305 655 310 b 590 288 625 310 608 304 b 497 179 554 256 527 215 b 480 164 490 170 485 164 b 462 179 474 164 469 168 b 372 295 436 220 405 258 b 278 344 346 324 312 344 b 199 310 252 344 226 334 b 92 196 161 274 128 233 b 0 24 46 148 23 89 b 42 48 22 27 32 37 b 156 168 84 85 114 132 b 196 192 174 184 186 192 b 228 158 206 192 215 181 b 312 36 252 114 282 75 b 379 0 331 12 354 0 z',\n        },\n        ornamentTremblement: {\n            x_min: 0,\n            x_max: 982.17691453624,\n            y_min: 0,\n            y_max: 224,\n            ha: 224,\n            o: 'm 0 0 b 63 36 30 12 48 23 b 157 124 94 66 125 94 b 177 135 164 131 170 135 b 196 122 183 135 189 131 b 268 40 217 94 245 68 b 323 6 288 16 304 6 b 369 20 336 6 350 10 b 412 53 384 29 399 40 b 501 145 442 84 472 114 b 523 158 508 154 516 158 b 543 145 528 158 536 154 b 641 45 576 112 608 78 b 698 17 658 27 677 17 b 729 23 708 17 719 20 b 804 65 756 32 780 46 b 904 154 837 95 871 124 b 920 163 910 160 916 163 b 936 153 924 163 930 160 b 1024 60 965 121 996 92 b 1112 13 1053 29 1080 13 b 1184 39 1135 13 1158 22 b 1359 194 1248 84 1305 138 b 1413 301 1388 223 1403 261 b 1404 323 1417 315 1413 323 b 1391 320 1400 323 1395 321 b 1344 294 1375 314 1358 307 b 1224 186 1305 258 1269 216 b 1194 173 1212 179 1202 173 b 1165 193 1184 173 1175 179 b 1096 271 1145 222 1122 248 b 1001 318 1061 302 1031 318 b 903 268 969 318 937 301 b 806 186 871 239 841 210 b 782 174 796 179 789 174 b 756 193 773 174 765 180 b 652 291 729 232 693 266 b 596 308 634 302 615 308 b 530 278 573 308 552 298 l 415 168 b 393 157 408 161 400 157 b 373 171 387 157 380 161 b 305 245 353 197 330 222 b 248 276 285 266 266 278 b 189 245 229 276 210 266 b 81 144 156 209 120 174 b 0 0 33 109 26 56 z',\n        },\n        ornamentPrecompAppoggTrill: {\n            x_min: -0.11067192132025548,\n            x_max: 1066,\n            y_min: -50,\n            y_max: 533.1706452421108,\n            ha: 583.1706452421108,\n            o: 'm 187 -46 b 213 -14 197 -37 204 -26 b 285 151 251 36 266 94 b 304 189 294 177 297 189 b 337 168 311 189 320 181 b 458 33 386 131 415 76 b 495 12 472 19 484 12 b 531 40 508 12 518 22 b 580 168 557 79 569 124 b 622 235 592 213 603 235 b 683 194 636 235 655 222 b 838 26 737 140 791 86 b 919 -33 860 -1 881 -39 b 984 53 960 -27 971 19 b 1022 156 998 86 1008 122 b 1054 190 1032 179 1041 190 b 1089 167 1063 190 1074 183 b 1208 32 1129 122 1171 78 b 1244 10 1221 17 1231 10 b 1273 22 1253 10 1263 14 b 1496 206 1352 78 1427 137 b 1535 310 1526 236 1535 272 b 1531 359 1535 325 1534 343 b 1496 343 1515 360 1506 351 l 1309 192 b 1269 167 1289 176 1279 167 b 1234 199 1260 167 1251 177 b 1122 324 1200 243 1168 289 b 1074 344 1106 337 1089 344 b 1014 301 1051 344 1030 328 b 952 144 985 252 971 197 b 933 121 946 128 940 121 b 910 137 927 121 920 125 b 850 210 888 161 870 186 b 687 369 799 266 750 325 b 631 390 665 383 647 390 b 567 327 602 390 580 369 b 527 199 554 284 543 242 b 508 168 520 179 514 168 b 482 192 503 168 495 177 b 353 328 444 240 405 292 b 312 343 338 338 324 343 b 266 297 292 343 276 327 b 204 125 248 239 232 180 b 143 79 193 102 173 79 b 92 122 117 79 105 102 b 81 154 86 131 84 143 b 48 423 59 242 50 333 b 45 544 46 464 45 504 b 53 730 45 606 48 668 b 40 768 55 744 52 766 b 13 730 19 770 14 747 b 0 514 7 658 -1 586 b 26 122 3 383 6 252 b 75 -36 35 66 40 10 b 134 -72 92 -59 112 -72 b 187 -46 151 -72 170 -63 z',\n        },\n        ornamentPrecompSlideTrillDAnglebert: {\n            x_min: 0,\n            x_max: 1088,\n            y_min: -380,\n            y_max: 252,\n            ha: 632,\n            o: 'm 560 -539 b 439 -481 527 -497 484 -485 b 354 -461 409 -478 380 -477 b 131 -154 236 -389 161 -285 b 124 -98 127 -135 124 -117 b 196 55 124 -40 148 10 b 308 99 230 86 268 99 b 399 81 337 99 367 92 b 514 22 441 66 477 43 b 619 -30 567 -9 590 -30 b 719 17 642 -30 670 -16 b 861 131 769 52 818 88 b 899 150 874 144 887 150 b 936 117 913 150 926 138 b 965 43 948 94 956 68 b 1007 -1 973 24 978 -1 b 1048 30 1025 -1 1037 16 b 1070 65 1057 40 1064 52 b 1110 148 1084 92 1096 121 b 1145 190 1120 164 1120 190 b 1191 153 1169 192 1179 168 b 1256 29 1218 115 1231 68 b 1292 1 1267 10 1277 1 b 1320 10 1300 1 1309 4 b 1369 48 1339 19 1355 33 b 1515 196 1418 96 1464 148 b 1567 343 1558 238 1567 287 b 1555 363 1565 357 1562 363 b 1539 356 1551 363 1547 360 b 1433 268 1502 330 1466 301 b 1335 171 1401 236 1374 199 b 1310 163 1325 166 1318 163 b 1286 183 1302 163 1293 168 b 1218 311 1264 226 1247 272 b 1164 351 1200 337 1182 351 b 1110 308 1146 351 1128 337 b 1031 176 1084 265 1058 219 b 1015 161 1025 166 1021 161 b 999 179 1009 161 1005 167 b 955 279 985 213 973 248 b 913 307 943 300 930 307 b 887 302 904 307 896 305 b 852 281 874 298 863 291 b 693 167 804 236 747 204 b 612 140 667 150 639 140 b 549 157 592 140 570 145 b 403 220 503 181 452 202 b 271 248 360 236 315 248 b 179 229 239 248 209 242 b 0 -29 65 180 0 85 b 9 -104 0 -53 3 -78 b 397 -526 56 -317 183 -464 b 505 -547 432 -536 468 -547 b 560 -539 524 -547 541 -544 z',\n        },\n        ornamentPrecompSlideTrillBach: {\n            x_min: 0,\n            x_max: 1185,\n            y_min: -380,\n            y_max: 465,\n            ha: 845,\n            o: 'm 624 -544 b 642 -528 638 -543 642 -537 b 639 -514 642 -524 642 -520 b 590 -444 629 -487 609 -467 b 523 -413 573 -422 553 -410 b 498 -415 514 -415 507 -415 b 399 -389 464 -415 431 -405 b 89 -157 281 -330 176 -255 b 72 -117 78 -144 72 -131 b 73 -101 72 -111 72 -107 b 187 186 91 3 147 91 b 246 230 200 216 222 230 b 300 209 262 230 281 223 b 456 48 359 163 403 101 b 540 -10 494 10 518 -10 b 625 59 566 -10 589 13 b 690 148 648 88 668 118 b 711 167 697 160 704 167 b 733 153 719 167 724 163 b 844 14 769 105 808 60 b 903 -42 873 -23 886 -42 b 973 -1 919 -42 937 -27 b 1008 33 986 7 996 20 b 1048 81 1021 48 1035 65 b 1050 37 1048 66 1050 52 b 1047 -24 1050 17 1048 -3 b 1038 -275 1038 -108 1040 -192 l 1037 -289 b 1045 -302 1037 -295 1038 -301 b 1068 -284 1056 -304 1064 -292 b 1084 -242 1076 -271 1081 -256 b 1099 -109 1096 -199 1099 -154 b 1106 158 1099 -19 1106 71 b 1128 187 1113 167 1120 177 b 1168 223 1143 212 1155 223 b 1210 193 1179 223 1191 213 b 1220 183 1214 190 1215 186 b 1329 36 1261 138 1292 84 b 1374 7 1345 16 1358 7 b 1411 20 1384 7 1395 12 b 1479 84 1437 37 1459 59 b 1610 235 1521 135 1564 186 b 1706 403 1655 282 1695 334 b 1614 346 1663 400 1637 373 b 1464 170 1564 287 1515 228 b 1440 150 1453 156 1447 150 b 1414 173 1433 150 1426 158 b 1283 336 1371 228 1333 288 b 1220 366 1261 356 1240 366 b 1148 318 1194 366 1169 350 b 1103 255 1133 297 1119 275 b 1097 301 1102 271 1100 285 b 1099 334 1099 312 1099 324 b 1092 428 1099 367 1094 397 b 1071 647 1087 501 1079 575 b 1058 670 1071 657 1071 670 b 1035 648 1047 670 1038 661 b 1018 516 1024 605 1015 560 b 1041 203 1025 412 1037 307 b 1043 180 1041 196 1043 187 b 992 127 1027 161 1009 143 b 965 111 981 117 972 111 b 936 132 955 111 946 120 b 829 268 900 179 867 225 b 760 317 801 301 780 317 b 691 258 739 317 719 297 b 605 147 664 219 641 177 b 589 138 599 141 593 138 b 572 148 583 138 579 141 b 415 317 520 206 467 261 b 327 372 390 343 366 366 b 300 373 317 373 308 373 b 154 295 239 373 190 348 b 55 138 120 243 85 192 b 0 -53 22 79 0 13 b 160 -317 0 -156 49 -252 b 209 -354 177 -327 192 -343 b 510 -531 305 -419 397 -495 b 593 -547 537 -540 564 -547 b 624 -544 603 -547 613 -546 z',\n        },\n        ornamentPrecompTrillSuffixDandrieu: {\n            x_min: 0,\n            x_max: 1003,\n            y_min: -20,\n            y_max: 521,\n            ha: 541,\n            o: 'm 791 -16 b 844 33 812 -3 829 14 b 981 271 900 107 937 190 b 994 288 984 278 985 288 b 1009 269 1004 288 1007 278 b 1077 112 1034 217 1051 163 b 1158 43 1103 62 1129 43 b 1231 69 1179 43 1204 55 b 1348 189 1280 98 1315 143 b 1444 451 1407 271 1444 357 b 1431 547 1444 482 1440 514 b 1188 750 1401 665 1299 750 b 1158 747 1178 750 1168 749 b 1079 684 1119 742 1089 727 b 1063 632 1076 665 1071 648 b 1056 609 1058 622 1056 615 b 1071 599 1056 602 1060 599 b 1086 600 1076 599 1080 600 b 1130 605 1102 603 1116 605 b 1244 569 1171 605 1210 595 b 1349 346 1322 511 1349 433 b 1348 312 1349 334 1349 324 b 1289 197 1345 266 1325 228 b 1238 174 1270 181 1253 174 b 1188 215 1220 174 1202 187 b 1145 308 1172 245 1159 276 b 1096 413 1129 343 1120 382 b 1053 438 1084 431 1068 438 b 1011 413 1038 438 1022 431 b 955 324 989 384 971 354 b 850 127 920 258 886 192 b 838 112 847 121 842 112 b 824 128 828 109 825 121 b 802 193 815 150 809 171 b 730 400 779 264 766 337 b 688 431 719 420 703 431 b 647 403 674 431 660 422 b 606 338 632 383 619 361 b 513 167 575 282 546 223 b 480 122 503 150 498 122 b 452 171 459 122 459 153 b 420 255 442 199 432 228 b 337 408 399 308 380 364 b 276 436 317 428 297 436 b 215 397 253 436 230 423 b 23 72 148 289 81 184 b 0 29 17 59 0 40 b 7 17 0 23 1 20 b 59 58 26 7 46 39 b 190 276 111 127 143 206 b 216 301 202 292 207 301 b 245 279 223 301 232 294 b 311 166 278 248 292 206 b 367 16 331 117 346 65 b 402 -19 377 -7 387 -19 b 438 -4 412 -19 423 -13 b 518 88 474 17 495 55 b 628 284 562 150 592 216 b 657 223 648 266 651 243 b 717 13 677 154 696 84 b 755 -29 726 -16 737 -29 b 791 -16 765 -29 776 -24 z',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefix: {\n            x_min: 0,\n            x_max: 1246,\n            y_min: -30,\n            y_max: 296.0302860502196,\n            ha: 326.0302860502196,\n            o: 'm 360 -43 b 559 59 445 -43 503 7 b 698 236 615 111 652 179 b 714 248 704 243 710 248 b 727 235 719 248 721 243 l 848 42 b 883 12 860 22 870 12 b 917 32 891 12 903 19 b 946 62 927 42 939 50 b 1037 192 972 108 1009 147 b 1057 210 1044 204 1051 210 b 1076 190 1063 210 1068 203 l 1176 12 b 1215 -19 1188 -9 1201 -19 b 1250 -6 1225 -19 1237 -14 b 1284 27 1264 3 1274 16 b 1380 190 1323 78 1351 135 b 1395 210 1384 197 1385 210 b 1413 190 1405 210 1410 197 b 1508 40 1436 134 1467 85 b 1564 3 1529 14 1547 3 b 1617 32 1580 3 1597 12 b 1767 238 1678 92 1719 167 b 1794 310 1781 259 1791 282 b 1752 294 1776 317 1764 304 b 1656 164 1711 258 1689 206 b 1629 144 1646 151 1637 144 b 1603 161 1620 144 1613 150 b 1502 315 1562 207 1525 258 b 1452 357 1490 344 1470 357 b 1397 320 1431 357 1411 344 b 1316 170 1368 271 1345 219 b 1280 127 1306 154 1303 127 b 1244 171 1256 127 1254 154 b 1145 337 1210 226 1179 282 b 1110 363 1135 354 1122 363 b 1070 338 1097 363 1084 354 b 1050 311 1063 330 1057 320 b 959 181 1017 271 992 223 b 939 167 950 173 945 167 b 920 184 933 167 927 173 b 818 343 887 238 852 291 b 759 395 795 377 778 395 b 701 344 742 395 724 377 b 698 338 700 341 700 340 b 544 154 652 272 605 207 b 412 98 501 117 458 98 b 304 130 377 98 341 108 b 95 373 204 187 144 275 b 58 426 85 393 82 428 b 19 366 26 426 26 389 b 0 307 13 346 0 327 b 4 287 0 300 1 294 b 174 36 49 194 91 102 b 360 -43 230 -9 289 -43 z',\n        },\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\n            x_min: 0,\n            x_max: 1226,\n            y_min: -237,\n            y_max: 436,\n            ha: 673,\n            o: 'm 1279 -341 b 1293 -252 1293 -307 1295 -278 b 1277 36 1287 -156 1282 -59 l 1273 118 b 1318 176 1289 137 1303 157 b 1349 203 1332 193 1342 203 b 1378 168 1359 203 1367 192 b 1456 35 1401 122 1428 78 b 1511 -12 1476 3 1493 -12 b 1568 23 1526 -12 1544 0 b 1597 53 1578 32 1588 42 b 1705 186 1629 101 1669 143 b 1761 284 1728 216 1751 246 b 1765 300 1763 288 1765 295 b 1763 307 1765 302 1765 305 b 1737 302 1754 311 1744 308 b 1718 287 1729 298 1725 292 b 1598 145 1673 245 1637 194 b 1578 130 1590 135 1584 130 b 1557 147 1571 130 1565 135 b 1447 321 1516 202 1488 265 b 1403 351 1433 341 1417 351 b 1358 323 1388 351 1372 341 b 1269 209 1329 285 1299 248 b 1254 521 1264 314 1259 418 b 1228 616 1253 554 1247 588 b 1218 628 1224 621 1223 628 l 1215 628 b 1201 613 1210 626 1202 619 b 1200 600 1200 609 1200 605 l 1200 586 b 1211 348 1204 507 1207 428 b 1217 166 1214 288 1215 226 b 1202 181 1212 168 1208 174 b 1094 334 1168 233 1130 284 b 1048 366 1079 356 1064 366 b 1004 331 1034 366 1018 354 b 904 154 969 275 930 220 b 873 202 887 171 880 187 b 778 356 845 256 819 311 b 737 379 763 372 750 379 b 698 353 724 379 711 370 l 621 232 b 415 114 570 154 495 114 b 302 138 377 114 340 121 b 73 400 187 192 117 284 b 55 420 69 415 62 420 b 42 410 50 420 45 416 b 0 292 23 373 0 334 b 4 262 0 282 1 272 b 168 39 32 168 92 99 b 359 -26 225 -6 292 -26 b 585 76 446 -26 530 10 b 668 202 616 115 641 160 b 693 228 680 219 687 228 b 720 203 700 228 707 219 b 801 63 752 160 775 111 b 844 7 812 42 818 7 b 910 66 877 6 894 39 b 923 94 916 75 919 85 b 995 219 945 137 968 179 b 1025 184 1009 210 1017 197 b 1119 56 1054 141 1087 98 b 1166 20 1138 32 1152 20 b 1215 50 1181 20 1195 30 b 1221 56 1217 52 1218 55 b 1228 -163 1223 -17 1225 -89 b 1279 -341 1231 -223 1251 -278 z',\n        },\n        ornamentPrecompTrillLowerSuffix: {\n            x_min: 0,\n            x_max: 833,\n            y_min: -309,\n            y_max: 319,\n            ha: 628,\n            o: 'm 778 -444 b 801 -445 785 -444 793 -445 b 1037 -338 894 -445 969 -397 b 1200 37 1149 -240 1200 -109 b 1084 406 1200 171 1172 300 b 1024 444 1064 431 1043 444 b 960 390 999 444 978 426 b 841 163 923 314 886 236 b 812 128 832 150 827 128 b 786 167 796 130 793 153 b 660 418 744 251 716 341 b 599 459 639 445 619 459 b 541 410 577 459 557 444 b 439 197 507 340 474 269 b 422 179 435 190 435 179 b 338 393 392 251 379 328 b 275 439 320 423 298 439 b 212 396 253 439 230 425 b 71 219 170 333 128 268 b 0 45 17 173 16 112 b 68 98 32 62 50 78 b 194 264 112 150 153 209 b 230 292 209 282 219 292 b 264 261 240 292 251 282 b 274 242 268 255 269 248 b 346 46 304 179 325 112 b 376 10 351 32 354 10 b 412 35 392 10 403 22 b 452 107 429 56 441 82 b 541 291 481 168 511 230 b 556 307 547 302 552 307 b 573 295 562 307 567 302 b 624 217 595 272 611 246 b 721 1 657 145 685 72 b 755 -27 732 -19 742 -27 b 786 -16 765 -27 775 -24 b 857 73 819 7 840 39 b 952 256 887 134 920 194 b 978 289 963 279 969 289 b 1009 262 985 289 994 281 b 1030 235 1017 253 1024 245 b 1110 -4 1071 161 1099 81 b 1116 -68 1113 -26 1116 -48 b 1009 -243 1116 -140 1090 -200 b 848 -291 956 -272 901 -291 b 730 -261 809 -291 770 -282 b 696 -248 714 -252 703 -248 b 671 -284 684 -248 678 -258 l 662 -312 b 657 -357 658 -330 657 -344 b 744 -439 657 -403 683 -425 z',\n        },\n        brassScoop: {\n            x_min: -0.4444444444444445,\n            x_max: 312,\n            y_min: -390,\n            y_max: 28,\n            ha: 418,\n            o: 'm 0 -562 b 393 -256 171 -504 307 -412 b 449 -39 431 -189 449 -115 b 448 -1 449 -26 449 -14 b 433 40 446 14 448 40 b 408 -3 410 40 412 14 b 396 -66 403 -23 402 -46 b 45 -397 346 -243 209 -337 b 0 -451 13 -409 1 -423 b 0 -562 -1 -485 0 -520 z',\n        },\n        brassDoitMedium: {\n            x_min: -0.32815253965710617,\n            x_max: 476.21251177608565,\n            y_min: -50,\n            y_max: 333.1535583875376,\n            ha: 383.1535583875376,\n            o: 'm 16 -72 b 27 -71 19 -72 23 -72 b 215 -33 89 -56 153 -48 b 521 114 327 -7 435 35 b 685 432 615 199 691 295 b 670 480 684 449 688 475 b 642 441 654 482 648 456 b 403 183 599 321 513 240 b 79 89 301 130 192 105 b 0 -1 -12 76 0 76 b 0 -50 0 -17 1 -33 b 16 -72 0 -65 3 -72 z',\n        },\n        brassFallLipShort: {\n            x_min: 0,\n            x_max: 298,\n            y_min: -344,\n            y_max: 65,\n            ha: 409,\n            o: 'm 396 -495 b 420 -461 412 -487 418 -474 b 429 -382 428 -435 429 -409 b 426 -330 429 -364 428 -347 b 285 -6 410 -209 356 -104 b 98 94 239 59 173 94 b 39 86 79 94 58 92 b 0 49 20 81 0 73 l 0 -52 b 10 -69 0 -62 1 -69 b 20 -68 13 -69 16 -69 b 88 -56 45 -59 66 -56 b 261 -160 156 -56 213 -95 b 396 -495 333 -259 382 -369 z',\n        },\n        brassLiftMedium: {\n            x_min: 0,\n            x_max: 807,\n            y_min: 0,\n            y_max: 838,\n            ha: 838,\n            o: 'm 50 0 b 55 1 52 0 53 0 b 58 23 65 7 59 16 b 55 58 56 36 55 48 b 130 117 55 99 75 112 b 220 213 202 121 220 141 b 315 308 220 289 238 308 l 336 308 b 408 380 393 310 406 321 b 461 452 409 438 416 452 b 485 451 468 452 477 451 b 569 510 531 448 556 464 b 573 543 572 520 572 531 b 657 619 580 605 595 618 b 698 621 670 619 684 619 b 788 700 749 625 778 649 b 798 778 792 726 793 752 b 873 857 806 841 809 845 b 985 950 927 867 973 887 b 1084 1047 1002 1035 1004 1034 b 1162 1128 1133 1056 1162 1087 b 1146 1182 1162 1145 1158 1164 b 1125 1207 1140 1191 1136 1207 l 1122 1207 b 1110 1191 1113 1205 1110 1198 b 1112 1174 1110 1185 1112 1178 b 1048 1110 1109 1126 1096 1113 b 1028 1109 1043 1110 1035 1109 b 939 1022 969 1102 948 1081 b 845 922 929 949 917 936 b 746 812 773 909 753 886 b 744 780 744 802 744 791 b 635 681 737 700 717 683 b 524 583 553 680 536 665 b 439 510 514 520 503 510 b 357 431 377 510 360 492 l 357 406 b 314 364 356 379 343 364 b 238 361 288 364 264 364 b 173 300 202 357 180 334 b 167 245 168 281 167 262 b 105 174 166 192 157 180 b 75 171 95 173 85 171 b 6 112 30 166 14 153 b 0 73 1 98 0 85 b 37 10 0 45 13 26 b 50 0 42 7 46 0 z',\n        },\n        brassFallRoughMedium: {\n            x_min: 0,\n            x_max: 791,\n            y_min: 0,\n            y_max: 819,\n            ha: 819,\n            o: 'm 1117 0 b 1139 101 1129 26 1139 71 b 1138 121 1139 109 1139 115 b 1084 193 1125 171 1110 193 b 1044 183 1073 193 1060 189 b 1022 177 1035 179 1028 177 b 1007 209 1012 177 1008 186 b 876 324 1004 292 959 330 b 799 317 850 321 825 320 b 759 354 772 314 755 320 b 760 373 760 360 760 366 b 759 392 760 379 760 384 b 681 477 753 451 730 477 b 654 474 672 477 664 475 b 606 467 638 471 622 468 b 586 465 599 465 592 465 b 564 481 570 465 564 469 b 569 505 564 487 566 495 b 575 553 572 521 575 537 b 572 585 575 564 573 575 b 481 665 560 657 539 668 b 412 665 458 664 435 665 b 382 690 392 667 382 672 b 383 700 382 693 383 696 b 386 773 387 724 387 749 b 297 858 382 828 351 857 b 229 861 274 858 251 858 b 190 897 207 863 193 871 b 163 1012 186 936 180 976 b 79 1084 145 1050 124 1084 b 66 1083 75 1084 71 1083 b 43 1096 49 1081 43 1087 b 48 1112 43 1100 45 1106 b 53 1130 52 1119 53 1125 b 39 1169 53 1145 45 1158 b 26 1179 36 1175 30 1179 b 16 1171 22 1179 17 1176 b 0 1103 10 1149 0 1126 b 9 1067 0 1092 1 1079 b 91 1021 26 1031 52 1018 b 145 978 122 1024 141 1011 b 156 913 147 956 151 935 b 291 795 170 831 210 795 b 346 768 337 795 346 796 b 344 743 346 760 344 753 b 343 716 344 733 343 724 b 455 600 343 651 390 602 b 505 605 471 599 490 605 b 528 598 514 605 523 603 b 536 579 534 592 536 586 b 524 523 536 562 526 541 b 523 505 524 517 523 511 b 621 405 523 442 560 405 b 639 406 626 405 634 406 b 677 413 652 408 664 410 b 701 416 687 415 696 416 b 721 392 716 416 721 410 b 720 373 721 386 720 380 b 831 255 714 301 759 252 b 897 261 854 255 876 261 b 926 262 909 261 919 262 b 969 197 963 262 965 252 b 971 184 969 193 971 189 b 1031 115 979 137 998 115 b 1071 122 1043 115 1056 118 b 1096 130 1079 125 1086 127 b 1087 59 1094 107 1087 82 b 1117 0 1087 37 1094 17 z',\n        },\n        brassBend: {\n            x_min: 0,\n            x_max: 381,\n            y_min: 0,\n            y_max: 367,\n            ha: 367,\n            o: 'm 298 0 b 472 50 359 0 418 14 b 537 135 501 71 530 92 b 543 216 543 163 543 190 l 543 266 b 544 308 543 281 543 295 b 549 433 546 354 549 395 b 543 507 549 459 547 482 b 533 528 541 516 544 528 b 511 508 524 528 514 520 b 508 478 510 498 508 488 b 504 318 507 425 504 372 b 505 264 504 300 505 282 b 446 181 505 220 484 199 b 294 150 396 160 344 150 b 92 194 226 150 158 167 b 45 269 62 207 45 230 b 46 359 46 300 46 328 b 37 497 46 405 45 451 b 27 523 36 507 37 523 b 4 498 14 524 6 513 b 3 481 3 492 3 487 b 0 409 1 456 0 433 b 4 228 0 348 4 288 b 3 177 4 210 4 194 b 68 53 1 125 20 84 b 200 10 108 27 154 17 b 298 0 233 4 266 0 z',\n        },\n        brassMuteClosed: {\n            x_min: 0,\n            x_max: 274,\n            y_min: 0,\n            y_max: 260,\n            ha: 260,\n            o: 'm 203 0 b 209 1 206 0 207 0 b 216 13 215 4 216 9 l 215 27 l 215 153 b 216 161 216 156 216 158 b 372 164 268 163 318 164 b 395 184 383 164 395 166 l 395 189 b 357 229 392 209 386 229 b 219 228 311 229 265 228 l 223 310 b 209 357 225 328 219 344 b 189 374 203 364 197 374 b 184 373 187 374 186 373 b 177 359 179 372 177 366 l 177 348 l 173 222 l 39 222 b 0 206 12 222 0 219 b 10 174 0 199 3 189 b 46 157 19 157 30 157 b 108 160 68 158 88 160 b 171 161 130 161 150 161 l 167 58 b 184 16 167 40 171 26 b 203 0 192 12 196 0 z',\n        },\n        brassMuteOpen: {\n            x_min: 1,\n            x_max: 313.01193341111656,\n            y_min: 0,\n            y_max: 309,\n            ha: 309,\n            o: 'm 265 0 b 451 189 363 7 452 88 l 451 215 b 348 383 441 285 405 343 b 209 445 288 426 248 445 b 84 379 168 445 132 420 b 69 364 79 373 73 369 b 1 213 30 323 1 275 b 230 0 1 88 94 0 z m 210 62 b 128 73 181 62 154 66 b 40 171 71 91 42 125 b 52 226 40 187 45 206 b 197 374 79 295 130 344 b 228 382 207 380 217 382 b 300 361 252 382 276 370 b 374 308 328 350 353 331 b 410 223 397 284 410 253 b 393 163 410 202 405 181 b 210 62 354 91 288 63 z',\n        },\n        brassFlip: {\n            x_min: 0,\n            x_max: 402,\n            y_min: 0,\n            y_max: 361,\n            ha: 361,\n            o: 'm 579 0 b 511 153 579 68 557 117 b 52 504 359 271 206 387 b 29 520 45 510 39 520 b 20 517 26 520 23 518 b 0 477 3 510 0 494 l 0 125 b 17 20 1 92 1 56 b 40 84 37 40 40 60 b 42 287 40 151 42 219 l 42 363 z',\n        },\n        brassJazzTurn: {\n            x_min: 0,\n            x_max: 646,\n            y_min: 0,\n            y_max: 212,\n            ha: 212,\n            o: 'm 310 0 b 367 33 327 0 344 10 b 389 55 374 40 382 49 b 490 145 423 85 456 114 b 507 154 495 151 501 154 b 524 144 513 154 517 151 b 598 72 547 120 575 98 b 700 24 625 42 662 24 b 765 43 721 24 744 30 b 893 147 812 72 855 105 b 930 212 910 166 923 186 b 912 215 923 213 917 215 b 871 199 896 215 883 209 b 812 153 852 183 832 167 b 789 144 805 148 796 144 b 773 156 782 144 776 147 b 691 251 757 199 720 222 b 603 301 658 282 631 301 b 527 258 580 301 556 288 b 420 156 494 222 455 190 b 399 143 412 147 405 143 b 377 157 392 143 386 147 b 259 282 340 200 300 242 b 219 305 245 298 232 305 b 177 279 204 305 192 297 b 55 127 137 228 95 177 b 0 52 36 104 20 79 b 14 50 6 50 10 50 b 53 66 32 50 45 58 b 115 131 75 88 98 108 b 135 148 124 143 130 148 b 157 132 141 148 148 143 b 252 33 186 96 219 65 b 310 0 275 12 292 0 z',\n        },\n        brassSmear: {\n            x_min: 0,\n            x_max: 334,\n            y_min: 0,\n            y_max: 151,\n            ha: 151,\n            o: 'm 321 0 b 475 125 390 0 436 43 b 481 143 478 131 481 137 b 475 154 481 147 480 151 b 449 148 468 158 458 154 b 395 132 432 137 413 132 b 343 140 377 132 360 137 b 229 194 301 148 266 173 b 168 217 206 209 186 217 b 109 192 148 217 130 209 b 0 26 59 148 32 89 b 59 63 32 29 45 48 b 98 84 72 78 84 84 b 130 73 108 84 118 81 b 213 26 157 58 183 37 b 321 0 255 9 289 0 z',\n        },\n        stringsDownBow: {\n            x_min: 0,\n            x_max: 306,\n            y_min: -0.09607201951262866,\n            y_max: 366,\n            ha: 366.09607201951263,\n            o: 'm 405 0 b 425 17 413 -1 420 9 b 439 66 435 32 439 48 b 441 268 439 137 441 202 b 436 412 441 314 439 361 l 435 413 b 423 469 435 436 431 456 b 344 508 406 501 373 501 b 204 527 298 520 251 527 b 60 498 156 527 108 518 b 7 438 32 485 10 468 l 7 426 b 4 337 7 396 7 367 b 0 140 0 272 0 206 b 1 42 0 107 0 73 b 13 3 1 27 -3 4 b 40 39 29 3 35 24 b 42 53 42 43 40 49 b 49 141 48 84 49 112 b 48 215 49 167 48 192 b 49 252 48 228 48 240 l 49 312 b 130 343 72 331 99 340 b 206 347 156 346 180 347 b 372 314 262 347 318 338 l 390 307 l 390 245 b 390 138 392 212 390 176 b 397 23 390 101 392 62 b 405 0 399 14 393 1 z',\n        },\n        stringsUpBow: {\n            x_min: 0,\n            x_max: 219.2842808242076,\n            y_min: 0,\n            y_max: 489,\n            ha: 489,\n            o: 'm 151 0 b 184 42 170 12 180 26 b 297 554 223 212 261 382 b 315 690 305 598 318 645 b 304 704 315 697 311 704 b 276 670 288 704 282 697 b 157 131 236 490 196 311 l 157 144 b 73 526 134 276 104 396 b 30 677 60 576 52 638 b 13 694 26 684 22 694 b 0 674 9 694 0 691 l 0 671 b 10 603 3 649 6 626 b 105 174 42 461 72 317 b 150 0 117 117 128 58 z',\n        },\n        stringsHarmonic: {\n            x_min: 0,\n            x_max: 191,\n            y_min: 0,\n            y_max: 202,\n            ha: 202,\n            o: 'm 143 0 b 275 122 217 0 275 53 b 127 291 275 206 202 291 b 0 154 63 291 0 222 b 143 0 0 76 71 0 z m 122 68 b 43 105 89 66 59 75 b 39 124 40 111 39 117 b 79 199 39 148 56 180 b 145 226 101 216 122 226 b 199 210 163 226 180 220 b 235 150 223 196 235 173 b 203 92 235 128 225 107 b 122 68 181 76 150 68 z',\n        },\n        pluckedSnapPizzicatoAbove: {\n            x_min: 0,\n            x_max: 201,\n            y_min: 0,\n            y_max: 325,\n            ha: 325,\n            o: 'm 171 0 b 289 99 240 0 289 45 b 258 183 289 130 274 156 b 174 269 236 217 203 240 l 174 408 b 174 429 174 415 176 422 b 131 468 168 451 153 468 b 117 451 120 468 117 461 b 118 429 117 444 118 435 b 115 307 117 389 115 347 b 0 166 59 295 0 223 b 171 0 0 85 89 0 z m 134 55 b 52 131 84 55 52 85 b 115 233 52 179 81 209 b 114 192 114 220 114 206 b 174 120 114 137 114 137 l 174 228 b 233 148 200 207 223 183 b 236 130 235 143 236 135 b 197 72 236 105 223 85 b 134 55 177 60 157 55 z',\n        },\n        pluckedSnapPizzicatoBelow: {\n            x_min: 0,\n            x_max: 211,\n            y_min: 0,\n            y_max: 307,\n            ha: 307,\n            o: 'm 145 7 b 163 0 153 3 158 0 b 173 23 170 0 173 7 l 173 140 l 170 140 l 170 163 l 171 163 b 206 170 179 164 193 166 b 304 287 264 186 304 233 b 281 354 304 308 297 333 b 118 442 240 412 186 439 b 0 324 69 442 0 370 b 115 176 0 266 55 202 l 115 56 b 145 7 114 33 125 19 z m 115 220 b 62 256 92 223 73 230 b 53 292 56 269 53 281 b 78 344 53 311 60 328 b 168 384 105 372 135 384 b 213 376 183 384 199 382 b 253 321 239 366 253 346 b 246 291 253 311 251 301 b 170 226 230 256 203 236 l 170 258 b 148 305 171 278 163 292 b 128 315 143 310 135 315 l 124 315 b 115 301 117 314 115 308 z',\n        },\n        pluckedLeftHandPizzicato: {\n            x_min: 0,\n            x_max: 271,\n            y_min: 0,\n            y_max: 284,\n            ha: 284,\n            o: 'm 213 0 b 223 14 222 0 223 7 b 222 35 223 22 222 29 l 222 176 b 373 170 272 174 323 170 b 390 180 382 170 390 171 l 390 184 b 347 232 386 207 382 232 b 219 238 307 233 266 235 l 219 364 b 171 409 219 395 193 409 b 156 393 160 409 156 402 b 158 370 156 384 158 376 l 158 240 b 16 239 115 240 66 239 b 0 226 7 239 0 238 l 0 223 b 50 179 1 203 29 179 b 158 177 86 179 122 179 l 158 63 b 161 29 158 52 158 40 b 213 0 166 -1 194 1 z',\n        },\n        keyboardPedalPed: {\n            x_min: 0,\n            x_max: 944,\n            y_min: -13,\n            y_max: 550,\n            ha: 563,\n            o: 'm 22 0 b 109 78 53 0 105 46 l 144 333 b 163 376 147 347 140 372 b 364 465 238 390 301 426 b 454 599 416 497 454 540 b 452 618 454 605 454 612 b 320 770 442 694 396 747 b 248 779 295 778 272 779 b 193 778 229 779 212 779 b 160 780 181 778 167 775 b 137 792 153 789 144 791 b 109 789 128 792 118 789 b 7 719 59 789 48 737 b 23 708 16 714 20 708 b 36 710 29 710 33 710 b 53 684 52 710 53 698 l 53 674 b 43 386 53 577 53 482 b 20 164 36 312 30 238 b 1 30 14 120 7 75 b 0 19 0 26 0 22 b 22 0 0 9 4 0 z m 171 425 b 156 442 160 425 156 429 b 157 475 157 452 157 464 b 164 602 161 517 164 560 b 161 698 164 635 163 667 b 184 729 161 720 167 729 l 193 729 b 348 563 278 719 348 641 b 346 539 348 554 347 547 b 171 425 328 459 229 422 z m 979 6 b 1008 13 986 6 995 9 b 1081 101 1047 29 1079 46 b 1116 449 1087 217 1104 333 b 1143 654 1123 518 1133 586 b 1148 685 1145 664 1148 675 b 1140 704 1148 693 1146 700 b 1107 716 1130 713 1119 716 b 1056 706 1092 716 1073 710 b 1037 671 1035 703 1038 685 b 1004 439 1025 595 1014 517 b 986 419 1001 428 999 419 b 979 419 985 419 982 420 b 935 426 965 423 949 425 b 795 376 884 426 838 405 b 664 153 714 323 664 249 b 665 130 664 145 665 138 b 753 29 671 65 704 29 b 815 40 773 29 792 33 b 975 147 873 65 923 101 b 965 45 971 108 968 76 b 979 6 963 17 966 6 z m 393 -17 b 634 145 494 16 579 52 b 638 160 636 151 638 156 b 625 168 638 166 634 168 b 621 167 624 168 622 168 b 524 118 582 164 544 160 b 495 79 517 104 505 92 b 435 33 471 49 452 33 b 380 96 416 33 397 55 b 369 145 373 114 369 131 b 442 225 369 186 395 213 b 468 232 451 228 459 229 b 654 344 539 255 606 285 b 677 395 667 360 677 376 b 672 415 677 402 675 408 b 612 459 661 442 639 455 b 589 461 602 461 592 461 b 348 328 500 461 409 408 b 269 120 302 268 269 199 b 379 -19 269 45 318 -19 b 393 -17 383 -19 389 -19 z m 395 240 b 494 383 418 300 452 344 l 521 405 b 544 419 528 409 536 418 b 554 415 547 419 550 418 b 570 383 564 406 570 396 l 570 379 b 552 331 570 360 562 344 b 395 240 511 285 462 253 z m 827 89 b 792 111 815 89 804 96 b 766 204 775 131 766 158 b 845 360 772 256 799 314 b 871 372 854 369 863 372 b 897 366 880 372 888 369 b 978 279 942 353 963 320 b 976 259 981 272 981 265 b 858 104 942 203 909 147 b 827 89 847 94 837 89 z m 1282 12 b 1336 35 1303 14 1320 23 b 1359 71 1351 45 1359 58 b 1338 102 1359 82 1352 95 b 1254 130 1312 118 1284 130 b 1187 88 1223 130 1202 109 b 1178 65 1182 81 1178 72 b 1195 37 1178 55 1182 45 b 1282 12 1223 23 1253 19 z',\n        },\n        keyboardPedalUp: {\n            x_min: 0,\n            x_max: 436.6015132318337,\n            y_min: 0,\n            y_max: 461,\n            ha: 461,\n            o: 'm 330 0 b 334 1 331 0 333 0 b 340 12 338 4 340 7 l 338 26 b 340 264 338 105 338 184 b 526 95 400 206 461 148 b 559 71 536 88 547 71 b 564 72 560 71 563 71 b 580 121 580 79 580 102 l 580 127 b 543 203 585 158 573 184 b 472 259 518 219 495 238 l 445 285 b 590 292 494 288 541 291 b 622 318 609 294 618 302 b 628 359 625 331 626 346 b 586 402 632 393 621 405 b 464 395 546 399 504 396 l 559 491 b 567 524 567 500 567 510 b 564 543 567 527 567 536 b 539 596 559 563 560 590 b 494 564 521 600 508 577 b 340 413 442 514 390 464 l 340 560 b 287 664 340 600 321 632 b 271 518 274 612 272 566 b 268 445 269 494 269 469 b 117 569 219 488 168 530 b 96 579 109 575 102 579 b 85 560 89 579 85 573 b 124 446 85 518 82 477 b 209 380 153 426 181 403 b 45 374 154 377 99 376 b 0 324 9 374 0 359 b 63 266 0 265 1 265 b 144 272 89 269 117 272 l 196 272 b 108 193 167 246 138 219 b 60 135 76 164 60 151 b 99 73 60 121 73 105 b 104 68 101 72 102 71 b 114 58 107 60 111 58 b 130 66 120 58 124 62 b 259 186 173 107 217 145 b 256 117 259 163 256 140 b 311 13 256 72 271 37 b 330 0 317 10 323 0 z',\n        },\n        pictChokeCymbal: {\n            x_min: 1,\n            x_max: 147,\n            y_min: 0,\n            y_max: 242,\n            ha: 242,\n            o: 'm 79 4 b 207 158 153 32 192 88 b 212 200 210 173 212 187 b 143 336 212 253 187 298 b 98 348 131 344 115 348 b 4 295 60 348 16 327 b 1 276 1 289 1 282 b 9 249 1 266 3 258 b 121 183 35 206 72 183 b 156 186 132 183 144 183 b 26 53 134 115 91 73 b 7 39 13 49 7 45 b 19 20 7 33 12 27 b 59 0 30 9 43 0 b 79 4 65 0 72 1 z',\n        },\n        wiggleArpeggiatoUp: {\n            x_min: -22,\n            x_max: 300,\n            y_min: 0,\n            y_max: 176,\n            ha: 176,\n            o: 'm 173 4 b 196 0 180 1 189 0 b 246 26 215 0 230 9 b 301 117 271 53 285 85 b 312 131 305 125 307 131 b 327 124 315 131 321 128 b 373 86 341 112 353 101 b 412 69 389 75 402 69 b 432 94 425 69 432 79 b 373 181 432 117 413 154 b 235 252 323 216 285 245 b 220 253 229 253 225 253 b 168 215 196 253 181 240 b 111 112 151 180 140 141 b 94 102 105 105 99 102 b 78 111 89 102 84 105 b 0 181 55 135 35 160 b -32 153 -20 194 -32 168 b 0 86 -32 124 -32 109 b 94 36 22 71 73 46 b 173 4 134 16 131 17 z',\n        },\n        arpeggiatoUp: {\n            x_min: 0,\n            x_max: 262,\n            y_min: 0,\n            y_max: 1459,\n            ha: 1459,\n            o: 'm 190 0 b 160 63 187 29 170 45 b 145 108 150 81 145 95 b 183 163 145 128 157 145 b 300 246 222 190 262 216 b 347 318 333 272 347 295 b 301 393 347 341 331 364 b 258 413 289 403 272 408 b 145 449 220 425 183 436 b 117 464 135 452 120 452 b 140 491 115 477 128 484 b 294 593 192 526 243 557 b 330 647 318 611 330 626 b 314 693 330 660 324 675 b 262 736 302 714 285 729 b 170 763 230 744 200 753 b 122 783 153 768 125 768 b 160 831 120 804 143 818 b 288 922 202 861 246 890 b 333 999 318 945 333 972 b 266 1083 333 1032 310 1064 b 189 1115 240 1094 215 1103 b 122 1178 145 1133 122 1153 b 168 1250 122 1200 138 1223 l 180 1257 b 269 1333 210 1283 240 1306 b 305 1405 294 1356 305 1381 b 284 1469 305 1426 298 1447 b 228 1525 269 1492 251 1511 b 183 1600 197 1545 183 1571 b 190 1640 183 1613 184 1626 b 197 1670 193 1650 194 1660 b 272 1735 213 1719 230 1735 b 295 1734 279 1735 287 1735 b 323 1732 305 1732 314 1732 b 350 1731 333 1732 341 1732 b 377 1742 369 1729 377 1732 b 370 1761 377 1747 374 1754 l 301 1898 b 217 2066 274 1954 248 2012 b 186 2101 204 2089 196 2101 b 154 2069 177 2101 167 2091 b 12 1824 105 1987 59 1907 b 0 1787 4 1810 0 1797 b 59 1744 0 1761 20 1745 b 160 1738 92 1744 125 1740 b 145 1692 156 1721 151 1706 b 135 1633 138 1672 135 1652 b 184 1518 135 1591 151 1552 b 229 1475 199 1503 213 1488 b 259 1431 249 1456 259 1444 b 229 1388 259 1420 249 1407 b 151 1325 203 1365 177 1345 b 105 1279 134 1310 118 1296 b 73 1202 84 1251 73 1227 b 108 1123 73 1176 85 1152 b 255 1031 148 1077 199 1051 b 282 1014 274 1025 282 1021 b 262 991 282 1008 275 1001 b 151 914 226 963 189 939 b 79 851 125 896 99 877 b 63 809 69 837 63 824 b 79 769 63 796 68 783 b 202 697 111 729 154 710 b 266 670 225 690 266 688 b 210 622 266 648 232 635 b 82 534 167 593 120 570 b 55 491 63 518 55 505 b 79 448 55 478 63 465 b 255 361 127 395 192 380 b 288 343 269 359 288 357 b 266 312 288 331 275 320 b 144 223 229 278 184 253 b 85 134 104 193 85 166 b 118 53 85 111 96 85 b 190 0 135 29 160 14 z',\n        },\n        arpeggiatoDown: {\n            x_min: 0,\n            x_max: 218,\n            y_min: 0,\n            y_max: 1440,\n            ha: 1440,\n            o: 'm 161 16 b 310 261 210 98 259 180 b 314 275 312 266 314 271 b 302 295 314 282 310 289 b 252 311 287 308 269 311 b 217 310 240 311 229 310 b 190 333 202 310 194 315 b 151 412 186 363 171 389 b 102 501 120 452 102 477 b 150 588 102 524 118 547 b 161 603 154 592 158 598 b 181 661 176 622 181 641 b 173 704 181 675 179 690 b 86 795 156 746 121 770 b 53 829 63 811 53 819 b 78 868 53 840 62 851 b 102 888 85 876 94 883 b 180 956 128 912 156 933 b 216 1028 204 979 216 1002 b 203 1081 216 1044 212 1061 b 115 1171 186 1123 148 1145 b 75 1221 88 1191 75 1207 b 114 1272 75 1237 88 1251 b 173 1308 132 1284 154 1296 b 226 1339 190 1318 209 1328 b 265 1405 253 1359 265 1380 b 258 1447 265 1418 264 1431 b 154 1541 242 1499 199 1521 b 109 1581 124 1555 109 1567 b 141 1627 109 1594 121 1608 b 204 1680 163 1646 184 1662 b 233 1742 223 1699 233 1719 b 226 1777 233 1752 230 1764 b 135 1862 210 1822 173 1840 b 104 1895 114 1875 104 1884 b 118 1930 104 1904 109 1914 b 192 2006 135 1961 161 1986 b 206 2029 203 2013 206 2022 b 192 2064 206 2040 197 2052 b 180 2074 187 2071 184 2074 b 156 2061 171 2074 163 2065 b 84 1983 125 2040 102 2013 b 65 1921 71 1961 65 1941 b 88 1853 65 1899 72 1876 b 171 1784 108 1820 138 1801 b 190 1764 184 1777 190 1770 b 174 1741 190 1757 184 1750 b 107 1683 153 1722 128 1704 b 68 1610 81 1659 68 1636 b 88 1548 68 1591 75 1571 b 177 1470 109 1512 141 1489 b 223 1431 209 1453 223 1443 b 179 1390 223 1420 209 1408 b 128 1361 163 1380 145 1371 b 71 1322 108 1348 88 1338 b 32 1253 45 1300 32 1277 b 48 1198 32 1236 37 1218 b 147 1090 71 1152 108 1120 b 174 1057 166 1076 174 1067 b 153 1022 174 1047 167 1037 b 109 982 140 1008 124 995 b 37 919 85 962 59 942 b 9 860 17 899 9 880 b 26 806 9 844 14 827 b 120 717 50 769 84 740 b 138 691 132 708 138 700 b 130 668 138 684 135 677 b 92 618 118 651 105 635 b 59 531 71 589 59 560 b 84 455 59 507 68 481 b 132 386 98 431 115 408 b 148 341 144 372 148 357 b 144 317 148 333 147 324 b 121 305 140 307 131 305 l 98 305 b 82 304 94 304 88 304 l 32 304 b 0 292 10 304 0 302 b 12 266 0 287 4 279 b 60 164 32 233 46 199 b 127 20 84 117 105 68 b 144 0 132 9 137 0 b 161 16 150 0 154 4 z',\n        },\n        repeat1Bar: {\n            x_min: 0,\n            x_max: 599.1057280164835,\n            y_min: -250,\n            y_max: 175,\n            ha: 425,\n            o: 'm 216 98 b 255 75 236 84 246 75 b 291 104 265 75 274 85 b 323 147 304 117 327 125 b 289 215 323 168 314 184 b 238 252 269 239 253 252 b 187 222 222 252 207 242 b 173 206 183 216 177 212 b 157 170 163 194 157 183 b 174 138 157 160 161 150 b 216 98 189 127 200 109 z m 76 -334 b 181 -285 111 -315 148 -302 b 831 52 396 -168 613 -58 b 863 114 855 63 864 82 b 828 202 855 140 855 176 b 808 213 821 209 815 213 b 793 209 804 213 799 212 l 422 19 b 26 -179 291 -48 164 -124 b 0 -213 10 -186 0 -196 b 3 -232 0 -219 0 -225 b 52 -325 14 -265 37 -294 b 66 -337 55 -331 59 -337 b 76 -334 69 -337 72 -336 z m 769 -360 b 829 -264 779 -360 829 -284 b 769 -176 822 -232 799 -200 b 742 -163 760 -167 750 -163 b 716 -184 733 -163 723 -168 b 683 -228 708 -202 693 -213 b 672 -253 675 -236 672 -245 b 683 -281 672 -262 675 -271 b 752 -353 703 -308 732 -327 b 769 -360 756 -357 763 -360 z',\n        },\n        repeat2Bars: {\n            x_min: 0.008571918423331715,\n            x_max: 775,\n            y_min: -246.92374029115243,\n            y_max: 362.82068246705313,\n            ha: 609.7444227582056,\n            o: 'm 909 412 b 873 351 906 384 893 367 b 436 50 729 249 585 147 l 91 -179 b 62 -174 76 -189 68 -183 b 12 -96 48 -147 24 -125 b 36 -16 -7 -53 -6 -43 b 220 104 96 24 158 65 b 819 507 425 232 624 369 b 881 495 852 530 861 528 b 909 412 899 469 900 439 z m 333 338 b 302 240 330 307 317 274 b 276 235 297 225 287 228 l 233 269 b 203 376 186 307 183 318 b 225 441 212 397 217 419 b 246 454 228 452 232 458 b 333 338 284 441 333 380 z m 1116 228 b 1067 158 1115 192 1092 174 b 910 59 1015 125 963 92 b 478 -240 762 -33 622 -140 b 311 -350 423 -279 366 -314 b 285 -344 298 -360 289 -356 b 239 -258 272 -314 251 -288 b 261 -196 228 -228 235 -210 b 517 -29 348 -144 436 -91 b 1030 321 681 98 861 202 b 1093 307 1060 343 1076 340 b 1116 228 1107 281 1109 252 z m 1070 -105 b 1020 -210 1057 -143 1038 -176 b 998 -210 1014 -219 1004 -215 l 924 -153 b 913 -88 899 -135 897 -112 b 949 -22 926 -66 939 -45 b 998 -7 960 6 976 9 b 1070 -105 1032 -32 1058 -63 z',\n        },\n        repeat4Bars: {\n            x_min: 0,\n            x_max: 1374,\n            y_min: -304,\n            y_max: 304,\n            ha: 608,\n            o: 'm 78 -266 b 92 -258 82 -266 88 -264 b 114 -240 98 -251 107 -246 b 638 107 289 -125 467 -14 b 873 271 716 161 793 216 b 907 337 894 285 906 305 b 887 400 901 354 897 379 b 852 438 877 426 867 438 b 814 420 842 438 829 432 b 135 -33 592 262 366 111 b 12 -121 92 -60 48 -84 b 0 -144 4 -128 0 -135 b 4 -160 0 -148 1 -154 b 63 -255 17 -196 45 -223 b 78 -266 68 -262 72 -266 z m 291 148 b 325 223 302 148 308 170 b 333 256 328 235 330 246 b 264 363 330 305 298 336 b 242 373 255 369 248 373 b 220 347 232 373 225 364 b 202 288 216 327 213 305 b 190 252 193 275 190 262 b 222 200 190 232 202 215 b 291 148 264 170 279 148 z m 815 -367 b 829 -359 819 -367 824 -364 b 851 -343 835 -353 844 -347 b 1375 6 1027 -228 1205 -117 l 1610 170 b 1644 235 1632 184 1643 203 b 1626 300 1639 253 1634 276 b 1590 337 1614 325 1604 337 b 1551 320 1580 337 1567 330 b 873 -135 1329 161 1103 10 b 749 -222 829 -161 785 -184 b 737 -245 742 -230 737 -238 b 742 -261 737 -249 739 -255 b 802 -357 755 -297 782 -325 b 815 -367 805 -363 809 -367 z m 396 -360 b 408 -356 400 -360 403 -359 b 609 -223 471 -307 543 -269 b 896 -19 706 -156 795 -81 b 1164 154 985 37 1074 96 b 1214 223 1189 170 1211 187 b 1176 321 1204 253 1205 292 b 1159 330 1169 327 1165 330 b 1145 324 1155 330 1151 328 b 1048 258 1113 302 1081 278 b 357 -202 809 117 598 -65 b 333 -238 341 -212 333 -223 b 338 -262 333 -245 334 -253 b 384 -350 350 -294 372 -318 b 396 -360 386 -354 390 -360 z m 1162 -438 b 1174 -433 1166 -438 1169 -436 b 1374 -300 1237 -384 1309 -346 b 1660 -96 1470 -233 1561 -158 b 1930 76 1751 -39 1840 19 b 1979 147 1954 92 1977 109 b 1943 243 1968 177 1971 216 b 1924 253 1935 251 1930 253 b 1911 248 1920 253 1915 252 b 1814 181 1878 225 1848 202 b 1123 -279 1575 40 1364 -141 b 1099 -315 1106 -289 1099 -300 b 1103 -338 1099 -321 1100 -330 b 1149 -426 1115 -370 1138 -396 b 1162 -438 1151 -432 1156 -438 z m 1875 -295 b 1882 -291 1878 -295 1879 -294 b 1934 -189 1904 -258 1921 -223 b 1872 -96 1925 -147 1901 -120 b 1840 -78 1858 -84 1848 -78 b 1812 -109 1830 -78 1823 -88 l 1777 -173 b 1770 -199 1773 -181 1770 -190 b 1786 -230 1770 -210 1774 -220 b 1862 -289 1809 -253 1837 -269 b 1875 -295 1865 -292 1871 -295 z',\n        },\n        repeatBarSlash: {\n            x_min: 0,\n            x_max: 630,\n            y_min: -225.19160170741762,\n            y_max: 265.12618221237005,\n            ha: 490.31778391978764,\n            o: 'm 78 -324 b 92 -314 82 -325 88 -321 b 114 -298 96 -307 107 -302 b 638 49 289 -183 467 -72 b 873 215 716 104 792 161 b 907 279 894 229 906 248 b 887 344 901 298 897 321 b 852 382 877 369 867 380 b 814 363 842 383 829 376 b 135 -91 603 192 364 55 b 12 -177 92 -118 45 -137 b 0 -202 4 -186 0 -192 b 4 -217 0 -206 1 -212 b 63 -312 17 -253 42 -284 b 78 -324 68 -318 72 -323 z',\n        },\n        csymDiminished: {\n            x_min: 0,\n            x_max: 506,\n            y_min: -0.011036179317259481,\n            y_max: 500,\n            ha: 500.0110361793173,\n            o: 'm 397 0 b 729 265 576 -1 729 95 b 711 367 729 297 723 331 b 472 670 668 498 586 595 b 315 720 423 701 372 720 b 253 713 295 720 275 719 b 32 514 144 687 75 615 b 0 374 12 468 0 420 b 27 251 0 333 9 292 b 140 117 52 196 92 153 b 397 0 223 52 317 4 z m 340 95 b 132 314 233 84 122 216 b 324 589 145 438 200 539 b 415 611 360 603 389 611 b 544 505 469 611 505 576 b 590 392 564 471 583 432 b 596 343 593 374 596 359 b 340 95 596 210 485 96 z',\n        },\n        csymHalfDiminished: {\n            x_min: -32,\n            x_max: 496,\n            y_min: -33,\n            y_max: 492,\n            ha: 525,\n            o: 'm -29 -48 b 0 -36 -19 -48 -9 -40 b 17 -20 7 -32 12 -24 b 134 94 56 19 95 56 b 372 0 207 43 282 0 b 455 13 397 0 426 4 b 677 258 556 45 671 141 b 678 289 677 268 678 278 b 593 539 678 380 654 467 b 592 541 593 540 592 540 l 684 632 b 713 678 700 647 711 665 b 714 691 714 684 714 688 b 707 704 714 698 711 701 b 691 708 701 707 696 708 b 660 691 680 708 670 701 l 552 585 b 478 634 530 606 507 624 b 361 684 438 648 397 661 b 301 703 341 697 320 703 b 226 677 275 703 251 693 b 27 449 140 618 72 543 b 0 324 9 410 -4 370 b 88 128 -1 243 30 177 b -30 -7 43 86 0 46 b -46 -33 -35 -16 -46 -24 b -42 -42 -46 -36 -45 -39 b -29 -48 -37 -46 -33 -48 z m 141 179 b 121 251 128 200 121 225 b 128 297 121 265 124 281 b 351 575 163 420 248 505 b 377 582 359 579 369 580 b 501 536 422 586 468 567 b 141 179 382 416 261 298 z m 281 105 b 179 137 240 105 206 117 b 210 168 189 147 200 157 l 537 487 b 547 455 541 477 544 467 b 556 370 552 426 556 397 b 429 154 556 274 503 207 b 281 105 384 122 336 105 z',\n        },\n        csymAugmented: {\n            x_min: 0,\n            x_max: 530,\n            y_min: 0,\n            y_max: 539,\n            ha: 539,\n            o: 'm 380 0 b 393 14 384 4 390 9 b 397 46 397 24 397 36 l 397 333 b 736 327 511 331 624 330 b 763 343 755 327 763 333 b 755 361 763 348 760 354 b 635 431 726 402 688 431 l 390 431 l 390 485 b 386 606 392 526 386 566 b 392 664 386 625 387 645 b 395 690 393 672 395 681 b 376 753 395 711 389 734 b 357 776 372 762 369 776 b 350 775 354 776 353 776 b 327 740 337 769 327 759 b 327 621 328 700 327 661 b 330 438 328 559 328 498 l 29 438 b 4 431 20 438 7 442 b 0 413 3 425 0 419 b 7 399 0 408 1 403 b 131 338 45 369 85 340 b 331 334 199 336 265 334 b 333 163 333 276 333 220 b 366 13 333 109 348 63 b 380 0 367 7 374 4 z',\n        },\n        csymMajorSeventh: {\n            x_min: 0,\n            x_max: 593.1050509327923,\n            y_min: 0,\n            y_max: 569,\n            ha: 569,\n            o: 'm 124 1 l 497 27 b 819 50 605 35 711 43 b 854 98 847 52 855 63 b 812 200 845 128 835 166 b 564 585 730 328 648 456 b 435 786 521 652 480 720 b 397 819 419 809 408 819 b 369 792 387 819 379 811 b 7 173 248 585 128 379 b 0 150 3 166 0 158 b 7 128 0 143 3 135 b 89 10 30 86 65 50 b 109 0 95 1 102 0 z m 163 147 b 153 153 158 147 156 148 b 164 179 147 163 158 170 b 426 644 251 334 338 488 b 442 660 432 655 436 660 b 458 645 446 660 452 655 b 727 220 547 503 636 361 b 736 202 732 213 736 206 b 714 190 736 196 730 192 b 179 148 537 177 359 163 b 163 147 174 150 168 147 z',\n        },\n        csymMinor: {\n            x_min: 0,\n            x_max: 481.64484584675915,\n            y_min: 193,\n            y_max: 265.20435472429375,\n            ha: 72.20435472429375,\n            o: 'm 168 278 b 197 279 177 278 187 278 b 431 292 275 287 353 288 l 431 291 b 661 302 508 295 585 300 b 693 311 672 304 688 300 b 674 346 697 324 685 338 b 564 382 641 366 606 384 l 27 360 b 0 347 17 360 1 366 b 19 314 0 333 3 321 b 168 278 66 291 115 278 z',\n        },\n        csymParensLeftTall: {\n            x_min: 0,\n            x_max: 185,\n            y_min: 0,\n            y_max: 1034,\n            ha: 1034,\n            o: 'm 215 0 b 226 17 223 1 223 10 b 229 37 229 24 229 32 b 220 81 229 52 225 66 b 167 203 206 124 181 160 b 86 616 124 338 89 474 b 82 765 85 665 82 716 b 91 886 82 805 84 845 b 245 1319 120 1038 171 1184 b 266 1397 259 1346 266 1371 b 259 1443 266 1411 264 1427 b 226 1489 253 1463 248 1489 b 193 1454 212 1489 203 1467 b 114 1292 158 1404 140 1346 b 0 806 40 1138 0 978 b 3 721 0 779 0 750 b 1 677 1 707 1 693 b 36 418 1 593 16 504 b 144 96 62 307 95 199 b 196 12 158 66 179 39 b 212 0 200 7 204 0 z',\n        },\n        csymParensRightTall: {\n            x_min: -40,\n            x_max: 188.5411603861406,\n            y_min: 0.20204102886728756,\n            y_max: 1058,\n            ha: 1057.7979589711326,\n            o: 'm 30 1 b 63 14 42 -3 55 6 b 122 99 86 40 108 68 b 189 258 145 153 166 204 b 271 667 239 379 268 503 b 246 852 275 708 261 780 b 10 1495 197 1077 128 1295 b -14 1524 4 1505 1 1524 b -16 1522 -14 1524 -16 1524 b -46 1489 -33 1521 -43 1503 b -58 1417 -53 1464 -58 1440 b -36 1335 -58 1390 -52 1364 b 68 1138 0 1270 35 1204 b 163 883 108 1056 137 969 b 206 668 184 814 200 742 b 207 631 207 655 207 642 b 166 426 207 560 192 492 b 46 143 130 330 111 228 b 19 29 19 109 17 69 b 30 1 20 19 24 3 z',\n        },\n        csymBracketLeftTall: {\n            x_min: 0,\n            x_max: 328,\n            y_min: 2,\n            y_max: 807,\n            ha: 805,\n            o: 'm 68 3 b 76 4 71 3 73 3 b 186 13 112 12 150 13 b 240 13 204 13 222 13 l 287 13 b 379 17 317 13 348 13 b 472 121 435 24 472 69 b 467 156 472 132 469 144 b 446 174 462 168 456 174 l 439 174 b 327 166 402 167 364 166 b 265 167 307 166 285 167 l 209 167 b 187 475 199 269 189 372 b 166 985 186 645 187 815 l 377 1002 b 415 1001 389 1002 402 1001 b 456 1027 432 1001 448 1005 b 472 1096 467 1048 472 1073 b 464 1146 472 1113 469 1130 b 439 1162 459 1161 452 1162 b 40 1129 305 1151 173 1139 b 1 1093 17 1128 1 1120 b 0 1009 0 1064 0 1037 b 13 975 0 991 3 981 b 30 670 23 873 30 772 b 29 608 30 649 29 628 l 29 563 b 56 88 29 405 49 246 b 53 22 55 66 55 43 b 68 3 53 12 56 3 z',\n        },\n        csymBracketRightTall: {\n            x_min: 0.8519422934604696,\n            x_max: 306,\n            y_min: -0.17180889215212544,\n            y_max: 829.1037519824849,\n            ha: 829.2755608746371,\n            o: 'm 117 0 b 372 29 203 -3 287 20 l 373 29 b 406 32 383 30 395 30 b 436 60 428 33 432 43 b 441 109 439 76 441 92 b 433 200 441 140 436 170 b 409 696 422 366 409 530 b 416 887 409 763 416 831 b 415 920 416 899 415 910 l 415 1106 b 412 1135 415 1116 415 1126 l 412 1145 b 373 1189 413 1171 408 1192 b 321 1189 356 1189 338 1189 l 215 1189 l 215 1194 l 56 1194 b 6 1153 27 1195 10 1187 b 1 1064 3 1123 4 1093 b 22 1043 0 1050 6 1043 b 84 1044 42 1044 63 1044 b 264 1038 144 1044 203 1040 b 265 958 264 1011 265 985 b 262 845 265 920 264 883 b 259 710 259 801 259 755 b 279 243 259 554 271 399 b 285 170 281 219 284 194 b 95 151 222 161 158 156 b 29 81 27 147 27 147 l 29 73 b 105 0 33 0 33 0 z',\n        },\n        csymParensLeftVeryTall: {\n            x_min: 0,\n            x_max: 116,\n            y_min: 0,\n            y_max: 934.1531437146923,\n            ha: 934.1531437146923,\n            o: 'm 128 0 b 147 17 137 0 144 9 b 167 102 160 45 167 73 b 158 154 167 120 164 137 b 117 307 141 204 130 256 b 63 698 84 435 71 567 b 62 788 62 729 62 757 b 69 916 62 829 63 873 b 109 1172 81 1001 94 1087 b 132 1320 118 1221 137 1269 b 124 1345 131 1329 134 1342 b 96 1332 114 1346 102 1341 b 71 1269 82 1313 75 1292 b 39 1104 59 1214 48 1159 b 0 742 19 988 0 871 b 10 559 3 688 6 624 b 58 226 16 446 33 336 b 112 20 73 157 94 89 b 128 0 115 13 118 0 z',\n        },\n        csymParensRightVeryTall: {\n            x_min: -20,\n            x_max: 111.4332498248095,\n            y_min: -0.07657185734616112,\n            y_max: 1009,\n            ha: 1009.0765718573462,\n            o: 'm -3 0 b 20 22 9 -1 14 12 b 36 56 26 33 32 45 b 99 274 58 128 84 199 b 160 788 135 439 163 605 b 122 1181 164 912 145 1047 b 50 1431 108 1267 86 1351 b 36 1453 48 1439 46 1453 l 35 1453 l 30 1453 b 7 1423 17 1449 7 1440 b 27 1287 9 1377 10 1331 b 96 963 71 1184 85 1074 b 105 818 102 914 105 867 b 91 624 105 753 99 688 b -4 213 72 484 48 344 b -29 101 -19 174 -29 138 b -16 27 -29 76 -24 52 b -3 0 -13 17 -14 3 z',\n        },\n        csymDiagonalArrangementSlash: {\n            x_min: -0.19862981551275186,\n            x_max: 990,\n            y_min: -26.946823529189132,\n            y_max: 1027.5514326488437,\n            ha: 1054.4982561780328,\n            o: 'm 14 -37 b 58 -9 35 -45 46 -22 b 392 333 170 105 279 217 l 765 711 b 1372 1329 968 916 1168 1125 b 1424 1439 1403 1359 1417 1397 b 1426 1457 1424 1444 1426 1450 b 1416 1477 1426 1466 1423 1475 b 1374 1462 1400 1485 1385 1473 b 1181 1269 1309 1397 1246 1331 b 736 831 1031 1122 884 979 b 356 452 609 704 485 576 b 32 132 246 347 143 236 b 0 50 7 109 1 84 b 6 9 -1 37 3 23 b 14 -37 10 -9 0 -32 z',\n        },\n        accidentalNarrowReversedFlat: {\n            x_min: 0,\n            x_max: 208,\n            y_min: -231,\n            y_max: 449,\n            ha: 680,\n            o: 'm 272 -333 b 284 -320 278 -333 281 -328 b 300 -174 297 -272 300 -222 b 275 190 298 -52 279 68 b 268 445 272 275 268 360 l 268 490 b 264 612 269 530 265 572 b 236 647 264 632 252 645 l 235 647 b 217 618 220 647 220 628 b 207 526 210 588 207 556 b 210 432 207 494 210 464 b 216 268 213 377 215 323 l 216 230 l 215 232 b 154 256 194 240 174 251 b 111 264 138 261 124 264 b 3 153 50 264 10 223 b 0 94 0 132 0 114 b 194 -276 0 -63 68 -186 b 255 -323 215 -291 236 -307 b 272 -333 262 -330 268 -333 z m 233 -138 b 71 30 168 -92 105 -45 b 63 59 65 42 63 50 b 96 95 62 75 73 86 b 130 102 108 99 120 102 b 215 76 160 102 187 88 l 220 73 b 225 -22 220 42 222 10 b 233 -138 229 -62 230 -101 z',\n        },\n        accidentalNarrowReversedFlatAndFlat: {\n            x_min: 0,\n            x_max: 335,\n            y_min: -231,\n            y_max: 449,\n            ha: 680,\n            o: 'm 151 490 b 148 612 151 530 150 572 b 132 647 148 632 141 645 b 122 618 124 647 124 628 b 117 526 118 588 117 556 b 118 432 117 494 118 464 b 121 268 120 377 121 323 l 121 232 b 86 256 109 240 98 251 b 62 264 78 261 69 264 b 1 153 29 264 6 223 b 0 94 0 132 0 114 b 109 -276 0 -63 37 -186 b 144 -323 121 -291 132 -307 b 153 -333 147 -330 151 -333 b 160 -320 157 -333 158 -328 b 168 -174 167 -272 168 -222 b 154 190 168 -52 157 68 b 151 445 153 275 151 360 z m 480 153 b 372 264 472 223 432 264 b 328 256 359 264 344 261 b 268 232 308 251 288 240 l 266 230 l 266 268 b 272 432 266 323 269 377 b 275 526 272 464 275 494 b 265 618 275 556 272 588 b 248 647 262 628 262 647 l 246 647 b 219 612 230 645 219 632 b 215 490 217 572 213 530 l 215 445 b 207 190 215 360 210 275 b 183 -174 203 68 183 -52 b 199 -320 183 -222 186 -272 b 210 -333 202 -328 204 -333 b 228 -323 215 -333 220 -330 b 288 -276 246 -307 268 -291 b 482 94 415 -186 482 -63 b 480 153 482 114 482 132 z m 40 30 b 36 59 36 42 36 50 b 55 95 35 75 42 86 b 73 102 60 99 68 102 b 121 76 89 102 105 88 l 124 73 b 127 -22 124 42 125 10 l 131 -138 b 40 30 95 -92 60 -43 z m 419 59 b 412 30 419 50 418 42 b 249 -138 374 -43 314 -92 b 258 -22 252 -101 253 -62 b 262 73 261 10 262 42 l 268 76 b 353 102 295 88 323 102 b 386 95 363 102 374 99 b 419 59 409 86 420 75 z',\n        },\n        accidentalWilsonPlus: {\n            x_min: 0,\n            x_max: 298,\n            y_min: -218,\n            y_max: 218,\n            ha: 436,\n            o: 'm 232 -314 b 236 -301 236 -310 236 -305 l 236 -295 b 243 -52 239 -213 242 -132 l 369 62 b 429 200 413 101 425 147 b 416 243 429 216 428 236 b 383 225 406 251 393 232 l 377 220 b 246 98 336 177 291 138 b 249 242 248 145 246 193 b 225 304 251 265 242 287 b 209 314 220 308 215 314 b 204 312 207 314 206 312 b 196 292 196 310 196 300 b 193 184 194 256 194 220 b 187 48 192 140 190 94 b 46 -72 141 7 94 -32 b 0 -163 13 -98 0 -127 b 1 -187 0 -170 0 -179 b 10 -235 4 -203 6 -219 b 20 -255 12 -242 14 -251 b 36 -245 26 -259 30 -249 b 181 -109 85 -200 132 -154 b 176 -258 180 -158 176 -209 b 232 -314 176 -298 186 -307 z',\n        },\n        accidentalWilsonMinus: {\n            x_min: 0,\n            x_max: 284.2093390143919,\n            y_min: -163,\n            y_max: 163,\n            ha: 326,\n            o: 'm 386 -232 b 409 -163 415 -222 408 -180 b 382 -69 410 -120 408 -89 b 32 228 264 30 141 118 b 17 235 26 233 22 235 b 3 219 9 235 3 228 b 0 157 3 199 0 179 b 29 69 0 125 6 95 b 323 -194 115 -29 222 -111 b 374 -235 338 -206 353 -235 b 386 -232 377 -235 382 -233 z',\n        },\n    },\n    fontFamily: 'Petaluma',\n    resolution: 1000,\n    generatedOn: '2022-06-26T17:47:23.560Z',\n};\n", "export const PetalumaMetrics = {\n    name: 'Petaluma',\n    smufl: true,\n    stave: {\n        padding: 15,\n        endPaddingMax: 15,\n        endPaddingMin: 7,\n        unalignedNotePadding: 12,\n    },\n    accidental: {\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    clef: {\n        default: {\n            point: 32,\n            width: 26,\n        },\n        small: {\n            point: 26,\n            width: 20,\n        },\n        annotations: {\n            '8va': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: -1.4,\n                        shiftX: 12,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: -0.2,\n                        shiftX: 8,\n                    },\n                },\n            },\n            '8vb': {\n                smuflCode: 'timeSig8',\n                default: {\n                    point: 18,\n                    treble: {\n                        line: 6,\n                        shiftX: 10,\n                    },\n                    bass: {\n                        line: 3.5,\n                        shiftX: 1,\n                    },\n                },\n                small: {\n                    point: 16,\n                    treble: {\n                        line: 5.3,\n                        shiftX: 6,\n                    },\n                    bass: {\n                        line: 3.1,\n                        shiftX: 0.5,\n                    },\n                },\n            },\n        },\n        lineCount: {\n            '8': { point: 55, shiftY: 14 },\n            '7': { point: 47, shiftY: 8 },\n            '6': { point: 32, shiftY: 1 },\n            '5': { point: 30, shiftY: -6 },\n            '4': { point: 23, shiftY: -12 },\n        },\n    },\n    parenthesis: {\n        default: {\n            point: 39,\n            width: 7,\n        },\n        gracenote: {\n            point: (39 * 3) / 5,\n            width: 3,\n        },\n    },\n    pedalMarking: {\n        up: {\n            point: 40,\n        },\n        down: {\n            point: 34,\n        },\n    },\n    digits: {\n        shiftLine: -1,\n        point: 22,\n        tupletPoint: 16,\n        shiftY: -2,\n    },\n    articulation: {\n        articStaccatissimoAbove: {\n            padding: 2,\n        },\n        articStaccatissimoBelow: {\n            padding: 2,\n        },\n    },\n    tremolo: {\n        default: {\n            point: 25,\n            spacing: 5,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 13,\n            offsetXStemDown: 1,\n        },\n        grace: {\n            point: 18,\n            spacing: 4,\n            offsetYStemUp: -5,\n            offsetYStemDown: 5,\n            offsetXStemUp: 8,\n            offsetXStemDown: 1,\n        },\n    },\n    staveRepetition: {\n        symbolText: {\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    noteHead: {\n        displaced: {\n            shiftX: -2,\n        },\n    },\n    stem: {\n        heightAdjustmentForFlag: -3,\n        noteHead: {\n            noteheadTriangleUpHalf: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpBlack: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadTriangleUpWhole: {\n                offsetYBaseStemUp: 5,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXHalf: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXBlack: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadXWhole: {\n                offsetYBaseStemUp: -4,\n                offsetYBaseStemDown: 4,\n            },\n            noteheadHalf: {\n                offsetYBaseStemDown: 1.8,\n                offsetYBaseStemUp: -1.8,\n            },\n            noteheadBlack: {\n                offsetYBaseStemDown: 2,\n                offsetYBaseStemUp: -2,\n            },\n            noteheadSquareWhite: {\n                offsetYBaseStemDown: -5,\n                offsetYBaseStemUp: 5,\n            },\n        },\n    },\n    glyphs: {\n        coda: {\n            point: 20,\n            shiftX: -7,\n            shiftY: 8,\n        },\n        segno: {\n            shiftX: -7,\n        },\n        flag: {\n            shiftX: -0.77,\n            flag16thUp: {\n                shiftX: -0.75,\n            },\n            flag32ndUp: {\n                shiftX: -0.85,\n            },\n            flag64thUp: {\n                shiftX: -1.55,\n            },\n            flag128thUp: {\n                shiftX: -1.3,\n            },\n            flag16thDown: {\n                shiftX: -0.75,\n            },\n            flag32ndDown: {\n                shiftX: -0.76,\n            },\n            flag64thDown: {\n                shiftX: -1.5,\n            },\n            flag128thDown: {\n                shiftX: -1.2,\n            },\n            staveTempo: {\n                shiftX: -1,\n            },\n        },\n        clef: {\n            gClef: {\n                default: { scale: 1.1, shiftY: 1 },\n                small: { shiftY: 1.5 },\n            },\n            fClef: {\n                default: { shiftY: -0.5 },\n            },\n        },\n        ornament: {\n            ornamentTurn: {\n                scale: 1.2,\n            },\n            ornamentTurnSlash: {\n                scale: 1.2,\n            },\n        },\n        stringNumber: {\n            verticalPadding: 8,\n            stemPadding: 2,\n            leftPadding: 5,\n            rightPadding: 6,\n        },\n        stroke: {\n            arrowheadBlackDown: {\n                straight: {\n                    shiftX: -4.5,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n            arrowheadBlackUp: {\n                straight: {\n                    shiftX: -0.85,\n                },\n                wiggly: {\n                    shiftX: -1,\n                    shiftY: 1,\n                },\n            },\n        },\n        textNote: {\n            point: 34,\n            breathMarkTick: {\n                point: 36,\n                shiftY: 9,\n            },\n            breathMarkComma: {\n                point: 36,\n            },\n            segno: {\n                point: 30,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            coda: {\n                point: 20,\n                shiftX: -7,\n                shiftY: 8,\n            },\n            ornamentTrill: {\n                shiftX: -10,\n                shiftY: 8,\n            },\n            ornamentMordent: {\n                shiftX: -8,\n            },\n            ornamentShortTrill: {\n                shiftX: -8,\n            },\n        },\n        noteHead: {\n            minPadding: 2,\n            standard: {\n                noteheadBlackStemUp: {\n                    shiftX: 0.5,\n                },\n                noteheadHalfStemUp: {\n                    shiftX: 0.725,\n                },\n                noteheadWholeStemUp: {\n                    shiftX: 1,\n                },\n            },\n        },\n        chordSymbol: {\n            global: {\n                superscriptOffset: -400,\n                subscriptOffset: 300,\n                kerningOffset: -150,\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n                upperKerningText: ['L'],\n                spacing: 20,\n                superSubRatio: 0.73,\n            },\n            csymDiminished: {\n                scale: 0.8,\n                leftSideBearing: -95,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymHalfDiminished: {\n                scale: 0.8,\n                leftSideBearing: -32,\n                advanceWidth: 506,\n                yOffset: 0,\n            },\n            csymAugmented: {\n                scale: 1,\n                leftSideBearing: -25,\n                advanceWidth: 530,\n                yOffset: 0,\n            },\n            csymParensLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 155,\n                yOffset: 150,\n            },\n            csymParensRightTall: {\n                scale: 0.8,\n                leftSideBearing: 40,\n                advanceWidth: 189,\n                yOffset: 150,\n            },\n            csymBracketLeftTall: {\n                scale: 0.8,\n                leftSideBearing: 0,\n                advanceWidth: 328,\n                yOffset: 0,\n            },\n            csymBracketRightTall: {\n                scale: 0.8,\n                leftSideBearing: 1,\n                advanceWidth: 600,\n                yOffset: 0,\n            },\n            csymParensLeftVeryTall: {\n                scale: 0.95,\n                leftSideBearing: 0,\n                advanceWidth: 210,\n                yOffset: 250,\n            },\n            csymParensRightVeryTall: {\n                scale: 0.9,\n                leftSideBearing: -100,\n                advanceWidth: 111,\n                yOffset: 250,\n            },\n            csymDiagonalArrangementSlash: {\n                scale: 0.6,\n                leftSideBearing: -1,\n                advanceWidth: 990,\n                yOffset: 0,\n            },\n            csymMinor: {\n                scale: 0.7,\n                leftSideBearing: 0,\n                advanceWidth: 482,\n                yOffset: 0,\n            },\n            csymMajorSeventh: {\n                scale: 0.8,\n                leftSideBearing: 100,\n                yOffset: 0,\n                advanceWidth: 600,\n            },\n            accidentalSharp: {\n                scale: 0.7,\n                leftSideBearing: 0,\n                advanceWidth: 425,\n                yOffset: -422,\n            },\n            accidentalFlat: {\n                scale: 0.8,\n                leftSideBearing: -10,\n                advanceWidth: 228,\n                yOffset: -284,\n            },\n        },\n        jazzOrnaments: {\n            brassScoop: {\n                scale: 1.0,\n                xOffset: -12,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassDoitMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 19,\n            },\n            brassFallLipShort: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 0,\n                stemUpYOffset: 0,\n                reportedWidth: 19,\n            },\n            brassLiftMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 5,\n                stemUpYOffset: 0,\n                reportedWidth: 15,\n            },\n            brassFallRoughMedium: {\n                scale: 1.0,\n                xOffset: 16,\n                yOffset: 26,\n                stemUpYOffset: 0,\n                reportedWidth: 5,\n            },\n            brassBend: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -8,\n                stemUpYOffset: 28,\n                reportedWidth: 5,\n            },\n            brassMuteClosed: {\n                scale: 1.0,\n                xOffset: 3,\n                yOffset: -8,\n                stemUpYOffset: 26,\n                reportedWidth: 5,\n            },\n            brassMuteOpen: {\n                scale: 1.0,\n                xOffset: 4,\n                yOffset: -8,\n                stemUpYOffset: 27,\n                reportedWidth: 5,\n            },\n            brassFlip: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: -4,\n                stemUpYOffset: 7,\n                reportedWidth: 5,\n            },\n            brassJazzTurn: {\n                scale: 1.0,\n                xOffset: 6,\n                yOffset: -4,\n                stemUpYOffset: 5,\n                reportedWidth: 30,\n            },\n            brassSmear: {\n                scale: 1.0,\n                xOffset: 10,\n                yOffset: -4,\n                stemUpYOffset: 5,\n                reportedWidth: 5,\n            },\n        },\n        tuplet: {\n            noteHeadOffset: 20,\n            stemOffset: 10,\n            bottomLine: 4,\n            topModifierOffset: 20,\n        },\n    },\n};\n", "import { Font } from '../font.js';\nimport { PetalumaFont } from './petaluma_glyphs.js';\nimport { PetalumaMetrics } from './petaluma_metrics.js';\nexport function loadPetaluma() {\n    Font.load('Petaluma', PetalumaFont, PetalumaMetrics);\n}\n", "import { loadBravura } from './load_bravura.js';\nimport { loadCustom } from './load_custom.js';\nimport { loadGonville } from './load_gonville.js';\nimport { loadLeland } from './load_leland.js';\nimport { loadPetaluma } from './load_petaluma.js';\nexport function loadAllMusicFonts() {\n    loadBravura();\n    loadGonville();\n    loadPetaluma();\n    loadCustom();\n    loadLeland();\n}\n", "export const PetalumaScriptFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 250,\n            y_min: 0,\n            y_max: 500,\n            ha: 500,\n            leftSideBearing: 0,\n            advanceWidth: 250,\n        },\n        '0': {\n            x_min: 33,\n            x_max: 534,\n            y_min: -13,\n            y_max: 751,\n            ha: 764,\n            leftSideBearing: 33,\n            advanceWidth: 570,\n        },\n        '1': {\n            x_min: 48,\n            x_max: 235,\n            y_min: -17,\n            y_max: 734,\n            ha: 751,\n            leftSideBearing: 48,\n            advanceWidth: 286,\n        },\n        '2': {\n            x_min: 56,\n            x_max: 571,\n            y_min: -19,\n            y_max: 741,\n            ha: 760,\n            leftSideBearing: 56,\n            advanceWidth: 626,\n        },\n        '3': {\n            x_min: 50,\n            x_max: 528,\n            y_min: -7,\n            y_max: 731,\n            ha: 738,\n            leftSideBearing: 50,\n            advanceWidth: 589,\n        },\n        '4': {\n            x_min: 38,\n            x_max: 564,\n            y_min: -13,\n            y_max: 743,\n            ha: 756,\n            leftSideBearing: 38,\n            advanceWidth: 614,\n        },\n        '5': {\n            x_min: 42,\n            x_max: 601,\n            y_min: -34,\n            y_max: 743,\n            ha: 777,\n            leftSideBearing: 42,\n            advanceWidth: 648,\n        },\n        '6': {\n            x_min: 47,\n            x_max: 606,\n            y_min: -16,\n            y_max: 743,\n            ha: 759,\n            leftSideBearing: 47,\n            advanceWidth: 667,\n        },\n        '7': {\n            x_min: 47,\n            x_max: 567,\n            y_min: 5,\n            y_max: 739,\n            ha: 734,\n            leftSideBearing: 0,\n            advanceWidth: 615,\n        },\n        '8': {\n            x_min: 40,\n            x_max: 541,\n            y_min: -15,\n            y_max: 752,\n            ha: 767,\n            leftSideBearing: 40,\n            advanceWidth: 585,\n        },\n        '9': {\n            x_min: 40,\n            x_max: 537,\n            y_min: -52,\n            y_max: 736,\n            ha: 788,\n            leftSideBearing: 40,\n            advanceWidth: 592,\n        },\n        '!': {\n            x_min: 49,\n            x_max: 180,\n            y_min: -7,\n            y_max: 761,\n            ha: 768,\n            leftSideBearing: 49,\n            advanceWidth: 230,\n        },\n        '\"': {\n            x_min: 39,\n            x_max: 304,\n            y_min: 596,\n            y_max: 804,\n            ha: 208,\n            leftSideBearing: 39,\n            advanceWidth: 353,\n        },\n        '#': {\n            x_min: 33,\n            x_max: 599,\n            y_min: -8,\n            y_max: 765,\n            ha: 773,\n            leftSideBearing: 33,\n            advanceWidth: 648,\n        },\n        $: {\n            x_min: 53,\n            x_max: 495,\n            y_min: -111,\n            y_max: 823,\n            ha: 934,\n            leftSideBearing: 53,\n            advanceWidth: 560,\n        },\n        '%': {\n            x_min: 35,\n            x_max: 656,\n            y_min: -128,\n            y_max: 808,\n            ha: 936,\n            leftSideBearing: 35,\n            advanceWidth: 711,\n        },\n        '&': {\n            x_min: 53,\n            x_max: 441,\n            y_min: -3,\n            y_max: 753,\n            ha: 756,\n            leftSideBearing: 53,\n            advanceWidth: 500,\n        },\n        \"'\": {\n            x_min: 43,\n            x_max: 161,\n            y_min: 590,\n            y_max: 811,\n            ha: 221,\n            leftSideBearing: 43,\n            advanceWidth: 217,\n        },\n        '(': {\n            x_min: 41,\n            x_max: 311,\n            y_min: -36,\n            y_max: 845,\n            ha: 881,\n            leftSideBearing: 41,\n            advanceWidth: 308,\n        },\n        ')': {\n            x_min: -8,\n            x_max: 257,\n            y_min: -21,\n            y_max: 852,\n            ha: 873,\n            leftSideBearing: -8,\n            advanceWidth: 280,\n        },\n        '*': {\n            x_min: 59,\n            x_max: 539,\n            y_min: 175,\n            y_max: 589,\n            ha: 414,\n            leftSideBearing: 59,\n            advanceWidth: 601,\n        },\n        '+': {\n            x_min: 33,\n            x_max: 361,\n            y_min: 180,\n            y_max: 587,\n            ha: 407,\n            leftSideBearing: 33,\n            advanceWidth: 400,\n        },\n        ',': {\n            x_min: 15,\n            x_max: 176,\n            y_min: -129,\n            y_max: 92,\n            ha: 221,\n            leftSideBearing: 15,\n            advanceWidth: 205,\n        },\n        '-': {\n            x_min: 40,\n            x_max: 380,\n            y_min: 317,\n            y_max: 452,\n            ha: 135,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '.': {\n            x_min: 48,\n            x_max: 185,\n            y_min: -56,\n            y_max: 84,\n            ha: 140,\n            leftSideBearing: 48,\n            advanceWidth: 227,\n        },\n        '/': {\n            x_min: -58,\n            x_max: 654,\n            y_min: -122,\n            y_max: 844,\n            ha: 966,\n            leftSideBearing: -58,\n            advanceWidth: 626,\n        },\n        ':': {\n            x_min: 65,\n            x_max: 225,\n            y_min: 97,\n            y_max: 536,\n            ha: 439,\n            leftSideBearing: 65,\n            advanceWidth: 302,\n        },\n        ';': {\n            x_min: 13,\n            x_max: 295,\n            y_min: -139,\n            y_max: 536,\n            ha: 675,\n            leftSideBearing: 13,\n            advanceWidth: 334,\n        },\n        '<': {\n            x_min: 28,\n            x_max: 438,\n            y_min: -1,\n            y_max: 607,\n            ha: 608,\n            leftSideBearing: 28,\n            advanceWidth: 475,\n        },\n        '=': {\n            x_min: 40,\n            x_max: 383,\n            y_min: 199.9598640852289,\n            y_max: 541,\n            ha: 341.0401359147711,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '>': {\n            x_min: 35,\n            x_max: 421,\n            y_min: 28,\n            y_max: 632,\n            ha: 604,\n            leftSideBearing: 35,\n            advanceWidth: 466,\n        },\n        '?': {\n            x_min: 45,\n            x_max: 548,\n            y_min: -17,\n            y_max: 767,\n            ha: 784,\n            leftSideBearing: 45,\n            advanceWidth: 592,\n        },\n        '@': {\n            x_min: 51,\n            x_max: 730,\n            y_min: -78,\n            y_max: 753,\n            ha: 831,\n            leftSideBearing: 51,\n            advanceWidth: 781,\n        },\n        A: {\n            x_min: 37,\n            x_max: 554,\n            y_min: -4,\n            y_max: 746,\n            ha: 750,\n            leftSideBearing: 37,\n            advanceWidth: 617,\n        },\n        B: {\n            x_min: 37,\n            x_max: 532,\n            y_min: 3,\n            y_max: 783,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 579,\n        },\n        C: {\n            x_min: 37,\n            x_max: 583,\n            y_min: -3,\n            y_max: 775,\n            ha: 778,\n            leftSideBearing: 37,\n            advanceWidth: 623,\n        },\n        D: {\n            x_min: 50,\n            x_max: 530,\n            y_min: -15,\n            y_max: 749,\n            ha: 764,\n            leftSideBearing: 50,\n            advanceWidth: 579,\n        },\n        E: {\n            x_min: 45,\n            x_max: 531,\n            y_min: -1,\n            y_max: 743,\n            ha: 744,\n            leftSideBearing: 45,\n            advanceWidth: 585,\n        },\n        F: {\n            x_min: 45,\n            x_max: 459,\n            y_min: 23,\n            y_max: 727,\n            ha: 704,\n            leftSideBearing: 45,\n            advanceWidth: 510,\n        },\n        G: {\n            x_min: 31,\n            x_max: 577,\n            y_min: -8,\n            y_max: 733,\n            ha: 741,\n            leftSideBearing: 31,\n            advanceWidth: 611,\n        },\n        H: {\n            x_min: 37,\n            x_max: 493,\n            y_min: -22,\n            y_max: 758,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 535,\n        },\n        I: {\n            x_min: 47,\n            x_max: 501,\n            y_min: -3,\n            y_max: 731,\n            ha: 734,\n            leftSideBearing: 47,\n            advanceWidth: 541,\n        },\n        J: {\n            x_min: 33,\n            x_max: 531,\n            y_min: -23,\n            y_max: 725,\n            ha: 748,\n            leftSideBearing: 33,\n            advanceWidth: 573,\n        },\n        K: {\n            x_min: 43,\n            x_max: 505,\n            y_min: -10,\n            y_max: 740,\n            ha: 750,\n            leftSideBearing: 43,\n            advanceWidth: 560,\n        },\n        L: {\n            x_min: 49,\n            x_max: 457,\n            y_min: -2,\n            y_max: 746,\n            ha: 748,\n            leftSideBearing: 49,\n            advanceWidth: 510,\n        },\n        M: {\n            x_min: 35,\n            x_max: 699,\n            y_min: 1,\n            y_max: 744,\n            ha: 743,\n            leftSideBearing: 35,\n            advanceWidth: 743,\n        },\n        N: {\n            x_min: 34,\n            x_max: 533,\n            y_min: -17,\n            y_max: 761,\n            ha: 778,\n            leftSideBearing: 34,\n            advanceWidth: 579,\n        },\n        O: {\n            x_min: 41,\n            x_max: 608,\n            y_min: -5,\n            y_max: 735,\n            ha: 740,\n            leftSideBearing: 41,\n            advanceWidth: 667,\n        },\n        P: {\n            x_min: 53,\n            x_max: 451,\n            y_min: -18,\n            y_max: 735,\n            ha: 753,\n            leftSideBearing: 53,\n            advanceWidth: 497,\n        },\n        Q: {\n            x_min: 40,\n            x_max: 599,\n            y_min: -67,\n            y_max: 744,\n            ha: 811,\n            leftSideBearing: 40,\n            advanceWidth: 648,\n        },\n        R: {\n            x_min: 39,\n            x_max: 487,\n            y_min: 16,\n            y_max: 735,\n            ha: 719,\n            leftSideBearing: 39,\n            advanceWidth: 535,\n        },\n        S: {\n            x_min: 35,\n            x_max: 552,\n            y_min: -47,\n            y_max: 708,\n            ha: 755,\n            leftSideBearing: 35,\n            advanceWidth: 604,\n        },\n        T: {\n            x_min: 26,\n            x_max: 656,\n            y_min: -13,\n            y_max: 718,\n            ha: 731,\n            leftSideBearing: 26,\n            advanceWidth: 705,\n        },\n        U: {\n            x_min: 41,\n            x_max: 518,\n            y_min: -20,\n            y_max: 748,\n            ha: 768,\n            leftSideBearing: 41,\n            advanceWidth: 567,\n        },\n        V: {\n            x_min: 47,\n            x_max: 509,\n            y_min: -26,\n            y_max: 744,\n            ha: 770,\n            leftSideBearing: 47,\n            advanceWidth: 567,\n        },\n        W: {\n            x_min: 44,\n            x_max: 789,\n            y_min: -35,\n            y_max: 720,\n            ha: 755,\n            leftSideBearing: 44,\n            advanceWidth: 833,\n        },\n        X: {\n            x_min: 63,\n            x_max: 635,\n            y_min: -10,\n            y_max: 745,\n            ha: 755,\n            leftSideBearing: 63,\n            advanceWidth: 680,\n        },\n        Y: {\n            x_min: 43,\n            x_max: 503,\n            y_min: -21,\n            y_max: 734,\n            ha: 755,\n            leftSideBearing: 43,\n            advanceWidth: 541,\n        },\n        Z: {\n            x_min: 42,\n            x_max: 584,\n            y_min: -10,\n            y_max: 739,\n            ha: 749,\n            leftSideBearing: 42,\n            advanceWidth: 629,\n        },\n        '[': {\n            x_min: 46,\n            x_max: 346,\n            y_min: -150,\n            y_max: 884,\n            ha: 1034,\n            leftSideBearing: 46,\n            advanceWidth: 291,\n        },\n        '\\\\': {\n            x_min: 20,\n            x_max: 616,\n            y_min: -100,\n            y_max: 797,\n            ha: 897,\n            leftSideBearing: 20,\n            advanceWidth: 645,\n        },\n        ']': {\n            x_min: -76,\n            x_max: 226,\n            y_min: -150,\n            y_max: 881,\n            ha: 1031,\n            leftSideBearing: -76,\n            advanceWidth: 297,\n        },\n        '^': {\n            x_min: 43,\n            x_max: 437,\n            y_min: 517,\n            y_max: 812,\n            ha: 295,\n            leftSideBearing: 43,\n            advanceWidth: 478,\n        },\n        _: {\n            x_min: 29,\n            x_max: 563,\n            y_min: -110,\n            y_max: -1,\n            ha: 109,\n            leftSideBearing: 29,\n            advanceWidth: 598,\n        },\n        '`': {\n            x_min: 54,\n            x_max: 321,\n            y_min: 540,\n            y_max: 747,\n            ha: 207,\n            leftSideBearing: 54,\n            advanceWidth: 368,\n        },\n        a: {\n            x_min: 20,\n            x_max: 447,\n            y_min: -17,\n            y_max: 495,\n            ha: 512,\n            leftSideBearing: 20,\n            advanceWidth: 494,\n        },\n        b: {\n            x_min: 37,\n            x_max: 466,\n            y_min: -27,\n            y_max: 770,\n            ha: 797,\n            leftSideBearing: 37,\n            advanceWidth: 510,\n        },\n        c: {\n            x_min: 35,\n            x_max: 456,\n            y_min: -9,\n            y_max: 507,\n            ha: 516,\n            leftSideBearing: 35,\n            advanceWidth: 460,\n        },\n        d: {\n            x_min: 45,\n            x_max: 520,\n            y_min: -15,\n            y_max: 764,\n            ha: 779,\n            leftSideBearing: 45,\n            advanceWidth: 560,\n        },\n        e: {\n            x_min: 33,\n            x_max: 370,\n            y_min: -5,\n            y_max: 501,\n            ha: 506,\n            leftSideBearing: 33,\n            advanceWidth: 397,\n        },\n        f: {\n            x_min: 35,\n            x_max: 411,\n            y_min: -13,\n            y_max: 695,\n            ha: 708,\n            leftSideBearing: 35,\n            advanceWidth: 453,\n        },\n        g: {\n            x_min: 33,\n            x_max: 551,\n            y_min: -257,\n            y_max: 505,\n            ha: 762,\n            leftSideBearing: 33,\n            advanceWidth: 611,\n        },\n        h: {\n            x_min: 32,\n            x_max: 458,\n            y_min: -29,\n            y_max: 743,\n            ha: 772,\n            leftSideBearing: 32,\n            advanceWidth: 491,\n        },\n        i: {\n            x_min: 45,\n            x_max: 167,\n            y_min: -13,\n            y_max: 631,\n            ha: 644,\n            leftSideBearing: 45,\n            advanceWidth: 220,\n        },\n        j: {\n            x_min: -127,\n            x_max: 261,\n            y_min: -231,\n            y_max: 601,\n            ha: 832,\n            leftSideBearing: -127,\n            advanceWidth: 308,\n        },\n        k: {\n            x_min: 39,\n            x_max: 443,\n            y_min: -3,\n            y_max: 700,\n            ha: 703,\n            leftSideBearing: 39,\n            advanceWidth: 497,\n        },\n        l: {\n            x_min: 58,\n            x_max: 168,\n            y_min: -8,\n            y_max: 686,\n            ha: 694,\n            leftSideBearing: 58,\n            advanceWidth: 227,\n        },\n        m: {\n            x_min: 39,\n            x_max: 688,\n            y_min: -14,\n            y_max: 501,\n            ha: 515,\n            leftSideBearing: 39,\n            advanceWidth: 718,\n        },\n        n: {\n            x_min: 45,\n            x_max: 491,\n            y_min: -32,\n            y_max: 512,\n            ha: 544,\n            leftSideBearing: 45,\n            advanceWidth: 541,\n        },\n        o: {\n            x_min: 41,\n            x_max: 424,\n            y_min: -12,\n            y_max: 493,\n            ha: 505,\n            leftSideBearing: 41,\n            advanceWidth: 447,\n        },\n        p: {\n            x_min: 25,\n            x_max: 529,\n            y_min: -260,\n            y_max: 500,\n            ha: 760,\n            leftSideBearing: 25,\n            advanceWidth: 573,\n        },\n        q: {\n            x_min: 53,\n            x_max: 603,\n            y_min: -235,\n            y_max: 514,\n            ha: 749,\n            leftSideBearing: 53,\n            advanceWidth: 623,\n        },\n        r: {\n            x_min: 32,\n            x_max: 407,\n            y_min: -7,\n            y_max: 492,\n            ha: 499,\n            leftSideBearing: 32,\n            advanceWidth: 460,\n        },\n        s: {\n            x_min: 49,\n            x_max: 416,\n            y_min: -12,\n            y_max: 519,\n            ha: 531,\n            leftSideBearing: 49,\n            advanceWidth: 460,\n        },\n        t: {\n            x_min: 32,\n            x_max: 442,\n            y_min: -5,\n            y_max: 684,\n            ha: 689,\n            leftSideBearing: 32,\n            advanceWidth: 469,\n        },\n        u: {\n            x_min: 41,\n            x_max: 487,\n            y_min: -5,\n            y_max: 507,\n            ha: 512,\n            leftSideBearing: 41,\n            advanceWidth: 510,\n        },\n        v: {\n            x_min: 16,\n            x_max: 441,\n            y_min: -20,\n            y_max: 542,\n            ha: 562,\n            leftSideBearing: 16,\n            advanceWidth: 456,\n        },\n        w: {\n            x_min: 39,\n            x_max: 639,\n            y_min: -22,\n            y_max: 505,\n            ha: 527,\n            leftSideBearing: 39,\n            advanceWidth: 661,\n        },\n        x: {\n            x_min: 15,\n            x_max: 505,\n            y_min: -39,\n            y_max: 539,\n            ha: 578,\n            leftSideBearing: 15,\n            advanceWidth: 541,\n        },\n        y: {\n            x_min: -98,\n            x_max: 501,\n            y_min: -242,\n            y_max: 511,\n            ha: 753,\n            leftSideBearing: -98,\n            advanceWidth: 548,\n        },\n        z: {\n            x_min: 27,\n            x_max: 479,\n            y_min: -3,\n            y_max: 494,\n            ha: 497,\n            leftSideBearing: 27,\n            advanceWidth: 494,\n        },\n        '{': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '|': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '}': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '~': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n    },\n    fontFamily: 'PetalumaScript',\n    resolution: 1000,\n    generatedOn: '2020-06-14T18:33:25.407Z',\n};\n", "export const RobotoSlabFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 509,\n            y_min: 0,\n            y_max: 2000,\n            ha: 2000,\n            leftSideBearing: 0,\n            advanceWidth: 509,\n        },\n        '0': {\n            x_min: 121,\n            x_max: 1048,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1168,\n        },\n        '1': {\n            x_min: 117,\n            x_max: 767,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 117,\n            advanceWidth: 844,\n        },\n        '2': {\n            x_min: 75.8474576645637,\n            x_max: 1040,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 75,\n            advanceWidth: 1131,\n        },\n        '3': {\n            x_min: 74.85365853658536,\n            x_max: 994,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1106,\n        },\n        '4': {\n            x_min: 63,\n            x_max: 1114,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1187,\n        },\n        '5': {\n            x_min: 96.8448275474953,\n            x_max: 982,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 96,\n            advanceWidth: 1081,\n        },\n        '6': {\n            x_min: 121,\n            x_max: 1067,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1144,\n        },\n        '7': {\n            x_min: 76,\n            x_max: 1060,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: -30,\n            advanceWidth: 1128,\n        },\n        '8': {\n            x_min: 92,\n            x_max: 1039,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 92,\n            advanceWidth: 1131,\n        },\n        '9': {\n            x_min: 84,\n            x_max: 1026,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 84,\n            advanceWidth: 1154,\n        },\n        '!': {\n            x_min: 143,\n            x_max: 340,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 143,\n            advanceWidth: 483,\n        },\n        '\"': {\n            x_min: 166,\n            x_max: 634,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 770,\n        },\n        '#': {\n            x_min: 63,\n            x_max: 1179,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1246,\n        },\n        $: {\n            x_min: 81.92156915727656,\n            x_max: 1012,\n            y_min: -208,\n            y_max: 1693,\n            ha: 1901,\n            leftSideBearing: 81,\n            advanceWidth: 1110,\n        },\n        '%': {\n            x_min: 77,\n            x_max: 1384,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 77,\n            advanceWidth: 1460,\n        },\n        '&': {\n            x_min: 74,\n            x_max: 1242,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1289,\n        },\n        \"'\": {\n            x_min: 166,\n            x_max: 324,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 460,\n        },\n        '(': {\n            x_min: 114,\n            x_max: 650,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 114,\n            advanceWidth: 662,\n        },\n        ')': {\n            x_min: 11,\n            x_max: 547,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 11,\n            advanceWidth: 654,\n        },\n        '*': {\n            x_min: 66,\n            x_max: 893,\n            y_min: 607,\n            y_max: 1456,\n            ha: 849,\n            leftSideBearing: 66,\n            advanceWidth: 958,\n        },\n        '+': {\n            x_min: 73,\n            x_max: 1071,\n            y_min: 146,\n            y_max: 1206,\n            ha: 1060,\n            leftSideBearing: 73,\n            advanceWidth: 1145,\n        },\n        ',': {\n            x_min: 23,\n            x_max: 315,\n            y_min: -311,\n            y_max: 221,\n            ha: 532,\n            leftSideBearing: 23,\n            advanceWidth: 404,\n        },\n        '-': {\n            x_min: 154,\n            x_max: 643,\n            y_min: 538,\n            y_max: 692,\n            ha: 154,\n            leftSideBearing: 154,\n            advanceWidth: 797,\n        },\n        '.': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 202,\n            ha: 202,\n            leftSideBearing: 145,\n            advanceWidth: 493,\n        },\n        '/': {\n            x_min: 0,\n            x_max: 774,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 0,\n            advanceWidth: 824,\n        },\n        ':': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 145,\n            advanceWidth: 419,\n        },\n        ';': {\n            x_min: 53,\n            x_max: 345,\n            y_min: -311,\n            y_max: 1082,\n            ha: 1393,\n            leftSideBearing: 53,\n            advanceWidth: 424,\n        },\n        '<': {\n            x_min: 76,\n            x_max: 892,\n            y_min: 107,\n            y_max: 1013,\n            ha: 906,\n            leftSideBearing: 76,\n            advanceWidth: 1017,\n        },\n        '=': {\n            x_min: 147,\n            x_max: 981,\n            y_min: 407,\n            y_max: 987,\n            ha: 580,\n            leftSideBearing: 147,\n            advanceWidth: 1127,\n        },\n        '>': {\n            x_min: 125,\n            x_max: 980,\n            y_min: 87,\n            y_max: 993,\n            ha: 906,\n            leftSideBearing: 125,\n            advanceWidth: 1060,\n        },\n        '?': {\n            x_min: 65.92660602419838,\n            x_max: 890,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 65,\n            advanceWidth: 953,\n        },\n        '@': {\n            x_min: 84.3592218305664,\n            x_max: 1705.2346925277395,\n            y_min: -453,\n            y_max: 1431,\n            ha: 1884,\n            leftSideBearing: 84,\n            advanceWidth: 1821,\n        },\n        A: {\n            x_min: 70,\n            x_max: 1463,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 70,\n            advanceWidth: 1533,\n        },\n        B: {\n            x_min: 81,\n            x_max: 1253,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1322,\n        },\n        C: {\n            x_min: 80,\n            x_max: 1174,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1290,\n        },\n        D: {\n            x_min: 81,\n            x_max: 1291,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1356,\n        },\n        E: {\n            x_min: 81,\n            x_max: 1190,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1306,\n        },\n        F: {\n            x_min: 81,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1256,\n        },\n        G: {\n            x_min: 80,\n            x_max: 1226,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1346,\n        },\n        H: {\n            x_min: 81,\n            x_max: 1497,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1578,\n        },\n        I: {\n            x_min: 81,\n            x_max: 604,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 685,\n        },\n        J: {\n            x_min: 60,\n            x_max: 1100,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 60,\n            advanceWidth: 1169,\n        },\n        K: {\n            x_min: 81,\n            x_max: 1427,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1501,\n        },\n        L: {\n            x_min: 81,\n            x_max: 1130,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1210,\n        },\n        M: {\n            x_min: 94,\n            x_max: 1888,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 94,\n            advanceWidth: 1982,\n        },\n        N: {\n            x_min: 83,\n            x_max: 1509,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 83,\n            advanceWidth: 1592,\n        },\n        O: {\n            x_min: 70,\n            x_max: 1281,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 70,\n            advanceWidth: 1351,\n        },\n        P: {\n            x_min: 81,\n            x_max: 1242,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1297,\n        },\n        Q: {\n            x_min: 70,\n            x_max: 1348,\n            y_min: -245,\n            y_max: 1477,\n            ha: 1722,\n            leftSideBearing: 70,\n            advanceWidth: 1376,\n        },\n        R: {\n            x_min: 81,\n            x_max: 1285,\n            y_min: 0,\n            y_max: 1455,\n            ha: 1455,\n            leftSideBearing: 81,\n            advanceWidth: 1385,\n        },\n        S: {\n            x_min: 115,\n            x_max: 1116,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 115,\n            advanceWidth: 1206,\n        },\n        T: {\n            x_min: 96,\n            x_max: 1306,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 96,\n            advanceWidth: 1406,\n        },\n        U: {\n            x_min: 70,\n            x_max: 1452,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 70,\n            advanceWidth: 1522,\n        },\n        V: {\n            x_min: 65,\n            x_max: 1443,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1508,\n        },\n        W: {\n            x_min: 72,\n            x_max: 2057,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 72,\n            advanceWidth: 2129,\n        },\n        X: {\n            x_min: 80,\n            x_max: 1449,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 80,\n            advanceWidth: 1529,\n        },\n        Y: {\n            x_min: 65,\n            x_max: 1396,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1461,\n        },\n        Z: {\n            x_min: 90,\n            x_max: 1107,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 90,\n            advanceWidth: 1197,\n        },\n        '[': {\n            x_min: 157,\n            x_max: 541,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 157,\n            advanceWidth: 573,\n        },\n        '\\\\': {\n            x_min: 36,\n            x_max: 830,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 36,\n            advanceWidth: 841,\n        },\n        ']': {\n            x_min: 23,\n            x_max: 408,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 23,\n            advanceWidth: 552,\n        },\n        '^': {\n            x_min: 71,\n            x_max: 802,\n            y_min: 729,\n            y_max: 1456,\n            ha: 727,\n            leftSideBearing: 71,\n            advanceWidth: 864,\n        },\n        _: {\n            x_min: 119,\n            x_max: 1041,\n            y_min: -154,\n            y_max: 0,\n            ha: 154,\n            leftSideBearing: 119,\n            advanceWidth: 1168,\n        },\n        '`': {\n            x_min: 40,\n            x_max: 456,\n            y_min: 1288,\n            y_max: 1560,\n            ha: 272,\n            leftSideBearing: 40,\n            advanceWidth: 496,\n        },\n        a: {\n            x_min: 79,\n            x_max: 1053,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 79,\n            advanceWidth: 1132,\n        },\n        b: {\n            x_min: -16,\n            x_max: 1071,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: -16,\n            advanceWidth: 1145,\n        },\n        c: {\n            x_min: 78,\n            x_max: 988,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1067,\n        },\n        d: {\n            x_min: 78,\n            x_max: 1156,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: 78,\n            advanceWidth: 1218,\n        },\n        e: {\n            x_min: 74,\n            x_max: 980,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 74,\n            advanceWidth: 1059,\n        },\n        f: {\n            x_min: 64,\n            x_max: 731,\n            y_min: 0,\n            y_max: 1581,\n            ha: 1581,\n            leftSideBearing: 64,\n            advanceWidth: 725,\n        },\n        g: {\n            x_min: 78,\n            x_max: 1133,\n            y_min: -437,\n            y_max: 1102,\n            ha: 1539,\n            leftSideBearing: 78,\n            advanceWidth: 1157,\n        },\n        h: {\n            x_min: 49,\n            x_max: 1255,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 49,\n            advanceWidth: 1315,\n        },\n        i: {\n            x_min: 67,\n            x_max: 590,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 67,\n            advanceWidth: 652,\n        },\n        j: {\n            x_min: -56,\n            x_max: 381,\n            y_min: -437,\n            y_max: 1560,\n            ha: 1997,\n            leftSideBearing: -56,\n            advanceWidth: 525,\n        },\n        k: {\n            x_min: 64,\n            x_max: 1248,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 1287,\n        },\n        l: {\n            x_min: 64,\n            x_max: 587,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 653,\n        },\n        m: {\n            x_min: 74,\n            x_max: 1905,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1977,\n        },\n        n: {\n            x_min: 74,\n            x_max: 1278,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1343,\n        },\n        o: {\n            x_min: 78,\n            x_max: 1046,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1124,\n        },\n        p: {\n            x_min: 34,\n            x_max: 1119,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 34,\n            advanceWidth: 1197,\n        },\n        q: {\n            x_min: 78,\n            x_max: 1135,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 78,\n            advanceWidth: 1139,\n        },\n        r: {\n            x_min: 72,\n            x_max: 808,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 72,\n            advanceWidth: 854,\n        },\n        s: {\n            x_min: 104,\n            x_max: 933,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 104,\n            advanceWidth: 1022,\n        },\n        t: {\n            x_min: 24,\n            x_max: 678,\n            y_min: -17,\n            y_max: 1343,\n            ha: 1360,\n            leftSideBearing: 24,\n            advanceWidth: 730,\n        },\n        u: {\n            x_min: 52,\n            x_max: 1181,\n            y_min: -21,\n            y_max: 1082,\n            ha: 1103,\n            leftSideBearing: 52,\n            advanceWidth: 1245,\n        },\n        v: {\n            x_min: 26,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 26,\n            advanceWidth: 1206,\n        },\n        w: {\n            x_min: 52,\n            x_max: 1777,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 52,\n            advanceWidth: 1823,\n        },\n        x: {\n            x_min: 42,\n            x_max: 1163,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 42,\n            advanceWidth: 1203,\n        },\n        y: {\n            x_min: 24,\n            x_max: 1172,\n            y_min: -437,\n            y_max: 1082,\n            ha: 1519,\n            leftSideBearing: 24,\n            advanceWidth: 1192,\n        },\n        z: {\n            x_min: 88,\n            x_max: 960,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 88,\n            advanceWidth: 1032,\n        },\n        '{': {\n            x_min: 63,\n            x_max: 671,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 63,\n            advanceWidth: 701,\n        },\n        '|': {\n            x_min: 150,\n            x_max: 307,\n            y_min: -270,\n            y_max: 1456,\n            ha: 1726,\n            leftSideBearing: 150,\n            advanceWidth: 451,\n        },\n        '}': {\n            x_min: 27,\n            x_max: 635,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 27,\n            advanceWidth: 701,\n        },\n        '~': {\n            x_min: 121,\n            x_max: 1257,\n            y_min: 401,\n            y_max: 803,\n            ha: 402,\n            leftSideBearing: 121,\n            advanceWidth: 1386,\n        },\n    },\n    fontFamily: 'Roboto Slab',\n    resolution: 2048,\n    generatedOn: '2020-06-15T19:12:58.120Z',\n};\n", "export const SansFontBold = {\n    glyphs: {\n        '0': {\n            x_min: 86,\n            x_max: 1038,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        '1': {\n            x_min: 162,\n            x_max: 806,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 162,\n            advanceWidth: 1139,\n        },\n        '2': {\n            x_min: 51,\n            x_max: 1036,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 51,\n            advanceWidth: 1139,\n        },\n        '3': {\n            x_min: 77,\n            x_max: 1051,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 77,\n            advanceWidth: 1139,\n        },\n        '4': {\n            x_min: 38,\n            x_max: 1092,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 38,\n            advanceWidth: 1139,\n        },\n        '5': {\n            x_min: 91,\n            x_max: 1077,\n            y_min: -25,\n            y_max: 1446,\n            ha: 1471,\n            leftSideBearing: 91,\n            advanceWidth: 1139,\n        },\n        '6': {\n            x_min: 87,\n            x_max: 1066,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 87,\n            advanceWidth: 1139,\n        },\n        '7': {\n            x_min: 87,\n            x_max: 1048,\n            y_min: 0,\n            y_max: 1446,\n            ha: 1446,\n            leftSideBearing: 87,\n            advanceWidth: 1139,\n        },\n        '8': {\n            x_min: 83,\n            x_max: 1047,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 83,\n            advanceWidth: 1139,\n        },\n        '9': {\n            x_min: 65,\n            x_max: 1044,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 65,\n            advanceWidth: 1139,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        '!': {\n            x_min: 184,\n            x_max: 488,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 184,\n            advanceWidth: 682,\n        },\n        '\"': {\n            x_min: 112,\n            x_max: 869,\n            y_min: 945,\n            y_max: 1466,\n            ha: 521,\n            leftSideBearing: 112,\n            advanceWidth: 971,\n        },\n        '#': {\n            x_min: 18,\n            x_max: 1115,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 18,\n            advanceWidth: 1139,\n        },\n        $: {\n            x_min: 70,\n            x_max: 1048,\n            y_min: -205,\n            y_max: 1584,\n            ha: 1789,\n            leftSideBearing: 70,\n            advanceWidth: 1139,\n        },\n        '%': {\n            x_min: 89,\n            x_max: 1725,\n            y_min: -59,\n            y_max: 1491,\n            ha: 1550,\n            leftSideBearing: 89,\n            advanceWidth: 1821,\n        },\n        '&': {\n            x_min: 90,\n            x_max: 1446,\n            y_min: -38,\n            y_max: 1491,\n            ha: 1529,\n            leftSideBearing: 90,\n            advanceWidth: 1479,\n        },\n        \"'\": {\n            x_min: 92,\n            x_max: 398,\n            y_min: 945,\n            y_max: 1466,\n            ha: 521,\n            leftSideBearing: 92,\n            advanceWidth: 487,\n        },\n        '(': {\n            x_min: 107,\n            x_max: 616,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 107,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 67,\n            x_max: 576,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 67,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 28,\n            x_max: 753,\n            y_min: 792,\n            y_max: 1491,\n            ha: 699,\n            leftSideBearing: 28,\n            advanceWidth: 797,\n        },\n        '+': {\n            x_min: 85,\n            x_max: 1110,\n            y_min: 211,\n            y_max: 1236,\n            ha: 1025,\n            leftSideBearing: 85,\n            advanceWidth: 1196,\n        },\n        ',': {\n            x_min: 117,\n            x_max: 421,\n            y_min: -327,\n            y_max: 281,\n            ha: 608,\n            leftSideBearing: 117,\n            advanceWidth: 569,\n        },\n        '-': {\n            x_min: 115,\n            x_max: 667,\n            y_min: 391,\n            y_max: 672,\n            ha: 281,\n            leftSideBearing: 115,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 281,\n            ha: 281,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        '/': {\n            x_min: -3,\n            x_max: 571,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: -3,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 201,\n            x_max: 482,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 201,\n            advanceWidth: 682,\n        },\n        ';': {\n            x_min: 170,\n            x_max: 474,\n            y_min: -327,\n            y_max: 1062,\n            ha: 1389,\n            leftSideBearing: 170,\n            advanceWidth: 682,\n        },\n        '<': {\n            x_min: 95,\n            x_max: 1100,\n            y_min: 167,\n            y_max: 1281,\n            ha: 1114,\n            leftSideBearing: 95,\n            advanceWidth: 1196,\n        },\n        '=': {\n            x_min: 85,\n            x_max: 1110,\n            y_min: 372,\n            y_max: 1074,\n            ha: 702,\n            leftSideBearing: 85,\n            advanceWidth: 1196,\n        },\n        '>': {\n            x_min: 95,\n            x_max: 1101,\n            y_min: 166,\n            y_max: 1279,\n            ha: 1113,\n            leftSideBearing: 95,\n            advanceWidth: 1196,\n        },\n        '?': {\n            x_min: 106,\n            x_max: 1158,\n            y_min: 0,\n            y_max: 1481,\n            ha: 1481,\n            leftSideBearing: 106,\n            advanceWidth: 1251,\n        },\n        '@': {\n            x_min: 61,\n            x_max: 1990,\n            y_min: -431,\n            y_max: 1492,\n            ha: 1923,\n            leftSideBearing: 61,\n            advanceWidth: 1997,\n        },\n        A: {\n            x_min: 0,\n            x_max: 1471,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 0,\n            advanceWidth: 1479,\n        },\n        B: {\n            x_min: 150,\n            x_max: 1378,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        C: {\n            x_min: 97,\n            x_max: 1374,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 97,\n            advanceWidth: 1479,\n        },\n        D: {\n            x_min: 148,\n            x_max: 1377,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 148,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 149,\n            x_max: 1264,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 149,\n            advanceWidth: 1366,\n        },\n        F: {\n            x_min: 151,\n            x_max: 1156,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 151,\n            advanceWidth: 1251,\n        },\n        G: {\n            x_min: 98,\n            x_max: 1469,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 98,\n            advanceWidth: 1593,\n        },\n        H: {\n            x_min: 150,\n            x_max: 1322,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 140,\n            x_max: 436,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 140,\n            advanceWidth: 569,\n        },\n        J: {\n            x_min: 35,\n            x_max: 973,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 35,\n            advanceWidth: 1139,\n        },\n        K: {\n            x_min: 153,\n            x_max: 1475,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 153,\n            advanceWidth: 1479,\n        },\n        L: {\n            x_min: 157,\n            x_max: 1189,\n            y_min: 0,\n            y_max: 1454,\n            ha: 1454,\n            leftSideBearing: 157,\n            advanceWidth: 1251,\n        },\n        M: {\n            x_min: 145,\n            x_max: 1561,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 145,\n            advanceWidth: 1706,\n        },\n        N: {\n            x_min: 152,\n            x_max: 1315,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 152,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 89,\n            x_max: 1511,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 89,\n            advanceWidth: 1593,\n        },\n        P: {\n            x_min: 149,\n            x_max: 1272,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 149,\n            advanceWidth: 1366,\n        },\n        Q: {\n            x_min: 89,\n            x_max: 1566,\n            y_min: -147,\n            y_max: 1491,\n            ha: 1638,\n            leftSideBearing: 89,\n            advanceWidth: 1593,\n        },\n        R: {\n            x_min: 150,\n            x_max: 1468,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        S: {\n            x_min: 74,\n            x_max: 1266,\n            y_min: -26,\n            y_max: 1491,\n            ha: 1517,\n            leftSideBearing: 74,\n            advanceWidth: 1366,\n        },\n        T: {\n            x_min: 44,\n            x_max: 1209,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 44,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 147,\n            x_max: 1316,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 147,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: -1,\n            x_max: 1364,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -1,\n            advanceWidth: 1366,\n        },\n        W: {\n            x_min: 7,\n            x_max: 1931,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 7,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 0,\n            x_max: 1363,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 0,\n            advanceWidth: 1366,\n        },\n        Y: {\n            x_min: -3,\n            x_max: 1368,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -3,\n            advanceWidth: 1366,\n        },\n        Z: {\n            x_min: 22,\n            x_max: 1213,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 22,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 146,\n            x_max: 644,\n            y_min: -413,\n            y_max: 1466,\n            ha: 1879,\n            leftSideBearing: 146,\n            advanceWidth: 682,\n        },\n        '\\\\': {\n            x_min: -3,\n            x_max: 571,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: -3,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 38,\n            x_max: 536,\n            y_min: -413,\n            y_max: 1466,\n            ha: 1879,\n            leftSideBearing: 38,\n            advanceWidth: 682,\n        },\n        '^': {\n            x_min: 115,\n            x_max: 1080,\n            y_min: 692,\n            y_max: 1491,\n            ha: 799,\n            leftSideBearing: 115,\n            advanceWidth: 1196,\n        },\n        _: {\n            x_min: -19,\n            x_max: 1149,\n            y_min: -405,\n            y_max: -223,\n            ha: 182,\n            leftSideBearing: -19,\n            advanceWidth: 1139,\n        },\n        '`': {\n            x_min: 42,\n            x_max: 495,\n            y_min: 1192,\n            y_max: 1491,\n            ha: 299,\n            leftSideBearing: 42,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 73,\n            x_max: 1070,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 73,\n            advanceWidth: 1139,\n        },\n        b: {\n            x_min: 135,\n            x_max: 1172,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 135,\n            advanceWidth: 1251,\n        },\n        c: {\n            x_min: 85,\n            x_max: 1087,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        d: {\n            x_min: 84,\n            x_max: 1121,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 84,\n            advanceWidth: 1251,\n        },\n        e: {\n            x_min: 65,\n            x_max: 1057.2517482517483,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 65,\n            advanceWidth: 1139,\n        },\n        f: {\n            x_min: 24,\n            x_max: 742,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 24,\n            advanceWidth: 682,\n        },\n        g: {\n            x_min: 84,\n            x_max: 1120,\n            y_min: -431,\n            y_max: 1086,\n            ha: 1517,\n            leftSideBearing: 84,\n            advanceWidth: 1251,\n        },\n        h: {\n            x_min: 146,\n            x_max: 1113,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 146,\n            advanceWidth: 1251,\n        },\n        i: {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        j: {\n            x_min: -94,\n            x_max: 422,\n            y_min: -431,\n            y_max: 1466,\n            ha: 1897,\n            leftSideBearing: -94,\n            advanceWidth: 569,\n        },\n        k: {\n            x_min: 137,\n            x_max: 1119,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 137,\n            advanceWidth: 1139,\n        },\n        l: {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        m: {\n            x_min: 126,\n            x_max: 1688,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 126,\n            advanceWidth: 1821,\n        },\n        n: {\n            x_min: 145,\n            x_max: 1113,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 145,\n            advanceWidth: 1251,\n        },\n        o: {\n            x_min: 82,\n            x_max: 1178,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 82,\n            advanceWidth: 1251,\n        },\n        p: {\n            x_min: 139,\n            x_max: 1175,\n            y_min: -404,\n            y_max: 1086,\n            ha: 1490,\n            leftSideBearing: 139,\n            advanceWidth: 1251,\n        },\n        q: {\n            x_min: 91,\n            x_max: 1122,\n            y_min: -404,\n            y_max: 1086,\n            ha: 1490,\n            leftSideBearing: 91,\n            advanceWidth: 1251,\n        },\n        r: {\n            x_min: 135,\n            x_max: 823,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 797,\n        },\n        s: {\n            x_min: 48,\n            x_max: 1040,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 48,\n            advanceWidth: 1139,\n        },\n        t: {\n            x_min: 31,\n            x_max: 657,\n            y_min: -24,\n            y_max: 1437,\n            ha: 1461,\n            leftSideBearing: 31,\n            advanceWidth: 682,\n        },\n        u: {\n            x_min: 141,\n            x_max: 1107,\n            y_min: -24,\n            y_max: 1062,\n            ha: 1086,\n            leftSideBearing: 141,\n            advanceWidth: 1251,\n        },\n        v: {\n            x_min: 11,\n            x_max: 1114,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 11,\n            advanceWidth: 1139,\n        },\n        w: {\n            x_min: 9,\n            x_max: 1592,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 9,\n            advanceWidth: 1593,\n        },\n        x: {\n            x_min: 12,\n            x_max: 1120,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 12,\n            advanceWidth: 1139,\n        },\n        y: {\n            x_min: 14,\n            x_max: 1106,\n            y_min: -431,\n            y_max: 1062,\n            ha: 1493,\n            leftSideBearing: 14,\n            advanceWidth: 1139,\n        },\n        z: {\n            x_min: 34,\n            x_max: 982,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 34,\n            advanceWidth: 1024,\n        },\n        '{': {\n            x_min: 60,\n            x_max: 744,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 60,\n            advanceWidth: 797,\n        },\n        '|': {\n            x_min: 176,\n            x_max: 399,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 176,\n            advanceWidth: 573,\n        },\n        '}': {\n            x_min: 45,\n            x_max: 729,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 45,\n            advanceWidth: 797,\n        },\n        '~': {\n            x_min: 67,\n            x_max: 1129,\n            y_min: 519,\n            y_max: 924,\n            ha: 405,\n            leftSideBearing: 67,\n            advanceWidth: 1196,\n        },\n    },\n    fontFamily: 'Arial',\n    resolution: 2048,\n    generatedOn: '2022-11-04T20:05:21.000Z',\n};\n", "export const SansFont = {\n    smufl: false,\n    name: 'SANS',\n    spacing: 50,\n    Description: 'Built-in sans-serif font',\n    bold: true,\n    italic: true,\n    monospaced: false,\n    serifs: false,\n    glyphs: {\n        '0': {\n            x_min: 85,\n            x_max: 1041,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        '1': {\n            x_min: 223,\n            x_max: 763,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 223,\n            advanceWidth: 1139,\n        },\n        '2': {\n            x_min: 61.840001123045234,\n            x_max: 1031,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 61,\n            advanceWidth: 1139,\n        },\n        '3': {\n            x_min: 86,\n            x_max: 1046,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        '4': {\n            x_min: 26,\n            x_max: 1040,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 26,\n            advanceWidth: 1139,\n        },\n        '5': {\n            x_min: 85,\n            x_max: 1057,\n            y_min: -25,\n            y_max: 1446,\n            ha: 1471,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        '6': {\n            x_min: 77,\n            x_max: 1045,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 77,\n            advanceWidth: 1139,\n        },\n        '7': {\n            x_min: 97,\n            x_max: 1046,\n            y_min: 0,\n            y_max: 1447,\n            ha: 1447,\n            leftSideBearing: 97,\n            advanceWidth: 1139,\n        },\n        '8': {\n            x_min: 83,\n            x_max: 1049,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 83,\n            advanceWidth: 1139,\n        },\n        '9': {\n            x_min: 85,\n            x_max: 1049,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        '!': {\n            x_min: 176,\n            x_max: 399,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 176,\n            advanceWidth: 569,\n        },\n        '\"': {\n            x_min: 94,\n            x_max: 631,\n            y_min: 947,\n            y_max: 1466,\n            ha: 519,\n            leftSideBearing: 94,\n            advanceWidth: 727,\n        },\n        '#': {\n            x_min: 21,\n            x_max: 1113,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 21,\n            advanceWidth: 1139,\n        },\n        $: {\n            x_min: 73,\n            x_max: 1043,\n            y_min: -211,\n            y_max: 1601,\n            ha: 1812,\n            leftSideBearing: 73,\n            advanceWidth: 1139,\n        },\n        '%': {\n            x_min: 119,\n            x_max: 1695,\n            y_min: -54,\n            y_max: 1491,\n            ha: 1545,\n            leftSideBearing: 119,\n            advanceWidth: 1821,\n        },\n        '&': {\n            x_min: 88,\n            x_max: 1319,\n            y_min: -34,\n            y_max: 1491,\n            ha: 1525,\n            leftSideBearing: 88,\n            advanceWidth: 1366,\n        },\n        \"'\": {\n            x_min: 90,\n            x_max: 295,\n            y_min: 947,\n            y_max: 1466,\n            ha: 519,\n            leftSideBearing: 90,\n            advanceWidth: 391,\n        },\n        '(': {\n            x_min: 124,\n            x_max: 608,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 124,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 124,\n            x_max: 608,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 124,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 64,\n            x_max: 725,\n            y_min: 867,\n            y_max: 1491,\n            ha: 624,\n            leftSideBearing: 64,\n            advanceWidth: 797,\n        },\n        '+': {\n            x_min: 114,\n            x_max: 1082,\n            y_min: 237,\n            y_max: 1206,\n            ha: 969,\n            leftSideBearing: 114,\n            advanceWidth: 1196,\n        },\n        ',': {\n            x_min: 170,\n            x_max: 387,\n            y_min: -290,\n            y_max: 205,\n            ha: 495,\n            leftSideBearing: 170,\n            advanceWidth: 569,\n        },\n        '-': {\n            x_min: 65,\n            x_max: 618,\n            y_min: 440,\n            y_max: 621,\n            ha: 181,\n            leftSideBearing: 65,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 186,\n            x_max: 391,\n            y_min: 0,\n            y_max: 205,\n            ha: 205,\n            leftSideBearing: 186,\n            advanceWidth: 569,\n        },\n        '/': {\n            x_min: 0,\n            x_max: 569,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 185,\n            x_max: 390,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 185,\n            advanceWidth: 569,\n        },\n        ';': {\n            x_min: 170,\n            x_max: 387,\n            y_min: -290,\n            y_max: 1062,\n            ha: 1352,\n            leftSideBearing: 170,\n            advanceWidth: 569,\n        },\n        '<': {\n            x_min: 112,\n            x_max: 1083,\n            y_min: 226,\n            y_max: 1219,\n            ha: 993,\n            leftSideBearing: 112,\n            advanceWidth: 1196,\n        },\n        '=': {\n            x_min: 114,\n            x_max: 1082,\n            y_min: 417,\n            y_max: 1030,\n            ha: 613,\n            leftSideBearing: 114,\n            advanceWidth: 1196,\n        },\n        '>': {\n            x_min: 112,\n            x_max: 1083,\n            y_min: 226,\n            y_max: 1219,\n            ha: 993,\n            leftSideBearing: 112,\n            advanceWidth: 1196,\n        },\n        '?': {\n            x_min: 90,\n            x_max: 1036,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 90,\n            advanceWidth: 1139,\n        },\n        '@': {\n            x_min: 111,\n            x_max: 2005,\n            y_min: -431,\n            y_max: 1493,\n            ha: 1924,\n            leftSideBearing: 111,\n            advanceWidth: 2079,\n        },\n        A: {\n            x_min: -3,\n            x_max: 1369,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -3,\n            advanceWidth: 1366,\n        },\n        B: {\n            x_min: 150,\n            x_max: 1257,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1366,\n        },\n        C: {\n            x_min: 102,\n            x_max: 1398,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 102,\n            advanceWidth: 1479,\n        },\n        D: {\n            x_min: 158,\n            x_max: 1370,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 158,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 162,\n            x_max: 1256,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 162,\n            advanceWidth: 1366,\n        },\n        F: {\n            x_min: 168,\n            x_max: 1157,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 168,\n            advanceWidth: 1251,\n        },\n        G: {\n            x_min: 109,\n            x_max: 1465,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 109,\n            advanceWidth: 1593,\n        },\n        H: {\n            x_min: 164,\n            x_max: 1314,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 164,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 191,\n            x_max: 385,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 191,\n            advanceWidth: 569,\n        },\n        J: {\n            x_min: 58.84976474807333,\n            x_max: 865,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 58,\n            advanceWidth: 1024,\n        },\n        K: {\n            x_min: 150,\n            x_max: 1362,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1366,\n        },\n        L: {\n            x_min: 150,\n            x_max: 1066,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1139,\n        },\n        M: {\n            x_min: 152,\n            x_max: 1551,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 152,\n            advanceWidth: 1706,\n        },\n        N: {\n            x_min: 156,\n            x_max: 1311,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 156,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 99,\n            x_max: 1501,\n            y_min: -25,\n            y_max: 1492,\n            ha: 1517,\n            leftSideBearing: 99,\n            advanceWidth: 1593,\n        },\n        P: {\n            x_min: 158,\n            x_max: 1277,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 158,\n            advanceWidth: 1366,\n        },\n        Q: {\n            x_min: 88,\n            x_max: 1518,\n            y_min: -114,\n            y_max: 1492,\n            ha: 1606,\n            leftSideBearing: 88,\n            advanceWidth: 1593,\n        },\n        R: {\n            x_min: 161,\n            x_max: 1453,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 161,\n            advanceWidth: 1479,\n        },\n        S: {\n            x_min: 92,\n            x_max: 1259,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 92,\n            advanceWidth: 1366,\n        },\n        T: {\n            x_min: 48,\n            x_max: 1210,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 48,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 161,\n            x_max: 1314,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 161,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: 9,\n            x_max: 1350,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 9,\n            advanceWidth: 1366,\n        },\n        W: {\n            x_min: 25,\n            x_max: 1910,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 25,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 9,\n            x_max: 1353,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 9,\n            advanceWidth: 1366,\n        },\n        Y: {\n            x_min: 6,\n            x_max: 1350,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 6,\n            advanceWidth: 1366,\n        },\n        Z: {\n            x_min: 41,\n            x_max: 1200,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 41,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 139,\n            x_max: 536,\n            y_min: -407,\n            y_max: 1466,\n            ha: 1873,\n            leftSideBearing: 139,\n            advanceWidth: 569,\n        },\n        '\\\\': {\n            x_min: 0,\n            x_max: 569,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 39,\n            x_max: 436,\n            y_min: -407,\n            y_max: 1466,\n            ha: 1873,\n            leftSideBearing: 39,\n            advanceWidth: 569,\n        },\n        '^': {\n            x_min: 54,\n            x_max: 907,\n            y_min: 690,\n            y_max: 1491,\n            ha: 801,\n            leftSideBearing: 54,\n            advanceWidth: 961,\n        },\n        _: {\n            x_min: -31,\n            x_max: 1162,\n            y_min: -407,\n            y_max: -277,\n            ha: 130,\n            leftSideBearing: -31,\n            advanceWidth: 1139,\n        },\n        '`': {\n            x_min: 89,\n            x_max: 465,\n            y_min: 1194,\n            y_max: 1474,\n            ha: 280,\n            leftSideBearing: 89,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 74,\n            x_max: 1052,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 74,\n            advanceWidth: 1139,\n        },\n        b: {\n            x_min: 134,\n            x_max: 1055,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 134,\n            advanceWidth: 1139,\n        },\n        c: {\n            x_min: 80,\n            x_max: 1005,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 80,\n            advanceWidth: 1024,\n        },\n        d: {\n            x_min: 70,\n            x_max: 991,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 70,\n            advanceWidth: 1139,\n        },\n        e: {\n            x_min: 75,\n            x_max: 1054,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 75,\n            advanceWidth: 1139,\n        },\n        f: {\n            x_min: 19,\n            x_max: 640,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 19,\n            advanceWidth: 569,\n        },\n        g: {\n            x_min: 66,\n            x_max: 1002,\n            y_min: -431,\n            y_max: 1086,\n            ha: 1517,\n            leftSideBearing: 66,\n            advanceWidth: 1139,\n        },\n        h: {\n            x_min: 135,\n            x_max: 1000,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        i: {\n            x_min: 136,\n            x_max: 316,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 136,\n            advanceWidth: 455,\n        },\n        j: {\n            x_min: -94,\n            x_max: 314,\n            y_min: -431,\n            y_max: 1466,\n            ha: 1897,\n            leftSideBearing: -94,\n            advanceWidth: 455,\n        },\n        k: {\n            x_min: 136,\n            x_max: 1016,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 136,\n            advanceWidth: 1024,\n        },\n        l: {\n            x_min: 131,\n            x_max: 311,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 131,\n            advanceWidth: 455,\n        },\n        m: {\n            x_min: 135,\n            x_max: 1574,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 1706,\n        },\n        n: {\n            x_min: 135,\n            x_max: 998,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        o: {\n            x_min: 68,\n            x_max: 1063,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 68,\n            advanceWidth: 1139,\n        },\n        p: {\n            x_min: 135,\n            x_max: 1057,\n            y_min: -407,\n            y_max: 1086,\n            ha: 1493,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        q: {\n            x_min: 72,\n            x_max: 992,\n            y_min: -407,\n            y_max: 1086,\n            ha: 1493,\n            leftSideBearing: 72,\n            advanceWidth: 1139,\n        },\n        r: {\n            x_min: 133,\n            x_max: 710,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 133,\n            advanceWidth: 682,\n        },\n        s: {\n            x_min: 63,\n            x_max: 945,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 63,\n            advanceWidth: 1024,\n        },\n        t: {\n            x_min: 36,\n            x_max: 554,\n            y_min: -14,\n            y_max: 1433,\n            ha: 1447,\n            leftSideBearing: 36,\n            advanceWidth: 569,\n        },\n        u: {\n            x_min: 131,\n            x_max: 992,\n            y_min: -24,\n            y_max: 1062,\n            ha: 1086,\n            leftSideBearing: 131,\n            advanceWidth: 1139,\n        },\n        v: {\n            x_min: 26,\n            x_max: 1000,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 26,\n            advanceWidth: 1024,\n        },\n        w: {\n            x_min: 6,\n            x_max: 1463,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 6,\n            advanceWidth: 1479,\n        },\n        x: {\n            x_min: 15,\n            x_max: 1009,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 15,\n            advanceWidth: 1024,\n        },\n        y: {\n            x_min: 33,\n            x_max: 1006,\n            y_min: -431,\n            y_max: 1062,\n            ha: 1493,\n            leftSideBearing: 33,\n            advanceWidth: 1024,\n        },\n        z: {\n            x_min: 40,\n            x_max: 980,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 40,\n            advanceWidth: 1024,\n        },\n        '{': {\n            x_min: 57,\n            x_max: 636,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 57,\n            advanceWidth: 684,\n        },\n        '|': {\n            x_min: 188,\n            x_max: 345,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 188,\n            advanceWidth: 532,\n        },\n        '}': {\n            x_min: 47,\n            x_max: 626,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 47,\n            advanceWidth: 684,\n        },\n        '~': {\n            x_min: 87,\n            x_max: 1110,\n            y_min: 557,\n            y_max: 885,\n            ha: 328,\n            leftSideBearing: 87,\n            advanceWidth: 1196,\n        },\n    },\n    fontFamily: 'sans-serif',\n    resolution: 2048,\n    generatedOn: '2020-10-18T18:48:11.823Z',\n};\n", "export const SerifFont = {\n    smufl: false,\n    name: 'SERIF',\n    spacing: 50,\n    Description: 'Built-in serif font',\n    bold: true,\n    italic: true,\n    monospaced: false,\n    serifs: true,\n    glyphs: {\n        '0': {\n            x_min: 49,\n            x_max: 975,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 49,\n            advanceWidth: 1024,\n        },\n        '1': {\n            x_min: 227,\n            x_max: 811,\n            y_min: 0,\n            y_max: 1383,\n            ha: 1383,\n            leftSideBearing: 227,\n            advanceWidth: 1024,\n        },\n        '2': {\n            x_min: 61,\n            x_max: 965,\n            y_min: 0,\n            y_max: 1383,\n            ha: 1383,\n            leftSideBearing: 61,\n            advanceWidth: 1024,\n        },\n        '3': {\n            x_min: 88,\n            x_max: 883,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 88,\n            advanceWidth: 1024,\n        },\n        '4': {\n            x_min: 25,\n            x_max: 967,\n            y_min: 0,\n            y_max: 1384,\n            ha: 1384,\n            leftSideBearing: 25,\n            advanceWidth: 1024,\n        },\n        '5': {\n            x_min: 66,\n            x_max: 898,\n            y_min: -27,\n            y_max: 1409,\n            ha: 1436,\n            leftSideBearing: 66,\n            advanceWidth: 1024,\n        },\n        '6': {\n            x_min: 70,\n            x_max: 958,\n            y_min: -27,\n            y_max: 1401,\n            ha: 1428,\n            leftSideBearing: 70,\n            advanceWidth: 1024,\n        },\n        '7': {\n            x_min: 41,\n            x_max: 920,\n            y_min: -16,\n            y_max: 1356,\n            ha: 1372,\n            leftSideBearing: 41,\n            advanceWidth: 1024,\n        },\n        '8': {\n            x_min: 115,\n            x_max: 911,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 115,\n            advanceWidth: 1024,\n        },\n        '9': {\n            x_min: 61,\n            x_max: 940,\n            y_min: -41,\n            y_max: 1383,\n            ha: 1424,\n            leftSideBearing: 61,\n            advanceWidth: 1024,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 512,\n        },\n        '!': {\n            x_min: 266,\n            x_max: 488,\n            y_min: -22,\n            y_max: 1383,\n            ha: 1405,\n            leftSideBearing: 266,\n            advanceWidth: 682,\n        },\n        '\"': {\n            x_min: 157.2000021972655,\n            x_max: 678.2500021457677,\n            y_min: 881,\n            y_max: 1385,\n            ha: 504,\n            leftSideBearing: 157,\n            advanceWidth: 836,\n        },\n        '#': {\n            x_min: 10,\n            x_max: 1016,\n            y_min: -1,\n            y_max: 1356,\n            ha: 1357,\n            leftSideBearing: 10,\n            advanceWidth: 1024,\n        },\n        $: {\n            x_min: 90,\n            x_max: 936,\n            y_min: -180,\n            y_max: 1492,\n            ha: 1672,\n            leftSideBearing: 90,\n            advanceWidth: 1024,\n        },\n        '%': {\n            x_min: 125,\n            x_max: 1581,\n            y_min: -30,\n            y_max: 1388,\n            ha: 1418,\n            leftSideBearing: 125,\n            advanceWidth: 1706,\n        },\n        '&': {\n            x_min: 86,\n            x_max: 1536,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 86,\n            advanceWidth: 1593,\n        },\n        \"'\": {\n            x_min: 97.20000219726548,\n            x_max: 273.2500021457677,\n            y_min: 881,\n            y_max: 1385,\n            ha: 504,\n            leftSideBearing: 97,\n            advanceWidth: 369,\n        },\n        '(': {\n            x_min: 98,\n            x_max: 623,\n            y_min: -363,\n            y_max: 1383,\n            ha: 1746,\n            leftSideBearing: 98,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 59,\n            x_max: 584,\n            y_min: -363,\n            y_max: 1383,\n            ha: 1746,\n            leftSideBearing: 59,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 137.96078522291893,\n            x_max: 886.039214777081,\n            y_min: 543,\n            y_max: 1383,\n            ha: 840,\n            leftSideBearing: 137,\n            advanceWidth: 1024,\n        },\n        '+': {\n            x_min: 61,\n            x_max: 1093,\n            y_min: 2,\n            y_max: 1034,\n            ha: 1032,\n            leftSideBearing: 61,\n            advanceWidth: 1155,\n        },\n        ',': {\n            x_min: 115,\n            x_max: 399,\n            y_min: -291,\n            y_max: 208,\n            ha: 499,\n            leftSideBearing: 115,\n            advanceWidth: 512,\n        },\n        '-': {\n            x_min: 80,\n            x_max: 584,\n            y_min: 396,\n            y_max: 525,\n            ha: 129,\n            leftSideBearing: 80,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 143,\n            x_max: 371,\n            y_min: -22,\n            y_max: 205,\n            ha: 227,\n            leftSideBearing: 143,\n            advanceWidth: 512,\n        },\n        '/': {\n            x_min: -17,\n            x_max: 586,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: -17,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 166,\n            x_max: 394,\n            y_min: -22,\n            y_max: 943,\n            ha: 965,\n            leftSideBearing: 166,\n            advanceWidth: 569,\n        },\n        ';': {\n            x_min: 164,\n            x_max: 448,\n            y_min: -290,\n            y_max: 943,\n            ha: 1233,\n            leftSideBearing: 164,\n            advanceWidth: 569,\n        },\n        '<': {\n            x_min: 57,\n            x_max: 1098,\n            y_min: -15,\n            y_max: 1051,\n            ha: 1066,\n            leftSideBearing: 57,\n            advanceWidth: 1155,\n        },\n        '=': {\n            x_min: 61,\n            x_max: 1093,\n            y_min: 246,\n            y_max: 791,\n            ha: 545,\n            leftSideBearing: 61,\n            advanceWidth: 1155,\n        },\n        '>': {\n            x_min: 57,\n            x_max: 1098,\n            y_min: -15,\n            y_max: 1051,\n            ha: 1066,\n            leftSideBearing: 57,\n            advanceWidth: 1155,\n        },\n        '?': {\n            x_min: 139,\n            x_max: 848,\n            y_min: -15,\n            y_max: 1383,\n            ha: 1398,\n            leftSideBearing: 139,\n            advanceWidth: 909,\n        },\n        '@': {\n            x_min: 238,\n            x_max: 1657,\n            y_min: -29,\n            y_max: 1386,\n            ha: 1415,\n            leftSideBearing: 238,\n            advanceWidth: 1886,\n        },\n        A: {\n            x_min: 31,\n            x_max: 1445,\n            y_min: 0,\n            y_max: 1380,\n            ha: 1380,\n            leftSideBearing: 31,\n            advanceWidth: 1479,\n        },\n        B: {\n            x_min: 35,\n            x_max: 1214,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1366,\n        },\n        C: {\n            x_min: 57,\n            x_max: 1296,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 57,\n            advanceWidth: 1366,\n        },\n        D: {\n            x_min: 33,\n            x_max: 1403,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 33,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 25,\n            x_max: 1222,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1251,\n        },\n        F: {\n            x_min: 25,\n            x_max: 1119,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1139,\n        },\n        G: {\n            x_min: 66,\n            x_max: 1452,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 66,\n            advanceWidth: 1479,\n        },\n        H: {\n            x_min: 39,\n            x_max: 1438,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 39,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 37,\n            x_max: 642,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 37,\n            advanceWidth: 682,\n        },\n        J: {\n            x_min: 20,\n            x_max: 758,\n            y_min: -28,\n            y_max: 1356,\n            ha: 1384,\n            leftSideBearing: 20,\n            advanceWidth: 797,\n        },\n        K: {\n            x_min: 70,\n            x_max: 1479,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        L: {\n            x_min: 25,\n            x_max: 1224,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1251,\n        },\n        M: {\n            x_min: 25,\n            x_max: 1768,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1821,\n        },\n        N: {\n            x_min: 25,\n            x_max: 1450,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 25,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 70,\n            x_max: 1409,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        P: {\n            x_min: 33,\n            x_max: 1110,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 33,\n            advanceWidth: 1139,\n        },\n        Q: {\n            x_min: 70,\n            x_max: 1435,\n            y_min: -364.28571588721996,\n            y_max: 1383,\n            ha: 1747.28571588722,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        R: {\n            x_min: 35,\n            x_max: 1347,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1366,\n        },\n        S: {\n            x_min: 86,\n            x_max: 1006,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        T: {\n            x_min: 35,\n            x_max: 1214,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 29,\n            x_max: 1444,\n            y_min: -28,\n            y_max: 1356,\n            ha: 1384,\n            leftSideBearing: 29,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: 33,\n            x_max: 1428,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 33,\n            advanceWidth: 1479,\n        },\n        W: {\n            x_min: 10,\n            x_max: 1906,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 10,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 20,\n            x_max: 1449,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 20,\n            advanceWidth: 1479,\n        },\n        Y: {\n            x_min: 45,\n            x_max: 1441,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 45,\n            advanceWidth: 1479,\n        },\n        Z: {\n            x_min: 18,\n            x_max: 1222,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 18,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 180,\n            x_max: 612,\n            y_min: -319,\n            y_max: 1355,\n            ha: 1674,\n            leftSideBearing: 180,\n            advanceWidth: 682,\n        },\n        '\\\\': {\n            x_min: -17,\n            x_max: 586,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: -17,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 70,\n            x_max: 502,\n            y_min: -319,\n            y_max: 1355,\n            ha: 1674,\n            leftSideBearing: 70,\n            advanceWidth: 682,\n        },\n        '^': {\n            x_min: 49,\n            x_max: 914,\n            y_min: 608,\n            y_max: 1355,\n            ha: 747,\n            leftSideBearing: 49,\n            advanceWidth: 961,\n        },\n        _: {\n            x_min: 0,\n            x_max: 1024,\n            y_min: -255,\n            y_max: -153,\n            ha: 102,\n            leftSideBearing: 0,\n            advanceWidth: 1024,\n        },\n        '`': {\n            x_min: 39,\n            x_max: 499,\n            y_min: 1037,\n            y_max: 1392.509803639748,\n            ha: 355.50980363974804,\n            leftSideBearing: 39,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 76,\n            x_max: 905,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 76,\n            advanceWidth: 909,\n        },\n        b: {\n            x_min: 6,\n            x_max: 958,\n            y_min: -20,\n            y_max: 1399,\n            ha: 1419,\n            leftSideBearing: 6,\n            advanceWidth: 1024,\n        },\n        c: {\n            x_min: 51,\n            x_max: 843,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 51,\n            advanceWidth: 909,\n        },\n        d: {\n            x_min: 55,\n            x_max: 1006,\n            y_min: -20,\n            y_max: 1399,\n            ha: 1419,\n            leftSideBearing: 55,\n            advanceWidth: 1024,\n        },\n        e: {\n            x_min: 51,\n            x_max: 868,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 51,\n            advanceWidth: 909,\n        },\n        f: {\n            x_min: 41,\n            x_max: 783,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 41,\n            advanceWidth: 682,\n        },\n        g: {\n            x_min: 57,\n            x_max: 963,\n            y_min: -446,\n            y_max: 942,\n            ha: 1388,\n            leftSideBearing: 57,\n            advanceWidth: 1024,\n        },\n        h: {\n            x_min: 18,\n            x_max: 997,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 18,\n            advanceWidth: 1024,\n        },\n        i: {\n            x_min: 33,\n            x_max: 516,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 33,\n            advanceWidth: 569,\n        },\n        j: {\n            x_min: -142,\n            x_max: 397,\n            y_min: -446,\n            y_max: 1399,\n            ha: 1845,\n            leftSideBearing: -142,\n            advanceWidth: 569,\n        },\n        k: {\n            x_min: 14,\n            x_max: 1029,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 14,\n            advanceWidth: 1024,\n        },\n        l: {\n            x_min: 39,\n            x_max: 523,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 39,\n            advanceWidth: 569,\n        },\n        m: {\n            x_min: 33,\n            x_max: 1587,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 33,\n            advanceWidth: 1593,\n        },\n        n: {\n            x_min: 33,\n            x_max: 993,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 33,\n            advanceWidth: 1024,\n        },\n        o: {\n            x_min: 59,\n            x_max: 963,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 59,\n            advanceWidth: 1024,\n        },\n        p: {\n            x_min: 10,\n            x_max: 964,\n            y_min: -443,\n            y_max: 944,\n            ha: 1387,\n            leftSideBearing: 10,\n            advanceWidth: 1024,\n        },\n        q: {\n            x_min: 49,\n            x_max: 999,\n            y_min: -443,\n            y_max: 942.0135137169275,\n            ha: 1385.0135137169275,\n            leftSideBearing: 49,\n            advanceWidth: 1024,\n        },\n        r: {\n            x_min: 10,\n            x_max: 685,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 10,\n            advanceWidth: 682,\n        },\n        s: {\n            x_min: 104,\n            x_max: 713,\n            y_min: -20,\n            y_max: 942.0263161804552,\n            ha: 962.0263161804552,\n            leftSideBearing: 104,\n            advanceWidth: 797,\n        },\n        t: {\n            x_min: 27,\n            x_max: 572,\n            y_min: -18,\n            y_max: 1186,\n            ha: 1204,\n            leftSideBearing: 27,\n            advanceWidth: 569,\n        },\n        u: {\n            x_min: 18,\n            x_max: 981,\n            y_min: -21,\n            y_max: 921,\n            ha: 942,\n            leftSideBearing: 18,\n            advanceWidth: 1024,\n        },\n        v: {\n            x_min: 39,\n            x_max: 976,\n            y_min: -28,\n            y_max: 921,\n            ha: 949,\n            leftSideBearing: 39,\n            advanceWidth: 1024,\n        },\n        w: {\n            x_min: 43,\n            x_max: 1423,\n            y_min: -28,\n            y_max: 921,\n            ha: 949,\n            leftSideBearing: 43,\n            advanceWidth: 1479,\n        },\n        x: {\n            x_min: 35,\n            x_max: 989,\n            y_min: 0,\n            y_max: 921,\n            ha: 921,\n            leftSideBearing: 35,\n            advanceWidth: 1024,\n        },\n        y: {\n            x_min: 29,\n            x_max: 976,\n            y_min: -445,\n            y_max: 921,\n            ha: 1366,\n            leftSideBearing: 29,\n            advanceWidth: 1024,\n        },\n        z: {\n            x_min: 55,\n            x_max: 855,\n            y_min: 0,\n            y_max: 921,\n            ha: 921,\n            leftSideBearing: 55,\n            advanceWidth: 909,\n        },\n        '{': {\n            x_min: 205,\n            x_max: 717,\n            y_min: -377,\n            y_max: 1397,\n            ha: 1774,\n            leftSideBearing: 205,\n            advanceWidth: 983,\n        },\n        '|': {\n            x_min: 137,\n            x_max: 273,\n            y_min: -512,\n            y_max: 1535,\n            ha: 2047,\n            leftSideBearing: 137,\n            advanceWidth: 410,\n        },\n        '}': {\n            x_min: 266,\n            x_max: 778,\n            y_min: -377,\n            y_max: 1397,\n            ha: 1774,\n            leftSideBearing: 266,\n            advanceWidth: 983,\n        },\n        '~': {\n            x_min: 82,\n            x_max: 1028,\n            y_min: 380,\n            y_max: 666,\n            ha: 286,\n            leftSideBearing: 82,\n            advanceWidth: 1108,\n        },\n    },\n    fontFamily: 'serif',\n    resolution: 2048,\n    generatedOn: '2020-10-18T19:03:12.514Z',\n};\n", "import { Font } from '../font.js';\nimport { TextFormatter } from '../textformatter.js';\nimport { PetalumaScriptFont } from './petalumascript_glyphs.js';\nimport { RobotoSlabFont } from './robotoslab_glyphs.js';\nimport { SansFontBold } from './sans_bold_text_metrics.js';\nimport { SansFont } from './sans_text_metrics.js';\nimport { SerifFont } from './serif_text_metrics.js';\nexport function loadTextFonts() {\n    {\n        const fontData = SansFontBold;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: true,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Generic SANS font',\n        });\n    }\n    {\n        const fontData = SansFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Generic SANS font',\n        });\n    }\n    {\n        const fontData = SerifFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: true,\n            description: 'Generic SERIF font',\n        });\n    }\n    {\n        const fontData = RobotoSlabFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: true,\n            description: 'Text font to pair with the Bravura / Gonville music fonts.',\n        });\n    }\n    {\n        const fontData = PetalumaScriptFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Text font to pair with the Petaluma music font.',\n        });\n    }\n}\n", "import { Flow } from './flow.js';\nimport { log, RuntimeError } from './util.js';\nexport class Vex {\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static getCanvasContext(canvasSelector) {\n        if (!canvasSelector) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasSelector);\n        }\n        const canvas = document.getElementById(canvasSelector);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    static benchmark(s, f) {\n        const start_time = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - start_time;\n        log(s, elapsed + 'ms');\n    }\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n", "import { Flow } from '../src/flow.js';\nimport { loadAllMusicFonts } from '../src/fonts/load_all.js';\nimport { loadTextFonts } from '../src/fonts/textfonts.js';\nloadAllMusicFonts();\nFlow.setMusicFont('Bravura', 'Gonville', 'Custom');\nloadTextFonts();\nexport * from '../src/index.js';\nexport * as default from '../src/index.js';\n", "<div id='music-sheet-2'></div>\n\n<script>\nimport { onMount } from \"svelte\";\nimport { Vex } from 'vexflow'\n\nonMount(() => {\n\n  const { Renderer, Stave } = Vex.Flow;\n\n  const div = document.getElementById('music-sheet-2');\n  const renderer = new Renderer(div, Renderer.Backends.SVG);\n  \n  // Configure the rendering context.\n  renderer.resize(500, 500);\n  const context = renderer.getContext();\n  context.setFont('Arial', 10);\n  let color = 'yellow';\n  context.setStrokeStyle(color);\n  context.setFillStyle(color);\n  \n  // Create a stave of width 400 at position 10, 40.\n  const stave = new Stave(10, 40, 400);\n  \n  // Add a clef and time signature.\n  stave.addClef('treble').addTimeSignature('4/4');\n  \n  // Connect it to the rendering context and draw!\n  stave.setContext(context).draw();\n})\n</script>\n", "import Metronome from \"./metronome.svelte\";\nimport Guitar from \"./guitar.svelte\";\nimport RecordRythm from \"./record_rythm.svelte\";\nimport MusicSheet from \"./music_sheet.svelte\";\n\nconst recordRythm = new RecordRythm({\n  target: document.getElementById('record_rythm'),\n  props: {\n    name: \"world\",\n  },\n});\n\nconst metronome = new Metronome({\n  target: document.getElementById('metronome'),\n  props: {\n    name: \"world\",\n  },\n});\n\nconst guitar = new Guitar({\n  target: document.getElementById('guitar'),\n  props: {\n    name: \"world\",\n  },\n});\n\nconst musicSheet = new MusicSheet({\n  target: document.getElementById('music_sheet'),\n  props: {\n    name: \"world\",\n  },\n});\n\n//export default metronome;\n"],
  "mappings": "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",
  "names": ["element", "instance", "create_fragment", "attr", "delayMs", "ctx", "text", "i", "FontWeight", "FontStyle", "registry", "context", "registry", "element", "text", "context", "ModifierPosition", "note", "note", "accidentals", "note", "L", "L", "text", "L", "AnnotationHorizontalJustify", "AnnotationVerticalJustify", "text", "note", "L", "note", "articulations", "y", "note", "prefix", "StaveModifierPosition", "BarlineType", "L", "note", "group", "tick", "text", "note", "element", "global", "context", "text", "L", "ChordSymbolHorizontalJustify", "ChordSymbolVerticalJustify", "SymbolTypes", "SymbolModifiers", "note", "fontSize", "text", "L", "context", "tick", "L", "CurvePosition", "position", "note", "note", "L", "L", "note", "accidentals", "context", "L", "L", "note", "space", "ABOVE", "BELOW", "text", "text", "VoiceMode", "context", "L", "note", "note", "L", "ornaments", "note", "note", "text", "element", "RendererBackends", "RendererLineEndType", "element", "context", "note", "note", "xShift", "context", "note", "L", "text", "TextJustification", "text", "VoltaType", "text", "clefs", "keySignatures", "text", "L", "note", "tick", "durations", "context", "adjustedJustifyWidth", "distances", "targetWidth", "space", "shift", "L", "context", "note", "text", "context", "strings", "text", "context", "L", "TextBracketPosition", "text", "L", "note", "location", "width", "L", "L", "context", "note", "text", "note", "note", "__awaiter", "Renderer", "Stave", "context"]
}
